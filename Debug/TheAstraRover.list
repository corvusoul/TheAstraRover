
TheAstraRover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800c510  0800c510  0001c510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc78  0800cc78  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc78  0800cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc80  0800cc80  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800cc80  0800cc80  0001cc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc8c  0800cc8c  0001cc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cc90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000d34  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f08  20000f08  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015b4a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003197  00000000  00000000  00035d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001040  00000000  00000000  00038f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c9a  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002513b  00000000  00000000  0003ac02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014843  00000000  00000000  0005fd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2cc5  00000000  00000000  00074580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005988  00000000  00000000  00147248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0014cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4f8 	.word	0x0800c4f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c4f8 	.word	0x0800c4f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart2)
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  : huart(huart2) {}
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f91f 	bl	800127c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	b29b      	uxth	r3, r3
 800105a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800105e:	b29b      	uxth	r3, r3
 8001060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001064:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	429a      	cmp	r2, r3
 8001070:	d102      	bne.n	8001078 <_ZN14BufferedSerial4readEv+0x32>
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e016      	b.n	80010a6 <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	b291      	uxth	r1, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 80010a4:	68bb      	ldr	r3, [r7, #8]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ce:	da25      	bge.n	800111c <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80010d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f008 fd64 	bl	8009bb2 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800110a:	429a      	cmp	r2, r3
 800110c:	d921      	bls.n	8001152 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 800111a:	e01a      	b.n	8001152 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	4618      	mov	r0, r3
 8001128:	f008 fd43 	bl	8009bb2 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001138:	429a      	cmp	r2, r3
 800113a:	d905      	bls.n	8001148 <_ZN14BufferedSerial5writeEPKhi+0x96>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	b29a      	uxth	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f804 	bl	8001160 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00f      	beq.n	8001192 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800117e:	429a      	cmp	r2, r3
 8001180:	d107      	bne.n	8001192 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b20      	cmp	r3, #32
 800119e:	d10b      	bne.n	80011b8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d003      	beq.n	80011b8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 80011bc:	2300      	movs	r3, #0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d154      	bne.n	800126c <_ZN14BufferedSerial15flush_tx_bufferEv+0x10c>
  mutex = true;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d103      	bne.n	80011e0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d21b      	bcs.n	8001228 <_ZN14BufferedSerial15flush_tx_bufferEv+0xc8>
    uint16_t length = tx_head - tx_tail;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart2, &(tx_buf[tx_tail]), length);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001206:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	3304      	adds	r3, #4
 8001210:	89ba      	ldrh	r2, [r7, #12]
 8001212:	4619      	mov	r1, r3
 8001214:	4818      	ldr	r0, [pc, #96]	; (8001278 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8001216:	f005 fb6f 	bl	80068f8 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8001226:	e01d      	b.n	8001264 <_ZN14BufferedSerial15flush_tx_bufferEv+0x104>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart2, &(tx_buf[tx_tail]), length);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800123e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	3304      	adds	r3, #4
 8001248:	89fa      	ldrh	r2, [r7, #14]
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 800124e:	f005 fb53 	bl	80068f8 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <_ZN14BufferedSerial15flush_tx_bufferEv+0x114>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e000      	b.n	800126e <_ZN14BufferedSerial15flush_tx_bufferEv+0x10e>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 800126c:	bf00      	nop
}
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200005fc 	.word	0x200005fc
 8001278:	20000cb4 	.word	0x20000cb4

0800127c <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart2, rx_buf, RX_BUF_SIZE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3304      	adds	r3, #4
 8001288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128c:	4619      	mov	r1, r3
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <_ZN14BufferedSerial15reset_rx_bufferEv+0x20>)
 8001290:	f005 fbb0 	bl	80069f4 <HAL_UART_Receive_DMA>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000cb4 	.word	0x20000cb4

080012a0 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_UART_TxCpltCallback+0x34>)
 80012c6:	f7ff ffeb 	bl	80012a0 <_ZN14BufferedSerial10get_handleEv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	429c      	cmp	r4, r3
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <HAL_UART_TxCpltCallback+0x34>)
 80012de:	f7ff ff3f 	bl	8001160 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001f0 	.word	0x200001f0

080012f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <HAL_UART_RxCpltCallback+0x18>)
 80012fa:	f7ff ffbf 	bl	800127c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001f0 	.word	0x200001f0

0800130c <_Z41__static_initialization_and_destruction_0ii>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d108      	bne.n	800132e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001322:	4293      	cmp	r3, r2
 8001324:	d103      	bne.n	800132e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 8001326:	4904      	ldr	r1, [pc, #16]	; (8001338 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800132a:	f7ff fe61 	bl	8000ff0 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000cb4 	.word	0x20000cb4
 800133c:	200001f0 	.word	0x200001f0

08001340 <_GLOBAL__sub_I_buff_serial>:
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
 8001344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff ffdf 	bl	800130c <_Z41__static_initialization_and_destruction_0ii>
 800134e:	bd80      	pop	{r7, pc}

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_DMA_Init+0x4c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <MX_DMA_Init+0x4c>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_DMA_Init+0x4c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2010      	movs	r0, #16
 8001378:	f003 f8c1 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800137c:	2010      	movs	r0, #16
 800137e:	f003 f8da 	bl	8004536 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2011      	movs	r0, #17
 8001388:	f003 f8b9 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800138c:	2011      	movs	r0, #17
 800138e:	f003 f8d2 	bl	8004536 <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_GPIO_Init+0xbc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <MX_GPIO_Init+0xbc>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_GPIO_Init+0xbc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_GPIO_Init+0xbc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a24      	ldr	r2, [pc, #144]	; (800145c <MX_GPIO_Init+0xbc>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <MX_GPIO_Init+0xbc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_GPIO_Init+0xbc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <MX_GPIO_Init+0xbc>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_GPIO_Init+0xbc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_GPIO_Init+0xbc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <MX_GPIO_Init+0xbc>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_GPIO_Init+0xbc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_GPIO_Init+0xbc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <MX_GPIO_Init+0xbc>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_GPIO_Init+0xbc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_GPIO_Init+0xbc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <MX_GPIO_Init+0xbc>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_GPIO_Init+0xbc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f002 feda 	bl	800421c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f868 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f7ff ff98 	bl	80013a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f7ff ff6e 	bl	8001350 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001474:	f002 fdc6 	bl	8004004 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001478:	f002 f9a8 	bl	80037cc <MX_TIM1_Init>
  MX_TIM3_Init();
 800147c:	f002 fa6a 	bl	8003954 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001480:	f002 fb00 	bl	8003a84 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001484:	f002 fb96 	bl	8003bb4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001488:	4828      	ldr	r0, [pc, #160]	; (800152c <main+0xcc>)
 800148a:	f004 faf5 	bl	8005a78 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800148e:	4828      	ldr	r0, [pc, #160]	; (8001530 <main+0xd0>)
 8001490:	f004 faf2 	bl	8005a78 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001494:	4827      	ldr	r0, [pc, #156]	; (8001534 <main+0xd4>)
 8001496:	f004 faef 	bl	8005a78 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 800149a:	4827      	ldr	r0, [pc, #156]	; (8001538 <main+0xd8>)
 800149c:	f004 faec 	bl	8005a78 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014a0:	2100      	movs	r1, #0
 80014a2:	4822      	ldr	r0, [pc, #136]	; (800152c <main+0xcc>)
 80014a4:	f004 fbaa 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014a8:	2104      	movs	r1, #4
 80014aa:	4820      	ldr	r0, [pc, #128]	; (800152c <main+0xcc>)
 80014ac:	f004 fba6 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014b0:	2108      	movs	r1, #8
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <main+0xcc>)
 80014b4:	f004 fba2 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014b8:	210c      	movs	r1, #12
 80014ba:	481c      	ldr	r0, [pc, #112]	; (800152c <main+0xcc>)
 80014bc:	f004 fb9e 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014c0:	2100      	movs	r1, #0
 80014c2:	481b      	ldr	r0, [pc, #108]	; (8001530 <main+0xd0>)
 80014c4:	f004 fb9a 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014c8:	2104      	movs	r1, #4
 80014ca:	4819      	ldr	r0, [pc, #100]	; (8001530 <main+0xd0>)
 80014cc:	f004 fb96 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014d0:	2108      	movs	r1, #8
 80014d2:	4817      	ldr	r0, [pc, #92]	; (8001530 <main+0xd0>)
 80014d4:	f004 fb92 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80014d8:	210c      	movs	r1, #12
 80014da:	4815      	ldr	r0, [pc, #84]	; (8001530 <main+0xd0>)
 80014dc:	f004 fb8e 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014e0:	2100      	movs	r1, #0
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <main+0xd4>)
 80014e4:	f004 fb8a 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014e8:	2104      	movs	r1, #4
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <main+0xd4>)
 80014ec:	f004 fb86 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80014f0:	2108      	movs	r1, #8
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <main+0xd4>)
 80014f4:	f004 fb82 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014f8:	210c      	movs	r1, #12
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <main+0xd4>)
 80014fc:	f004 fb7e 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001500:	2100      	movs	r1, #0
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <main+0xd8>)
 8001504:	f004 fb7a 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001508:	2104      	movs	r1, #4
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <main+0xd8>)
 800150c:	f004 fb76 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001510:	2108      	movs	r1, #8
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <main+0xd8>)
 8001514:	f004 fb72 	bl	8005bfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001518:	210c      	movs	r1, #12
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <main+0xd8>)
 800151c:	f004 fb6e 	bl	8005bfc <HAL_TIM_PWM_Start>

  setup();
 8001520:	f001 f936 	bl	8002790 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001524:	f001 f982 	bl	800282c <loop>
 8001528:	e7fc      	b.n	8001524 <main+0xc4>
 800152a:	bf00      	nop
 800152c:	20000b94 	.word	0x20000b94
 8001530:	20000bdc 	.word	0x20000bdc
 8001534:	20000c24 	.word	0x20000c24
 8001538:	20000c6c 	.word	0x20000c6c

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f008 fa15 	bl	800997a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <SystemClock_Config+0xcc>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <SystemClock_Config+0xcc>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <SystemClock_Config+0xcc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <SystemClock_Config+0xd0>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <SystemClock_Config+0xd0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015ac:	2304      	movs	r3, #4
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015b0:	2354      	movs	r3, #84	; 0x54
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b8:	2307      	movs	r3, #7
 80015ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fd71 	bl	80050a8 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015cc:	f000 f820 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2302      	movs	r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2102      	movs	r1, #2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 ffd2 	bl	8005598 <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015fa:	f000 f809 	bl	8001610 <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3750      	adds	r7, #80	; 0x50
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <_ZN13STM32HardwareC1Ev+0x1c>)
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	200001f0 	.word	0x200001f0

0800163c <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fcf1 	bl	8001030 <_ZN14BufferedSerial4initEv>
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fcef 	bl	8001046 <_ZN14BufferedSerial4readEv>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd13 	bl	80010b2 <_ZN14BufferedSerial5writeEPKhi>
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	f002 fe24 	bl	80042e8 <HAL_GetTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <_ZN3ros3MsgC1Ev+0x1c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	0800c7c4 	.word	0x0800c7c4

080016ec <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
      data()
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ffe8 	bl	80016cc <_ZN3ros3MsgC1Ev>
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ffcf 	bl	80016aa <_ZN3ros4TimeC1Ev>
    {
    }
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	0800c7ac 	.word	0x0800c7ac

0800171c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	b2ca      	uxtb	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	0a19      	lsrs	r1, r3, #8
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	b2ca      	uxtb	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	0c19      	lsrs	r1, r3, #16
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3302      	adds	r3, #2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	b2ca      	uxtb	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	0e19      	lsrs	r1, r3, #24
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3303      	adds	r3, #3
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	4413      	add	r3, r2
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	0a19      	lsrs	r1, r3, #8
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	0c19      	lsrs	r1, r3, #16
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3302      	adds	r3, #2
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0e19      	lsrs	r1, r3, #24
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3303      	adds	r3, #3
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	b2ca      	uxtb	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3304      	adds	r3, #4
 80017bc:	60fb      	str	r3, [r7, #12]
      return offset;
 80017be:	68fb      	ldr	r3, [r7, #12]
    }
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	440b      	add	r3, r1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3302      	adds	r3, #2
 8001806:	6839      	ldr	r1, [r7, #0]
 8001808:	440b      	add	r3, r1
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3303      	adds	r3, #3
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	440b      	add	r3, r1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3302      	adds	r3, #2
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	440b      	add	r3, r1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3303      	adds	r3, #3
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	440b      	add	r3, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3304      	adds	r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
     return offset;
 8001886:	68fb      	ldr	r3, [r7, #12]
    }
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0800c510 	.word	0x0800c510

080018b0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	0800c520 	.word	0x0800c520

080018cc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fef8 	bl	80016cc <_ZN3ros3MsgC1Ev>
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018ec:	609a      	str	r2, [r3, #8]
      message_type(""),
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018f2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018f8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
    {
    }
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	0800c794 	.word	0x0800c794
 8001910:	0800c544 	.word	0x0800c544

08001914 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	8899      	ldrh	r1, [r3, #4]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b299      	uxth	r1, r3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	3301      	adds	r3, #1
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	4413      	add	r3, r2
 8001940:	b2ca      	uxtb	r2, r1
 8001942:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3302      	adds	r3, #2
 8001948:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fc8e 	bl	8000270 <strlen>
 8001954:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	69b9      	ldr	r1, [r7, #24]
 800195e:	4618      	mov	r0, r3
 8001960:	f001 f852 	bl	8002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3304      	adds	r3, #4
 8001968:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	18d0      	adds	r0, r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4619      	mov	r1, r3
 8001978:	f008 f91b 	bl	8009bb2 <memcpy>
      offset += length_topic_name;
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4413      	add	r3, r2
 8001982:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc71 	bl	8000270 <strlen>
 800198e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	4413      	add	r3, r2
 8001996:	6979      	ldr	r1, [r7, #20]
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f835 	bl	8002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	18d0      	adds	r0, r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f008 f8fe 	bl	8009bb2 <memcpy>
      offset += length_message_type;
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	4413      	add	r3, r2
 80019bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fc54 	bl	8000270 <strlen>
 80019c8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	6939      	ldr	r1, [r7, #16]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 f818 	bl	8002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3304      	adds	r3, #4
 80019dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	18d0      	adds	r0, r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4619      	mov	r1, r3
 80019ec:	f008 f8e1 	bl	8009bb2 <memcpy>
      offset += length_md5sum;
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4413      	add	r3, r2
 80019f6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0a19      	lsrs	r1, r3, #8
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	b2ca      	uxtb	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	0c19      	lsrs	r1, r3, #16
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3302      	adds	r3, #2
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	0e19      	lsrs	r1, r3, #24
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3303      	adds	r3, #3
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001a40:	69fb      	ldr	r3, [r7, #28]
    }
 8001a42:	4618      	mov	r0, r3
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b08a      	sub	sp, #40	; 0x28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	440b      	add	r3, r1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	3302      	adds	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	441a      	add	r2, r3
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 ffd5 	bl	8002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	e00b      	b.n	8001ac0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	441a      	add	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	3301      	adds	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3ed      	bcc.n	8001aa8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4413      	add	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	441a      	add	r2, r3
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 ffa2 	bl	8002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	3304      	adds	r3, #4
 8001b06:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	e00b      	b.n	8001b26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	441a      	add	r2, r3
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	440b      	add	r3, r1
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	3301      	adds	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3ed      	bcc.n	8001b0e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4413      	add	r3, r2
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	441a      	add	r2, r3
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 ff6f 	bl	8002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e00b      	b.n	8001b8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	441a      	add	r2, r3
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	6839      	ldr	r1, [r7, #0]
 8001b80:	440b      	add	r3, r1
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3ed      	bcc.n	8001b74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	441a      	add	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4413      	add	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	440a      	add	r2, r1
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	3302      	adds	r3, #2
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	440b      	add	r3, r1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	3303      	adds	r3, #3
 8001bf8:	6839      	ldr	r1, [r7, #0]
 8001bfa:	440b      	add	r3, r1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	061b      	lsls	r3, r3, #24
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001c10:	69bb      	ldr	r3, [r7, #24]
    }
 8001c12:	4618      	mov	r0, r3
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	0800c548 	.word	0x0800c548

08001c38 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	0800c564 	.word	0x0800c564

08001c54 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fd34 	bl	80016cc <_ZN3ros3MsgC1Ev>
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
      level(0),
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	711a      	strb	r2, [r3, #4]
      msg("")
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c74:	609a      	str	r2, [r3, #8]
    {
    }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	0800c77c 	.word	0x0800c77c
 8001c84:	0800c544 	.word	0x0800c544

08001c88 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	7912      	ldrb	r2, [r2, #4]
 8001ca0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fadf 	bl	8000270 <strlen>
 8001cb2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fea3 	bl	8002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	18d0      	adds	r0, r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f007 ff6c 	bl	8009bb2 <memcpy>
      offset += length_msg;
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    }
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	441a      	add	r2, r3
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fe94 	bl	8002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3304      	adds	r3, #4
 8001d22:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e00b      	b.n	8001d42 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	441a      	add	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	440b      	add	r3, r1
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d3ed      	bcc.n	8001d2a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	3b01      	subs	r3, #1
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	441a      	add	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
     return offset;
 8001d72:	693b      	ldr	r3, [r7, #16]
    }
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	0800c588 	.word	0x0800c588

08001d98 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	0800c59c 	.word	0x0800c59c

08001db4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fc84 	bl	80016cc <_ZN3ros3MsgC1Ev>
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	0800c764 	.word	0x0800c764

08001e10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0a19      	lsrs	r1, r3, #8
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0c19      	lsrs	r1, r3, #16
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3302      	adds	r3, #2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0e19      	lsrs	r1, r3, #24
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3303      	adds	r3, #3
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3304      	adds	r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	e02a      	b.n	8001ec4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	0a19      	lsrs	r1, r3, #8
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3301      	adds	r3, #1
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	b2ca      	uxtb	r2, r1
 8001e96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	0c19      	lsrs	r1, r3, #16
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	0e19      	lsrs	r1, r3, #24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3303      	adds	r3, #3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3304      	adds	r3, #4
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3cf      	bcc.n	8001e6e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	0a19      	lsrs	r1, r3, #8
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	0c19      	lsrs	r1, r3, #16
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	0e19      	lsrs	r1, r3, #24
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	3303      	adds	r3, #3
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	3304      	adds	r3, #4
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e02a      	b.n	8001f74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	b2ca      	uxtb	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0a19      	lsrs	r1, r3, #8
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3301      	adds	r3, #1
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	0c19      	lsrs	r1, r3, #16
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	3302      	adds	r3, #2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	b2ca      	uxtb	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	0e19      	lsrs	r1, r3, #24
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	3303      	adds	r3, #3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3cf      	bcc.n	8001f1e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69d9      	ldr	r1, [r3, #28]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	0a19      	lsrs	r1, r3, #8
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	0c19      	lsrs	r1, r3, #16
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	0e19      	lsrs	r1, r3, #24
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	3303      	adds	r3, #3
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e027      	b.n	800201e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe f948 	bl	8000270 <strlen>
 8001fe0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fd0c 	bl	8002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	18d0      	adds	r0, r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4619      	mov	r1, r3
 800200c:	f007 fdd1 	bl	8009bb2 <memcpy>
      offset += length_stringsi;
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4413      	add	r3, r2
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3301      	adds	r3, #1
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3d2      	bcc.n	8001fce <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002032:	b580      	push	{r7, lr}
 8002034:	b08e      	sub	sp, #56	; 0x38
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204c:	3301      	adds	r3, #1
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	6a3a      	ldr	r2, [r7, #32]
 8002058:	4313      	orrs	r3, r2
 800205a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	3302      	adds	r3, #2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	4313      	orrs	r3, r2
 800206c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002070:	3303      	adds	r3, #3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	6a3a      	ldr	r2, [r7, #32]
 800207c:	4313      	orrs	r3, r2
 800207e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	3304      	adds	r3, #4
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	d90a      	bls.n	80020a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f005 fe7a 	bl	8007d94 <realloc>
 80020a0:	4602      	mov	r2, r0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
 80020b0:	e035      	b.n	800211e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	440a      	add	r2, r1
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	3301      	adds	r3, #1
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	440b      	add	r3, r1
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	3302      	adds	r3, #2
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	440b      	add	r3, r1
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	3303      	adds	r3, #3
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	440b      	add	r3, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	3304      	adds	r3, #4
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	3301      	adds	r3, #1
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002124:	429a      	cmp	r2, r3
 8002126:	d3c4      	bcc.n	80020b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	3301      	adds	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4313      	orrs	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	3302      	adds	r3, #2
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	4313      	orrs	r3, r2
 8002154:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	3303      	adds	r3, #3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	4313      	orrs	r3, r2
 8002166:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216a:	3304      	adds	r3, #4
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	d90a      	bls.n	800218e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f005 fe06 	bl	8007d94 <realloc>
 8002188:	4602      	mov	r2, r0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002198:	e035      	b.n	8002206 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	440a      	add	r2, r1
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b0:	3301      	adds	r3, #1
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	440b      	add	r3, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	3302      	adds	r3, #2
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	440b      	add	r3, r1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	3303      	adds	r3, #3
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	3304      	adds	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	3214      	adds	r2, #20
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	3301      	adds	r3, #1
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220c:	429a      	cmp	r2, r3
 800220e:	d3c4      	bcc.n	800219a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	3301      	adds	r3, #1
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	3302      	adds	r3, #2
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002240:	3303      	adds	r3, #3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	3304      	adds	r3, #4
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	429a      	cmp	r2, r3
 800225e:	d90a      	bls.n	8002276 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f005 fd92 	bl	8007d94 <realloc>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002280:	e03e      	b.n	8002300 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	441a      	add	r2, r3
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fbd9 	bl	8002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	3304      	adds	r3, #4
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e00b      	b.n	80022b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	441a      	add	r2, r3
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	3b01      	subs	r3, #1
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	440b      	add	r3, r1
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	3301      	adds	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3ed      	bcc.n	80022a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80022c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	3b01      	subs	r3, #1
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	3b01      	subs	r3, #1
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	441a      	add	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80022e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	3220      	adds	r2, #32
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	3301      	adds	r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002306:	429a      	cmp	r2, r3
 8002308:	d3bb      	bcc.n	8002282 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800230c:	4618      	mov	r0, r3
 800230e:	3738      	adds	r7, #56	; 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	0800c6b8 	.word	0x0800c6b8

08002330 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	0800c5c0 	.word	0x0800c5c0

0800234c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	611a      	str	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68d8      	ldr	r0, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6891      	ldr	r1, [r2, #8]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4798      	blx	r3
 8002398:	4603      	mov	r3, r0
  };
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
  }
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
      data("")
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f980 	bl	80016cc <_ZN3ros3MsgC1Ev>
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_ZN8std_msgs6StringC1Ev+0x28>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80023d6:	605a      	str	r2, [r3, #4]
    {
    }
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800c720 	.word	0x0800c720
 80023e8:	0800c544 	.word	0x0800c544

080023ec <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd ff36 	bl	8000270 <strlen>
 8002404:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fafa 	bl	8002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3304      	adds	r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	18d0      	adds	r0, r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	4619      	mov	r1, r3
 8002428:	f007 fbc3 	bl	8009bb2 <memcpy>
      offset += length_data;
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
      return offset;
 8002434:	68fb      	ldr	r3, [r7, #12]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	441a      	add	r2, r3
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 faf4 	bl	8002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	3304      	adds	r3, #4
 8002462:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e00b      	b.n	8002482 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	441a      	add	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3b01      	subs	r3, #1
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	440b      	add	r3, r1
 8002478:	7812      	ldrb	r2, [r2, #0]
 800247a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	429a      	cmp	r2, r3
 800248c:	d3ed      	bcc.n	800246a <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	3b01      	subs	r3, #1
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	441a      	add	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
     return offset;
 80024b2:	693b      	ldr	r3, [r7, #16]
    }
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0800c5e4 	.word	0x0800c5e4

080024d8 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	0800c5f4 	.word	0x0800c5f4

080024f4 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
      data(0)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f8e4 	bl	80016cc <_ZN3ros3MsgC1Ev>
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	809a      	strh	r2, [r3, #4]
    {
    }
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	0800c708 	.word	0x0800c708

08002520 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002534:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002536:	8939      	ldrh	r1, [r7, #8]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b299      	uxth	r1, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3301      	adds	r3, #1
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3302      	adds	r3, #2
 8002558:	60fb      	str	r3, [r7, #12]
      return offset;
 800255a:	68fb      	ldr	r3, [r7, #12]
    }
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800257a:	893a      	ldrh	r2, [r7, #8]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	440b      	add	r3, r1
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	b21a      	sxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	440b      	add	r3, r1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 80025a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3302      	adds	r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
     return offset;
 80025b4:	68fb      	ldr	r3, [r7, #12]
    }
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <_ZN8std_msgs5Int167getTypeEv+0x18>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	0800c618 	.word	0x0800c618

080025e0 <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	0800c628 	.word	0x0800c628

080025fc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	0800c750 	.word	0x0800c750

0800261c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ffe8 	bl	80025fc <_ZN3ros15NodeHandleBase_C1Ev>
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fff0 	bl	800161c <_ZN13STM32HardwareC1Ev>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3318      	adds	r3, #24
 8002658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f007 f98b 	bl	800997a <memset>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f007 f982 	bl	800997a <memset>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800267c:	2264      	movs	r2, #100	; 0x64
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f007 f97a 	bl	800997a <memset>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800268c:	2264      	movs	r2, #100	; 0x64
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f007 f972 	bl	800997a <memset>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fb61 	bl	8001db4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	0800c6f4 	.word	0x0800c6f4

08002700 <_Z6vel_cbRKN8std_msgs6StringE>:
int i = 0;
std_msgs::Int16 incmsg;
ros::Publisher increment("increment", &incmsg);

// Subscriber:
void vel_cb(const std_msgs::String& msg) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	const char *tempstr = msg.data;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	617b      	str	r3, [r7, #20]
	char *ikstr = strdup(tempstr);  // Create a copy to preserve the original string
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f007 f93c 	bl	800998c <strdup>
 8002714:	4603      	mov	r3, r0
 8002716:	613b      	str	r3, [r7, #16]
	char *pt;

	int i = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]

	pt = strtok(ikstr, ",");
 800271c:	4917      	ldr	r1, [pc, #92]	; (800277c <_Z6vel_cbRKN8std_msgs6StringE+0x7c>)
 800271e:	6938      	ldr	r0, [r7, #16]
 8002720:	f007 f964 	bl	80099ec <strtok>
 8002724:	61f8      	str	r0, [r7, #28]
	while (pt != NULL) {
 8002726:	e017      	b.n	8002758 <_Z6vel_cbRKN8std_msgs6StringE+0x58>
		float a = atof(pt);
 8002728:	69f8      	ldr	r0, [r7, #28]
 800272a:	f005 fa73 	bl	8007c14 <atof>
 800272e:	ec53 2b10 	vmov	r2, r3, d0
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa57 	bl	8000be8 <__aeabi_d2f>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]
		vels[i++] = a;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	61ba      	str	r2, [r7, #24]
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <_Z6vel_cbRKN8std_msgs6StringE+0x80>)
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	601a      	str	r2, [r3, #0]
		pt = strtok(NULL, ",");
 800274e:	490b      	ldr	r1, [pc, #44]	; (800277c <_Z6vel_cbRKN8std_msgs6StringE+0x7c>)
 8002750:	2000      	movs	r0, #0
 8002752:	f007 f94b 	bl	80099ec <strtok>
 8002756:	61f8      	str	r0, [r7, #28]
	while (pt != NULL) {
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e4      	bne.n	8002728 <_Z6vel_cbRKN8std_msgs6StringE+0x28>
	}

	free(ikstr);  // Free the memory allocated by strdup
 800275e:	6938      	ldr	r0, [r7, #16]
 8002760:	f005 fa64 	bl	8007c2c <free>
	velocityflag = 1;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <_Z6vel_cbRKN8std_msgs6StringE+0x84>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    nh.loginfo("Message Received");
 800276a:	4907      	ldr	r1, [pc, #28]	; (8002788 <_Z6vel_cbRKN8std_msgs6StringE+0x88>)
 800276c:	4807      	ldr	r0, [pc, #28]	; (800278c <_Z6vel_cbRKN8std_msgs6StringE+0x8c>)
 800276e:	f000 f990 	bl	8002a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
//  float a = strtof(ikstr, &split);

}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	0800c64c 	.word	0x0800c64c
 8002780:	20000b30 	.word	0x20000b30
 8002784:	20000b50 	.word	0x20000b50
 8002788:	0800c650 	.word	0x0800c650
 800278c:	20000600 	.word	0x20000600

08002790 <setup>:

ros::Subscriber<std_msgs::String> speed_sub("ikstring", &vel_cb);

// Setup node:
void setup(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  TIM1->CCR1 = 50;
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <setup+0x80>)
 8002796:	2232      	movs	r2, #50	; 0x32
 8002798:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 50;
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <setup+0x80>)
 800279c:	2232      	movs	r2, #50	; 0x32
 800279e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 50;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <setup+0x80>)
 80027a2:	2232      	movs	r2, #50	; 0x32
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 50;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <setup+0x80>)
 80027a8:	2232      	movs	r2, #50	; 0x32
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
  TIM3->CCR1 = 50;
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <setup+0x84>)
 80027ae:	2232      	movs	r2, #50	; 0x32
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 50;
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <setup+0x84>)
 80027b4:	2232      	movs	r2, #50	; 0x32
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 50;
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <setup+0x84>)
 80027ba:	2232      	movs	r2, #50	; 0x32
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 50;
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <setup+0x84>)
 80027c0:	2232      	movs	r2, #50	; 0x32
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
  TIM4->CCR1 = 50;
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <setup+0x88>)
 80027c6:	2232      	movs	r2, #50	; 0x32
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 50;
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <setup+0x88>)
 80027cc:	2232      	movs	r2, #50	; 0x32
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 50;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <setup+0x88>)
 80027d2:	2232      	movs	r2, #50	; 0x32
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 50;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <setup+0x88>)
 80027d8:	2232      	movs	r2, #50	; 0x32
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
  TIM8->CCR1 = 50;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <setup+0x8c>)
 80027de:	2232      	movs	r2, #50	; 0x32
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM8->CCR2 = 50;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <setup+0x8c>)
 80027e4:	2232      	movs	r2, #50	; 0x32
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM8->CCR3 = 50;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <setup+0x8c>)
 80027ea:	2232      	movs	r2, #50	; 0x32
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM8->CCR4 = 50;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <setup+0x8c>)
 80027f0:	2232      	movs	r2, #50	; 0x32
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
  nh.initNode();
 80027f4:	480a      	ldr	r0, [pc, #40]	; (8002820 <setup+0x90>)
 80027f6:	f000 f98f 	bl	8002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(increment);
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <setup+0x94>)
 80027fc:	4808      	ldr	r0, [pc, #32]	; (8002820 <setup+0x90>)
 80027fe:	f000 f9a8 	bl	8002b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(speed_sub);
 8002802:	4909      	ldr	r1, [pc, #36]	; (8002828 <setup+0x98>)
 8002804:	4806      	ldr	r0, [pc, #24]	; (8002820 <setup+0x90>)
 8002806:	f000 f9d2 	bl	8002bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40010000 	.word	0x40010000
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800
 800281c:	40010400 	.word	0x40010400
 8002820:	20000600 	.word	0x20000600
 8002824:	20000b60 	.word	0x20000b60
 8002828:	20000b74 	.word	0x20000b74

0800282c <loop>:

// Loop:
void loop(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  // Publish message:
  incmsg.data = i;
 8002830:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <loop+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b21a      	sxth	r2, r3
 8002836:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <loop+0x1bc>)
 8002838:	809a      	strh	r2, [r3, #4]
  increment.publish(&incmsg);
 800283a:	496b      	ldr	r1, [pc, #428]	; (80029e8 <loop+0x1bc>)
 800283c:	486b      	ldr	r0, [pc, #428]	; (80029ec <loop+0x1c0>)
 800283e:	f7ff fd9c 	bl	800237a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 8002842:	486b      	ldr	r0, [pc, #428]	; (80029f0 <loop+0x1c4>)
 8002844:	f000 f9e0 	bl	8002c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//FRONT RIGHT
  if (vels[0] >= 0)
 8002848:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <loop+0x1c8>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	db10      	blt.n	800287a <loop+0x4e>
  {
	  TIM1 -> CCR1 = vels[0] * 100;
 8002858:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <loop+0x1c8>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80029f8 <loop+0x1cc>
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	4b65      	ldr	r3, [pc, #404]	; (80029fc <loop+0x1d0>)
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 2a90 	vmov	r2, s15
 8002870:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1 -> CCR2 = 0;
 8002872:	4b62      	ldr	r3, [pc, #392]	; (80029fc <loop+0x1d0>)
 8002874:	2200      	movs	r2, #0
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
 8002878:	e017      	b.n	80028aa <loop+0x7e>
  }
  else if (vels[0] < 0)
 800287a:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <loop+0x1c8>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	d50f      	bpl.n	80028aa <loop+0x7e>
  {
	  TIM1 -> CCR1 = 0;
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <loop+0x1d0>)
 800288c:	2200      	movs	r2, #0
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1 -> CCR2 = vels[0] * -100;
 8002890:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <loop+0x1c8>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002a00 <loop+0x1d4>
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	4b57      	ldr	r3, [pc, #348]	; (80029fc <loop+0x1d0>)
 80028a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a4:	ee17 2a90 	vmov	r2, s15
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
//FRONT LEFT
  if (vels[1] >= 0)
 80028aa:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <loop+0x1c8>)
 80028ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80028b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	db10      	blt.n	80028dc <loop+0xb0>
  {
	  TIM1 -> CCR3 = vels[1] * 100;
 80028ba:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <loop+0x1c8>)
 80028bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80028c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80029f8 <loop+0x1cc>
 80028c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <loop+0x1d0>)
 80028ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ce:	ee17 2a90 	vmov	r2, s15
 80028d2:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1 -> CCR4 = 0;
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <loop+0x1d0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
 80028da:	e017      	b.n	800290c <loop+0xe0>
  }
  else if (vels[1] < 0)
 80028dc:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <loop+0x1c8>)
 80028de:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	d50f      	bpl.n	800290c <loop+0xe0>
  {
	  TIM1 -> CCR3 = 0;
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <loop+0x1d0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1 -> CCR4 = vels[1] * -100;
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <loop+0x1c8>)
 80028f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002a00 <loop+0x1d4>
 80028fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002900:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <loop+0x1d0>)
 8002902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002906:	ee17 2a90 	vmov	r2, s15
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
  }
//REAR LEFT
  if (vels[2] >= 0)
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <loop+0x1c8>)
 800290e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	db10      	blt.n	800293e <loop+0x112>
  {
	  TIM3 -> CCR1 = vels[0] * 100;
 800291c:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <loop+0x1c8>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80029f8 <loop+0x1cc>
 8002926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <loop+0x1d8>)
 800292c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002930:	ee17 2a90 	vmov	r2, s15
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3 -> CCR2 = 0;
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <loop+0x1d8>)
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
 800293c:	e017      	b.n	800296e <loop+0x142>
  }
  else if (vels[2] < 0)
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <loop+0x1c8>)
 8002940:	edd3 7a02 	vldr	s15, [r3, #8]
 8002944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	d50f      	bpl.n	800296e <loop+0x142>
  {
	  TIM3 -> CCR1 = 0;
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <loop+0x1d8>)
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3 -> CCR2 = vels[0] * -100;
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <loop+0x1c8>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002a00 <loop+0x1d4>
 800295e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <loop+0x1d8>)
 8002964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002968:	ee17 2a90 	vmov	r2, s15
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
  }
//REAR RIGHT
  if (vels[3] >= 0)
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <loop+0x1c8>)
 8002970:	edd3 7a03 	vldr	s15, [r3, #12]
 8002974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	db10      	blt.n	80029a0 <loop+0x174>
  {
	  TIM3 -> CCR3 = vels[0] * 100;
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <loop+0x1c8>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80029f8 <loop+0x1cc>
 8002988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <loop+0x1d8>)
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	ee17 2a90 	vmov	r2, s15
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3 -> CCR4 = 0;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <loop+0x1d8>)
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
 800299e:	e017      	b.n	80029d0 <loop+0x1a4>
  }
  else if (vels[3] < 0)
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <loop+0x1c8>)
 80029a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	d50f      	bpl.n	80029d0 <loop+0x1a4>
  {
	  TIM3 -> CCR3 = 0;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <loop+0x1d8>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3 -> CCR4 = vels[0] * -100;
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <loop+0x1c8>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002a00 <loop+0x1d4>
 80029c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <loop+0x1d8>)
 80029c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ca:	ee17 2a90 	vmov	r2, s15
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
  }
  i++;
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <loop+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <loop+0x1b8>)
 80029d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(50);
 80029da:	2032      	movs	r0, #50	; 0x32
 80029dc:	f001 fc90 	bl	8004300 <HAL_Delay>
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000b54 	.word	0x20000b54
 80029e8:	20000b58 	.word	0x20000b58
 80029ec:	20000b60 	.word	0x20000b60
 80029f0:	20000600 	.word	0x20000600
 80029f4:	20000b30 	.word	0x20000b30
 80029f8:	42c80000 	.word	0x42c80000
 80029fc:	40010000 	.word	0x40010000
 8002a00:	c2c80000 	.word	0xc2c80000
 8002a04:	40000400 	.word	0x40000400

08002a08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e00c      	b.n	8002a32 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	fa22 f103 	lsr.w	r1, r2, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	b2ca      	uxtb	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d9ef      	bls.n	8002a18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e010      	b.n	8002a7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	440a      	add	r2, r1
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	00d2      	lsls	r2, r2, #3
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d9eb      	bls.n	8002a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa84 	bl	8002fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	0800c738 	.word	0x0800c738

08002ad0 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ffe5 	bl	8002ab0 <_ZN3ros11Subscriber_C1Ev>
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	330c      	adds	r3, #12
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fc63 	bl	80023bc <_ZN8std_msgs6StringC1Ev>
    cb_(cb),
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
  };
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	0800c6dc 	.word	0x0800c6dc

08002b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fd89 	bl	800163c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e01b      	b.n	8002b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
      if (publishers[i] == 0) // empty slot
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d110      	bne.n	8002b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
        publishers[i] = &p;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	60da      	str	r2, [r3, #12]
        return true;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e006      	b.n	8002ba2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b18      	cmp	r3, #24
 8002b9e:	dde0      	ble.n	8002b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8002ba0:	2300      	movs	r3, #0
  }
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e01a      	b.n	8002bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
      if (subscribers[i] == 0) // empty slot
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10e      	bne.n	8002bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
        subscribers[i] = &s;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	605a      	str	r2, [r3, #4]
        return true;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e006      	b.n	8002bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b18      	cmp	r3, #24
 8002bf8:	dde1      	ble.n	8002bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
    return false;
 8002bfa:	2300      	movs	r3, #0
  }
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe fd3d 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8002c1a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d903      	bls.n	8002c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d903      	bls.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fd17 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	bf8c      	ite	hi
 8002c74:	2301      	movhi	r3, #1
 8002c76:	2300      	movls	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002c7e:	f06f 0301 	mvn.w	r3, #1
 8002c82:	e190      	b.n	8002fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fce4 	bl	8001656 <_ZN13STM32Hardware4readEv>
 8002c8e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f2c0 8170 	blt.w	8002f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002cae:	2b07      	cmp	r3, #7
 8002cb0:	d11d      	bne.n	8002cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002cb8:	1c59      	adds	r1, r3, #1
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	b2d1      	uxtb	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	460a      	mov	r2, r1
 8002cca:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1b7      	bne.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002cec:	e7b2      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d128      	bne.n	8002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
 8002cfc:	d10d      	bne.n	8002d1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f103 0214 	add.w	r2, r3, #20
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002d18:	e79c      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fcb8 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	bf8c      	ite	hi
 8002d32:	2301      	movhi	r3, #1
 8002d34:	2300      	movls	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d08b      	beq.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8002d44:	f06f 0301 	mvn.w	r3, #1
 8002d48:	e12d      	b.n	8002fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d118      	bne.n	8002d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2bfe      	cmp	r3, #254	; 0xfe
 8002d58:	d107      	bne.n	8002d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002d68:	e774      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f af6b 	bne.w	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f931 	bl	8002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002d84:	e766      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d113      	bne.n	8002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002db6:	e74d      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d110      	bne.n	8002de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002de2:	e737      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d116      	bne.n	8002e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002df4:	425a      	negs	r2, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	bf58      	it	pl
 8002dfc:	4253      	negpl	r3, r2
 8002dfe:	2bff      	cmp	r3, #255	; 0xff
 8002e00:	d107      	bne.n	8002e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002e10:	e720      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002e1a:	e71b      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10f      	bne.n	8002e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002e44:	e706      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d117      	bne.n	8002e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2207      	movs	r2, #7
 8002e66:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f aeef 	bne.w	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002e7e:	e6e9      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	f47f aee4 	bne.w	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002e9a:	425a      	negs	r2, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	bf58      	it	pl
 8002ea2:	4253      	negpl	r3, r2
 8002ea4:	2bff      	cmp	r3, #255	; 0xff
 8002ea6:	f47f aed5 	bne.w	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d110      	bne.n	8002ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f896 	bl	8002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f8b0 	bl	8003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	e067      	b.n	8002fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d106      	bne.n	8002eee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f97a 	bl	80031e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002eec:	e6b2      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d10d      	bne.n	8002f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3318      	adds	r3, #24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f7ff f894 	bl	8002032 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8002f12:	e69f      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002f1a:	2b0b      	cmp	r3, #11
 8002f1c:	d104      	bne.n	8002f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002f26:	e695      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002f2e:	3b64      	subs	r3, #100	; 0x64
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f43f ae89 	beq.w	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002f48:	3b64      	subs	r3, #100	; 0x64
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	6858      	ldr	r0, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002f5c:	3b64      	subs	r3, #100	; 0x64
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	3218      	adds	r2, #24
 8002f72:	4611      	mov	r1, r2
 8002f74:	4798      	blx	r3
    while (true)
 8002f76:	e66d      	b.n	8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002f78:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00f      	beq.n	8002fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d906      	bls.n	8002fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f825 	bl	8002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8002fa4:	2300      	movs	r3, #0
  }
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b088      	sub	sp, #32
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fe47 	bl	8001c54 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f107 0214 	add.w	r2, r7, #20
 8002fd8:	2107      	movs	r1, #7
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	4798      	blx	r3
  }
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fb7a 	bl	80016ec <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f107 020c 	add.w	r2, r7, #12
 8003002:	210a      	movs	r1, #10
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
    rt_time = hardware_.time();
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fb41 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
  }
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b08b      	sub	sp, #44	; 0x2c
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fc4d 	bl	80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	e05a      	b.n	80030ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
      if (publishers[i] != 0) // non-empty slot
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d04f      	beq.n	80030e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
        ti.topic_id = publishers[i]->id_;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	b29b      	uxth	r3, r3
 8003058:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4608      	mov	r0, r1
 800308e:	4798      	blx	r3
 8003090:	4603      	mov	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80030aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4608      	mov	r0, r1
 80030b8:	4798      	blx	r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80030be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681c      	ldr	r4, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80030d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f963 	bl	80023a2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80030dc:	4601      	mov	r1, r0
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	461a      	mov	r2, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	3301      	adds	r3, #1
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	2b18      	cmp	r3, #24
 80030f2:	dda1      	ble.n	8003038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e067      	b.n	80031ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
      if (subscribers[i] != 0) // non-empty slot
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
        ti.topic_id = subscribers[i]->id_;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	b29b      	uxth	r3, r3
 800311e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3308      	adds	r3, #8
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4608      	mov	r0, r1
 8003156:	4798      	blx	r3
 8003158:	4603      	mov	r3, r0
 800315a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4608      	mov	r0, r1
 8003180:	4798      	blx	r3
 8003182:	4603      	mov	r3, r0
 8003184:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681c      	ldr	r4, [r3, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3304      	adds	r3, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4798      	blx	r3
 80031b8:	4601      	mov	r1, r0
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	461a      	mov	r2, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3301      	adds	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	2b18      	cmp	r3, #24
 80031ce:	dd94      	ble.n	80030fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    configured_ = true;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80031d8:	bf00      	nop
 80031da:	372c      	adds	r7, #44	; 0x2c
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd90      	pop	{r4, r7, pc}

080031e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fa7c 	bl	80016ec <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fa4b 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fadc 	bl	80017cc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4914      	ldr	r1, [pc, #80]	; (800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800321a:	fba1 1303 	umull	r1, r3, r1, r3
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4b10      	ldr	r3, [pc, #64]	; (800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800322a:	fba3 0302 	umull	r0, r3, r3, r2
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003234:	fb00 f303 	mul.w	r3, r0, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	440b      	add	r3, r1
 8003242:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003244:	f107 0308 	add.w	r3, r7, #8
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8a5 	bl	800339c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3304      	adds	r3, #4
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fa1c 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	10624dd3 	.word	0x10624dd3
 8003270:	000f4240 	.word	0x000f4240

08003274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b63      	cmp	r3, #99	; 0x63
 8003284:	dd09      	ble.n	800329a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003296:	2300      	movs	r3, #0
 8003298:	e079      	b.n	800338e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    int l = msg->serialize(message_out + 7);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80032a6:	3207      	adds	r2, #7
 80032a8:	4611      	mov	r1, r2
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
 80032ae:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	22ff      	movs	r2, #255	; 0xff
 80032b4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	22fe      	movs	r2, #254	; 0xfe
 80032bc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80032e6:	4413      	add	r3, r2
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	b21b      	sxth	r3, r3
 8003302:	121b      	asrs	r3, r3, #8
 8003304:	b21b      	sxth	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
    int chk = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003312:	2305      	movs	r3, #5
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e00c      	b.n	8003332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	3301      	adds	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3306      	adds	r3, #6
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	429a      	cmp	r2, r3
 800333a:	dded      	ble.n	8003318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3307      	adds	r3, #7
 8003340:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	425a      	negs	r2, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	bf58      	it	pl
 800334c:	4253      	negpl	r3, r2
 800334e:	b2da      	uxtb	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	6179      	str	r1, [r7, #20]
 8003356:	43d2      	mvns	r2, r2
 8003358:	b2d1      	uxtb	r1, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	460a      	mov	r2, r1
 8003360:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    if (l <= OUTPUT_SIZE)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	dc0a      	bgt.n	8003382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      hardware_.write(message_out, l);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1d18      	adds	r0, r3, #4
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4619      	mov	r1, r3
 800337a:	f7fe f97a 	bl	8001672 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	e005      	b.n	800338e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
      logerror("Message from device dropped: message larger than buffer.");
 8003382:	4905      	ldr	r1, [pc, #20]	; (8003398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f847 	bl	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	0800c664 	.word	0x0800c664

0800339c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe f972 	bl	8001694 <_ZN13STM32Hardware4timeEv>
 80033b0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4914      	ldr	r1, [pc, #80]	; (800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80033ba:	fba1 1303 	umull	r1, r3, r1, r3
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	1e5a      	subs	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80033d0:	fba3 0302 	umull	r0, r3, r3, r2
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	1aca      	subs	r2, r1, r3
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80033ea:	4413      	add	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f103 020c 	add.w	r2, r3, #12
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3310      	adds	r3, #16
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f000 fdd5 	bl	8003fac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	10624dd3 	.word	0x10624dd3
 8003410:	000f4240 	.word	0x000f4240
 8003414:	3b9aca00 	.word	0x3b9aca00

08003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	2103      	movs	r1, #3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fdc1 	bl	8002fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_Z41__static_initialization_and_destruction_0ii>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d116      	bne.n	8003472 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800344e:	480b      	ldr	r0, [pc, #44]	; (800347c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003450:	f7ff f8e4 	bl	800261c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 incmsg;
 8003454:	480a      	ldr	r0, [pc, #40]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003456:	f7ff f84d 	bl	80024f4 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher increment("increment", &incmsg);
 800345a:	2300      	movs	r3, #0
 800345c:	4a08      	ldr	r2, [pc, #32]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800345e:	4909      	ldr	r1, [pc, #36]	; (8003484 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003460:	4809      	ldr	r0, [pc, #36]	; (8003488 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003462:	f7fe ff73 	bl	800234c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::String> speed_sub("ikstring", &vel_cb);
 8003466:	2301      	movs	r3, #1
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800346a:	4909      	ldr	r1, [pc, #36]	; (8003490 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800346c:	4809      	ldr	r0, [pc, #36]	; (8003494 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800346e:	f7ff fb2f 	bl	8002ad0 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000600 	.word	0x20000600
 8003480:	20000b58 	.word	0x20000b58
 8003484:	0800c6a0 	.word	0x0800c6a0
 8003488:	20000b60 	.word	0x20000b60
 800348c:	08002701 	.word	0x08002701
 8003490:	0800c6ac 	.word	0x0800c6ac
 8003494:	20000b74 	.word	0x20000b74

08003498 <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	330c      	adds	r3, #12
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe ffc8 	bl	800243e <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	320c      	adds	r2, #12
 80034b6:	4610      	mov	r0, r2
 80034b8:	4798      	blx	r3
  }
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
  }
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	330c      	adds	r3, #12
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe ffe8 	bl	80024bc <_ZN8std_msgs6String7getTypeEv>
 80034ec:	4603      	mov	r3, r0
  }
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	330c      	adds	r3, #12
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe ffe8 	bl	80024d8 <_ZN8std_msgs6String6getMD5Ev>
 8003508:	4603      	mov	r3, r0
  }
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
    return configured_;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_GLOBAL__sub_I_nh>:
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
 8003530:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003534:	2001      	movs	r0, #1
 8003536:	f7ff ff7d 	bl	8003434 <_Z41__static_initialization_and_destruction_0ii>
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_MspInit+0x4c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_MspInit+0x4c>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_MspInit+0x4c>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_MspInit+0x4c>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_MspInit+0x4c>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800357a:	2007      	movs	r0, #7
 800357c:	f000 ffb4 	bl	80044e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800

0800358c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <NMI_Handler+0x4>

08003592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <HardFault_Handler+0x4>

08003598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <MemManage_Handler+0x4>

0800359e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <BusFault_Handler+0x4>

080035a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <UsageFault_Handler+0x4>

080035aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035d8:	f000 fe72 	bl	80042c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}

080035e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <DMA1_Stream5_IRQHandler+0x10>)
 80035e6:	f001 f959 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000cf8 	.word	0x20000cf8

080035f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <DMA1_Stream6_IRQHandler+0x10>)
 80035fa:	f001 f94f 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000d58 	.word	0x20000d58

08003608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <USART2_IRQHandler+0x10>)
 800360e:	f003 fa21 	bl	8006a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000cb4 	.word	0x20000cb4

0800361c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_kill>:

int _kill(int pid, int sig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003636:	f006 fa8f 	bl	8009b58 <__errno>
 800363a:	4603      	mov	r3, r0
 800363c:	2216      	movs	r2, #22
 800363e:	601a      	str	r2, [r3, #0]
  return -1;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_exit>:

void _exit (int status)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003654:	f04f 31ff 	mov.w	r1, #4294967295
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ffe7 	bl	800362c <_kill>
  while (1) {}    /* Make sure we hang here */
 800365e:	e7fe      	b.n	800365e <_exit+0x12>

08003660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e00a      	b.n	8003688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003672:	f3af 8000 	nop.w
 8003676:	4601      	mov	r1, r0
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	60ba      	str	r2, [r7, #8]
 800367e:	b2ca      	uxtb	r2, r1
 8003680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	3301      	adds	r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	dbf0      	blt.n	8003672 <_read+0x12>
  }

  return len;
 8003690:	687b      	ldr	r3, [r7, #4]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e009      	b.n	80036c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	60ba      	str	r2, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	dbf1      	blt.n	80036ac <_write+0x12>
  }
  return len;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_close>:

int _close(int file)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036fa:	605a      	str	r2, [r3, #4]
  return 0;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_isatty>:

int _isatty(int file)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <_sbrk+0x5c>)
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <_sbrk+0x60>)
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <_sbrk+0x64>)
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <_sbrk+0x68>)
 800375c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <_sbrk+0x64>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	429a      	cmp	r2, r3
 800376a:	d207      	bcs.n	800377c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800376c:	f006 f9f4 	bl	8009b58 <__errno>
 8003770:	4603      	mov	r3, r0
 8003772:	220c      	movs	r2, #12
 8003774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	e009      	b.n	8003790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <_sbrk+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <_sbrk+0x64>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <_sbrk+0x64>)
 800378c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800378e:	68fb      	ldr	r3, [r7, #12]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20020000 	.word	0x20020000
 800379c:	00000400 	.word	0x00000400
 80037a0:	20000b90 	.word	0x20000b90
 80037a4:	20000f08 	.word	0x20000f08

080037a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <SystemInit+0x20>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <SystemInit+0x20>)
 80037b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b096      	sub	sp, #88	; 0x58
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	609a      	str	r2, [r3, #8]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	615a      	str	r2, [r3, #20]
 80037fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2220      	movs	r2, #32
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f006 f8b8 	bl	800997a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800380a:	4b50      	ldr	r3, [pc, #320]	; (800394c <MX_TIM1_Init+0x180>)
 800380c:	4a50      	ldr	r2, [pc, #320]	; (8003950 <MX_TIM1_Init+0x184>)
 800380e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 8003810:	4b4e      	ldr	r3, [pc, #312]	; (800394c <MX_TIM1_Init+0x180>)
 8003812:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003818:	4b4c      	ldr	r3, [pc, #304]	; (800394c <MX_TIM1_Init+0x180>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <MX_TIM1_Init+0x180>)
 8003820:	2264      	movs	r2, #100	; 0x64
 8003822:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <MX_TIM1_Init+0x180>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800382a:	4b48      	ldr	r3, [pc, #288]	; (800394c <MX_TIM1_Init+0x180>)
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003830:	4b46      	ldr	r3, [pc, #280]	; (800394c <MX_TIM1_Init+0x180>)
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003836:	4845      	ldr	r0, [pc, #276]	; (800394c <MX_TIM1_Init+0x180>)
 8003838:	f002 f8ce 	bl	80059d8 <HAL_TIM_Base_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003842:	f7fd fee5 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800384c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003850:	4619      	mov	r1, r3
 8003852:	483e      	ldr	r0, [pc, #248]	; (800394c <MX_TIM1_Init+0x180>)
 8003854:	f002 fb5c 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800385e:	f7fd fed7 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003862:	483a      	ldr	r0, [pc, #232]	; (800394c <MX_TIM1_Init+0x180>)
 8003864:	f002 f970 	bl	8005b48 <HAL_TIM_PWM_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800386e:	f7fd fecf 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003876:	2300      	movs	r3, #0
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800387a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387e:	4619      	mov	r1, r3
 8003880:	4832      	ldr	r0, [pc, #200]	; (800394c <MX_TIM1_Init+0x180>)
 8003882:	f002 ff1d 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800388c:	f7fd fec0 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003890:	2360      	movs	r3, #96	; 0x60
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800389c:	2300      	movs	r3, #0
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b0:	2200      	movs	r2, #0
 80038b2:	4619      	mov	r1, r3
 80038b4:	4825      	ldr	r0, [pc, #148]	; (800394c <MX_TIM1_Init+0x180>)
 80038b6:	f002 fa69 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80038c0:	f7fd fea6 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c8:	2204      	movs	r2, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	481f      	ldr	r0, [pc, #124]	; (800394c <MX_TIM1_Init+0x180>)
 80038ce:	f002 fa5d 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80038d8:	f7fd fe9a 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e0:	2208      	movs	r2, #8
 80038e2:	4619      	mov	r1, r3
 80038e4:	4819      	ldr	r0, [pc, #100]	; (800394c <MX_TIM1_Init+0x180>)
 80038e6:	f002 fa51 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80038f0:	f7fd fe8e 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f8:	220c      	movs	r2, #12
 80038fa:	4619      	mov	r1, r3
 80038fc:	4813      	ldr	r0, [pc, #76]	; (800394c <MX_TIM1_Init+0x180>)
 80038fe:	f002 fa45 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003908:	f7fd fe82 	bl	8001610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003910:	2300      	movs	r3, #0
 8003912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <MX_TIM1_Init+0x180>)
 8003930:	f002 ff42 	bl	80067b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800393a:	f7fd fe69 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <MX_TIM1_Init+0x180>)
 8003940:	f000 fa60 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8003944:	bf00      	nop
 8003946:	3758      	adds	r7, #88	; 0x58
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000b94 	.word	0x20000b94
 8003950:	40010000 	.word	0x40010000

08003954 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003968:	f107 0320 	add.w	r3, r7, #32
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
 8003980:	615a      	str	r2, [r3, #20]
 8003982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003984:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003986:	4a3e      	ldr	r2, [pc, #248]	; (8003a80 <MX_TIM3_Init+0x12c>)
 8003988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 800398a:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <MX_TIM3_Init+0x128>)
 800398c:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003992:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <MX_TIM3_Init+0x128>)
 800399a:	2264      	movs	r2, #100	; 0x64
 800399c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <MX_TIM3_Init+0x128>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <MX_TIM3_Init+0x128>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039aa:	4834      	ldr	r0, [pc, #208]	; (8003a7c <MX_TIM3_Init+0x128>)
 80039ac:	f002 f814 	bl	80059d8 <HAL_TIM_Base_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80039b6:	f7fd fe2b 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c4:	4619      	mov	r1, r3
 80039c6:	482d      	ldr	r0, [pc, #180]	; (8003a7c <MX_TIM3_Init+0x128>)
 80039c8:	f002 faa2 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80039d2:	f7fd fe1d 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039d6:	4829      	ldr	r0, [pc, #164]	; (8003a7c <MX_TIM3_Init+0x128>)
 80039d8:	f002 f8b6 	bl	8005b48 <HAL_TIM_PWM_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80039e2:	f7fd fe15 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	4619      	mov	r1, r3
 80039f4:	4821      	ldr	r0, [pc, #132]	; (8003a7c <MX_TIM3_Init+0x128>)
 80039f6:	f002 fe63 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003a00:	f7fd fe06 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a04:	2360      	movs	r3, #96	; 0x60
 8003a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	2200      	movs	r2, #0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4818      	ldr	r0, [pc, #96]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003a1c:	f002 f9b6 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003a26:	f7fd fdf3 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4812      	ldr	r0, [pc, #72]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003a32:	f002 f9ab 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003a3c:	f7fd fde8 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	2208      	movs	r2, #8
 8003a44:	4619      	mov	r1, r3
 8003a46:	480d      	ldr	r0, [pc, #52]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003a48:	f002 f9a0 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003a52:	f7fd fddd 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	220c      	movs	r2, #12
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4807      	ldr	r0, [pc, #28]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003a5e:	f002 f995 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8003a68:	f7fd fdd2 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a6c:	4803      	ldr	r0, [pc, #12]	; (8003a7c <MX_TIM3_Init+0x128>)
 8003a6e:	f000 f9c9 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8003a72:	bf00      	nop
 8003a74:	3738      	adds	r7, #56	; 0x38
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000bdc 	.word	0x20000bdc
 8003a80:	40000400 	.word	0x40000400

08003a84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	; 0x38
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a98:	f107 0320 	add.w	r3, r7, #32
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
 8003ab0:	615a      	str	r2, [r3, #20]
 8003ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ab4:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <MX_TIM4_Init+0x128>)
 8003ab6:	4a3e      	ldr	r2, [pc, #248]	; (8003bb0 <MX_TIM4_Init+0x12c>)
 8003ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003aba:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <MX_TIM4_Init+0x128>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <MX_TIM4_Init+0x128>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <MX_TIM4_Init+0x128>)
 8003ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003acc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <MX_TIM4_Init+0x128>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <MX_TIM4_Init+0x128>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ada:	4834      	ldr	r0, [pc, #208]	; (8003bac <MX_TIM4_Init+0x128>)
 8003adc:	f001 ff7c 	bl	80059d8 <HAL_TIM_Base_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003ae6:	f7fd fd93 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af4:	4619      	mov	r1, r3
 8003af6:	482d      	ldr	r0, [pc, #180]	; (8003bac <MX_TIM4_Init+0x128>)
 8003af8:	f002 fa0a 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003b02:	f7fd fd85 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003b06:	4829      	ldr	r0, [pc, #164]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b08:	f002 f81e 	bl	8005b48 <HAL_TIM_PWM_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003b12:	f7fd fd7d 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b1e:	f107 0320 	add.w	r3, r7, #32
 8003b22:	4619      	mov	r1, r3
 8003b24:	4821      	ldr	r0, [pc, #132]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b26:	f002 fdcb 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003b30:	f7fd fd6e 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b34:	2360      	movs	r3, #96	; 0x60
 8003b36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	2200      	movs	r2, #0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4818      	ldr	r0, [pc, #96]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b4c:	f002 f91e 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003b56:	f7fd fd5b 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4812      	ldr	r0, [pc, #72]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b62:	f002 f913 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003b6c:	f7fd fd50 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2208      	movs	r2, #8
 8003b74:	4619      	mov	r1, r3
 8003b76:	480d      	ldr	r0, [pc, #52]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b78:	f002 f908 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8003b82:	f7fd fd45 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4807      	ldr	r0, [pc, #28]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b8e:	f002 f8fd 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8003b98:	f7fd fd3a 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b9c:	4803      	ldr	r0, [pc, #12]	; (8003bac <MX_TIM4_Init+0x128>)
 8003b9e:	f000 f931 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8003ba2:	bf00      	nop
 8003ba4:	3738      	adds	r7, #56	; 0x38
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000c24 	.word	0x20000c24
 8003bb0:	40000800 	.word	0x40000800

08003bb4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b096      	sub	sp, #88	; 0x58
 8003bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	611a      	str	r2, [r3, #16]
 8003be2:	615a      	str	r2, [r3, #20]
 8003be4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	2220      	movs	r2, #32
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f005 fec4 	bl	800997a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003bf2:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003bf4:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <MX_TIM8_Init+0x184>)
 8003bf6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840;
 8003bf8:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003bfa:	f44f 7252 	mov.w	r2, #840	; 0x348
 8003bfe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8003c06:	4b4b      	ldr	r3, [pc, #300]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c08:	2264      	movs	r2, #100	; 0x64
 8003c0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0c:	4b49      	ldr	r3, [pc, #292]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c12:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003c1e:	4845      	ldr	r0, [pc, #276]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c20:	f001 feda 	bl	80059d8 <HAL_TIM_Base_Init>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003c2a:	f7fd fcf1 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003c34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c38:	4619      	mov	r1, r3
 8003c3a:	483e      	ldr	r0, [pc, #248]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c3c:	f002 f968 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003c46:	f7fd fce3 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003c4a:	483a      	ldr	r0, [pc, #232]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c4c:	f001 ff7c 	bl	8005b48 <HAL_TIM_PWM_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003c56:	f7fd fcdb 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c66:	4619      	mov	r1, r3
 8003c68:	4832      	ldr	r0, [pc, #200]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c6a:	f002 fd29 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003c74:	f7fd fccc 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c78:	2360      	movs	r3, #96	; 0x60
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c84:	2300      	movs	r3, #0
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4825      	ldr	r0, [pc, #148]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003c9e:	f002 f875 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003ca8:	f7fd fcb2 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	481f      	ldr	r0, [pc, #124]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003cb6:	f002 f869 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003cc0:	f7fd fca6 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc8:	2208      	movs	r2, #8
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4819      	ldr	r0, [pc, #100]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003cce:	f002 f85d 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003cd8:	f7fd fc9a 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce0:	220c      	movs	r2, #12
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4813      	ldr	r0, [pc, #76]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003ce6:	f002 f851 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8003cf0:	f7fd fc8e 	bl	8001610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4807      	ldr	r0, [pc, #28]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003d18:	f002 fd4e 	bl	80067b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8003d22:	f7fd fc75 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003d26:	4803      	ldr	r0, [pc, #12]	; (8003d34 <MX_TIM8_Init+0x180>)
 8003d28:	f000 f86c 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8003d2c:	bf00      	nop
 8003d2e:	3758      	adds	r7, #88	; 0x58
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000c6c 	.word	0x20000c6c
 8003d38:	40010400 	.word	0x40010400

08003d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a29      	ldr	r2, [pc, #164]	; (8003df0 <HAL_TIM_Base_MspInit+0xb4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5e:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003d6a:	e03a      	b.n	8003de2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a21      	ldr	r2, [pc, #132]	; (8003df8 <HAL_TIM_Base_MspInit+0xbc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
}
 8003d92:	e026      	b.n	8003de2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_TIM_Base_MspInit+0xc0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
}
 8003dba:	e012      	b.n	8003de2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <HAL_TIM_Base_MspInit+0xc4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10d      	bne.n	8003de2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_TIM_Base_MspInit+0xb8>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a58      	ldr	r2, [pc, #352]	; (8003f84 <HAL_TIM_MspPostInit+0x180>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d11f      	bne.n	8003e66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	4b57      	ldr	r3, [pc, #348]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a56      	ldr	r2, [pc, #344]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e30:	f043 0310 	orr.w	r3, r3, #16
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003e42:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e54:	2301      	movs	r3, #1
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	484b      	ldr	r0, [pc, #300]	; (8003f8c <HAL_TIM_MspPostInit+0x188>)
 8003e60:	f000 ff86 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003e64:	e08a      	b.n	8003f7c <HAL_TIM_MspPostInit+0x178>
  else if(timHandle->Instance==TIM3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_TIM_MspPostInit+0x18c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d13c      	bne.n	8003eea <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ea8:	23c0      	movs	r3, #192	; 0xc0
 8003eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	2302      	movs	r3, #2
 8003eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebc:	f107 031c 	add.w	r3, r7, #28
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4834      	ldr	r0, [pc, #208]	; (8003f94 <HAL_TIM_MspPostInit+0x190>)
 8003ec4:	f000 ff54 	bl	8004d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003edc:	f107 031c 	add.w	r3, r7, #28
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	482d      	ldr	r0, [pc, #180]	; (8003f98 <HAL_TIM_MspPostInit+0x194>)
 8003ee4:	f000 ff44 	bl	8004d70 <HAL_GPIO_Init>
}
 8003ee8:	e048      	b.n	8003f7c <HAL_TIM_MspPostInit+0x178>
  else if(timHandle->Instance==TIM4)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_TIM_MspPostInit+0x198>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d11f      	bne.n	8003f34 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003efe:	f043 0308 	orr.w	r3, r3, #8
 8003f02:	6313      	str	r3, [r2, #48]	; 0x30
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f10:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f22:	2302      	movs	r3, #2
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f26:	f107 031c 	add.w	r3, r7, #28
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	481c      	ldr	r0, [pc, #112]	; (8003fa0 <HAL_TIM_MspPostInit+0x19c>)
 8003f2e:	f000 ff1f 	bl	8004d70 <HAL_GPIO_Init>
}
 8003f32:	e023      	b.n	8003f7c <HAL_TIM_MspPostInit+0x178>
  else if(timHandle->Instance==TIM8)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <HAL_TIM_MspPostInit+0x1a0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d11e      	bne.n	8003f7c <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_TIM_MspPostInit+0x184>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003f5a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f60:	2302      	movs	r3, #2
 8003f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	4619      	mov	r1, r3
 8003f76:	480c      	ldr	r0, [pc, #48]	; (8003fa8 <HAL_TIM_MspPostInit+0x1a4>)
 8003f78:	f000 fefa 	bl	8004d70 <HAL_GPIO_Init>
}
 8003f7c:	bf00      	nop
 8003f7e:	3730      	adds	r7, #48	; 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40020000 	.word	0x40020000
 8003f98:	40020400 	.word	0x40020400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40020c00 	.word	0x40020c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40020800 	.word	0x40020800

08003fac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0a5a      	lsrs	r2, r3, #9
 8003fbc:	490f      	ldr	r1, [pc, #60]	; (8003ffc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003fbe:	fba1 1202 	umull	r1, r2, r1, r2
 8003fc2:	09d2      	lsrs	r2, r2, #7
 8003fc4:	490e      	ldr	r1, [pc, #56]	; (8004000 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003fc6:	fb01 f202 	mul.w	r2, r1, r2
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	0a5b      	lsrs	r3, r3, #9
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	09db      	lsrs	r3, r3, #7
 8003fdc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	00044b83 	.word	0x00044b83
 8004000:	3b9aca00 	.word	0x3b9aca00

08004004 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <MX_USART2_UART_Init+0x50>)
 800400c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 8004010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 800401e:	2200      	movs	r2, #0
 8004020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 8004024:	2200      	movs	r2, #0
 8004026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 800402a:	220c      	movs	r2, #12
 800402c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 8004030:	2200      	movs	r2, #0
 8004032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800403a:	4805      	ldr	r0, [pc, #20]	; (8004050 <MX_USART2_UART_Init+0x4c>)
 800403c:	f002 fc0e 	bl	800685c <HAL_UART_Init>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004046:	f7fd fae3 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000cb4 	.word	0x20000cb4
 8004054:	40004400 	.word	0x40004400

08004058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <HAL_UART_MspInit+0x154>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f040 8093 	bne.w	80041a2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	4b4b      	ldr	r3, [pc, #300]	; (80041b0 <HAL_UART_MspInit+0x158>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	4a4a      	ldr	r2, [pc, #296]	; (80041b0 <HAL_UART_MspInit+0x158>)
 8004086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
 800408c:	4b48      	ldr	r3, [pc, #288]	; (80041b0 <HAL_UART_MspInit+0x158>)
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <HAL_UART_MspInit+0x158>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	4a43      	ldr	r2, [pc, #268]	; (80041b0 <HAL_UART_MspInit+0x158>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6313      	str	r3, [r2, #48]	; 0x30
 80040a8:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_UART_MspInit+0x158>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040b4:	230c      	movs	r3, #12
 80040b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b8:	2302      	movs	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c0:	2303      	movs	r3, #3
 80040c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040c4:	2307      	movs	r3, #7
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4619      	mov	r1, r3
 80040ce:	4839      	ldr	r0, [pc, #228]	; (80041b4 <HAL_UART_MspInit+0x15c>)
 80040d0:	f000 fe4e 	bl	8004d70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80040d4:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040d6:	4a39      	ldr	r2, [pc, #228]	; (80041bc <HAL_UART_MspInit+0x164>)
 80040d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e2:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e8:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ee:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_UART_MspInit+0x160>)
 80040fe:	2200      	movs	r2, #0
 8004100:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <HAL_UART_MspInit+0x160>)
 8004104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004108:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800410a:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_UART_MspInit+0x160>)
 800410c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004110:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004112:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <HAL_UART_MspInit+0x160>)
 8004114:	2200      	movs	r2, #0
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004118:	4827      	ldr	r0, [pc, #156]	; (80041b8 <HAL_UART_MspInit+0x160>)
 800411a:	f000 fa27 	bl	800456c <HAL_DMA_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004124:	f7fd fa74 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_UART_MspInit+0x160>)
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <HAL_UART_MspInit+0x160>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004136:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_UART_MspInit+0x16c>)
 8004138:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800413a:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_UART_MspInit+0x168>)
 800413c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004140:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004144:	2240      	movs	r2, #64	; 0x40
 8004146:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_UART_MspInit+0x168>)
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004154:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004156:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800415c:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_UART_MspInit+0x168>)
 800415e:	2200      	movs	r2, #0
 8004160:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004162:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004164:	2200      	movs	r2, #0
 8004166:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_UART_MspInit+0x168>)
 800416a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800416e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004172:	2200      	movs	r2, #0
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004176:	4812      	ldr	r0, [pc, #72]	; (80041c0 <HAL_UART_MspInit+0x168>)
 8004178:	f000 f9f8 	bl	800456c <HAL_DMA_Init>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004182:	f7fd fa45 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <HAL_UART_MspInit+0x168>)
 800418a:	635a      	str	r2, [r3, #52]	; 0x34
 800418c:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <HAL_UART_MspInit+0x168>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004192:	2200      	movs	r2, #0
 8004194:	2100      	movs	r1, #0
 8004196:	2026      	movs	r0, #38	; 0x26
 8004198:	f000 f9b1 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800419c:	2026      	movs	r0, #38	; 0x26
 800419e:	f000 f9ca 	bl	8004536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80041a2:	bf00      	nop
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40004400 	.word	0x40004400
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40020000 	.word	0x40020000
 80041b8:	20000cf8 	.word	0x20000cf8
 80041bc:	40026088 	.word	0x40026088
 80041c0:	20000d58 	.word	0x20000d58
 80041c4:	400260a0 	.word	0x400260a0

080041c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ce:	490e      	ldr	r1, [pc, #56]	; (8004208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041d4:	e002      	b.n	80041dc <LoopCopyDataInit>

080041d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041da:	3304      	adds	r3, #4

080041dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041e0:	d3f9      	bcc.n	80041d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041e4:	4c0b      	ldr	r4, [pc, #44]	; (8004214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e8:	e001      	b.n	80041ee <LoopFillZerobss>

080041ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041ec:	3204      	adds	r2, #4

080041ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041f0:	d3fb      	bcc.n	80041ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041f2:	f7ff fad9 	bl	80037a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041f6:	f005 fcb5 	bl	8009b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041fa:	f7fd f931 	bl	8001460 <main>
  bx  lr    
 80041fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004208:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800420c:	0800cc90 	.word	0x0800cc90
  ldr r2, =_sbss
 8004210:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004214:	20000f08 	.word	0x20000f08

08004218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004218:	e7fe      	b.n	8004218 <ADC_IRQHandler>
	...

0800421c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_Init+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_Init+0x40>)
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_Init+0x40>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_Init+0x40>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_Init+0x40>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_Init+0x40>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004244:	2003      	movs	r0, #3
 8004246:	f000 f94f 	bl	80044e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800424a:	2000      	movs	r0, #0
 800424c:	f000 f808 	bl	8004260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004250:	f7ff f974 	bl	800353c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00

08004260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_InitTick+0x54>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_InitTick+0x58>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	4619      	mov	r1, r3
 8004272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004276:	fbb3 f3f1 	udiv	r3, r3, r1
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f967 	bl	8004552 <HAL_SYSTICK_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e00e      	b.n	80042ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b0f      	cmp	r3, #15
 8004292:	d80a      	bhi.n	80042aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004294:	2200      	movs	r2, #0
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f000 f92f 	bl	80044fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042a0:	4a06      	ldr	r2, [pc, #24]	; (80042bc <HAL_InitTick+0x5c>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000000 	.word	0x20000000
 80042b8:	20000008 	.word	0x20000008
 80042bc:	20000004 	.word	0x20000004

080042c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_IncTick+0x20>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_IncTick+0x24>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_IncTick+0x24>)
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000008 	.word	0x20000008
 80042e4:	20000db8 	.word	0x20000db8

080042e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return uwTick;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_GetTick+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000db8 	.word	0x20000db8

08004300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7ff ffee 	bl	80042e8 <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d005      	beq.n	8004326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_Delay+0x44>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004326:	bf00      	nop
 8004328:	f7ff ffde 	bl	80042e8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	429a      	cmp	r2, r3
 8004336:	d8f7      	bhi.n	8004328 <HAL_Delay+0x28>
  {
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000008 	.word	0x20000008

08004348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004364:	4013      	ands	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437a:	4a04      	ldr	r2, [pc, #16]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	60d3      	str	r3, [r2, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 0307 	and.w	r3, r3, #7
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db0b      	blt.n	80043d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	4907      	ldr	r1, [pc, #28]	; (80043e4 <__NVIC_EnableIRQ+0x38>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2001      	movs	r0, #1
 80043ce:	fa00 f202 	lsl.w	r2, r0, r2
 80043d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	6039      	str	r1, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	db0a      	blt.n	8004412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	490c      	ldr	r1, [pc, #48]	; (8004434 <__NVIC_SetPriority+0x4c>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	440b      	add	r3, r1
 800440c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004410:	e00a      	b.n	8004428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4908      	ldr	r1, [pc, #32]	; (8004438 <__NVIC_SetPriority+0x50>)
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3b04      	subs	r3, #4
 8004420:	0112      	lsls	r2, r2, #4
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	440b      	add	r3, r1
 8004426:	761a      	strb	r2, [r3, #24]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000e100 	.word	0xe000e100
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	bf28      	it	cs
 800445a:	2304      	movcs	r3, #4
 800445c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3304      	adds	r3, #4
 8004462:	2b06      	cmp	r3, #6
 8004464:	d902      	bls.n	800446c <NVIC_EncodePriority+0x30>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3b03      	subs	r3, #3
 800446a:	e000      	b.n	800446e <NVIC_EncodePriority+0x32>
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	f04f 32ff 	mov.w	r2, #4294967295
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	401a      	ands	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004484:	f04f 31ff 	mov.w	r1, #4294967295
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	43d9      	mvns	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	4313      	orrs	r3, r2
         );
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	; 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b4:	d301      	bcc.n	80044ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00f      	b.n	80044da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <SysTick_Config+0x40>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044c2:	210f      	movs	r1, #15
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f7ff ff8e 	bl	80043e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <SysTick_Config+0x40>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <SysTick_Config+0x40>)
 80044d4:	2207      	movs	r2, #7
 80044d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000e010 	.word	0xe000e010

080044e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff29 	bl	8004348 <__NVIC_SetPriorityGrouping>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004510:	f7ff ff3e 	bl	8004390 <__NVIC_GetPriorityGrouping>
 8004514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	6978      	ldr	r0, [r7, #20]
 800451c:	f7ff ff8e 	bl	800443c <NVIC_EncodePriority>
 8004520:	4602      	mov	r2, r0
 8004522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ff5d 	bl	80043e8 <__NVIC_SetPriority>
}
 800452e:	bf00      	nop
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ff31 	bl	80043ac <__NVIC_EnableIRQ>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff ffa2 	bl	80044a4 <SysTick_Config>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004578:	f7ff feb6 	bl	80042e8 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e099      	b.n	80046bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a8:	e00f      	b.n	80045ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045aa:	f7ff fe9d 	bl	80042e8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d908      	bls.n	80045ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e078      	b.n	80046bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e8      	bne.n	80045aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <HAL_DMA_Init+0x158>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b04      	cmp	r3, #4
 8004622:	d107      	bne.n	8004634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4313      	orrs	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0307 	bic.w	r3, r3, #7
 800464a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b04      	cmp	r3, #4
 800465c:	d117      	bne.n	800468e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fb01 	bl	8004c78 <DMA_CheckFifoParam>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800468a:	2301      	movs	r3, #1
 800468c:	e016      	b.n	80046bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fab8 	bl	8004c0c <DMA_CalcBaseAndBitshift>
 800469c:	4603      	mov	r3, r0
 800469e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	223f      	movs	r2, #63	; 0x3f
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	f010803f 	.word	0xf010803f

080046c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_Start_IT+0x26>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e040      	b.n	8004770 <HAL_DMA_Start_IT+0xa8>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d12f      	bne.n	8004762 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fa4a 	bl	8004bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	223f      	movs	r2, #63	; 0x3f
 8004722:	409a      	lsls	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0216 	orr.w	r2, r2, #22
 8004736:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e005      	b.n	800476e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800476a:	2302      	movs	r3, #2
 800476c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004786:	f7ff fdaf 	bl	80042e8 <HAL_GetTick>
 800478a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d008      	beq.n	80047aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e052      	b.n	8004850 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0216 	bic.w	r2, r2, #22
 80047b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_DMA_Abort+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fa:	e013      	b.n	8004824 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047fc:	f7ff fd74 	bl	80042e8 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b05      	cmp	r3, #5
 8004808:	d90c      	bls.n	8004824 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2203      	movs	r2, #3
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e015      	b.n	8004850 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e4      	bne.n	80047fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	223f      	movs	r2, #63	; 0x3f
 8004838:	409a      	lsls	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d004      	beq.n	8004876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e00c      	b.n	8004890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2205      	movs	r2, #5
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048a8:	4b8e      	ldr	r3, [pc, #568]	; (8004ae4 <HAL_DMA_IRQHandler+0x248>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a8e      	ldr	r2, [pc, #568]	; (8004ae8 <HAL_DMA_IRQHandler+0x24c>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	2208      	movs	r2, #8
 80048c8:	409a      	lsls	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01a      	beq.n	8004908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d013      	beq.n	8004908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	2208      	movs	r2, #8
 80048f6:	409a      	lsls	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	2201      	movs	r2, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	2201      	movs	r2, #1
 800492c:	409a      	lsls	r2, r3
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	2204      	movs	r2, #4
 8004944:	409a      	lsls	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d012      	beq.n	8004974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	2204      	movs	r2, #4
 8004962:	409a      	lsls	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	f043 0204 	orr.w	r2, r3, #4
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	2210      	movs	r2, #16
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d043      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d03c      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	2210      	movs	r2, #16
 8004998:	409a      	lsls	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d024      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	e01f      	b.n	8004a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	e016      	b.n	8004a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d107      	bne.n	80049fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0208 	bic.w	r2, r2, #8
 80049fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	2220      	movs	r2, #32
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 808f 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8087 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	2220      	movs	r2, #32
 8004a34:	409a      	lsls	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d136      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0216 	bic.w	r2, r2, #22
 8004a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <HAL_DMA_IRQHandler+0x1da>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0208 	bic.w	r2, r2, #8
 8004a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	223f      	movs	r2, #63	; 0x3f
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d07e      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
        }
        return;
 8004ab2:	e079      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01d      	beq.n	8004afe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d031      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4798      	blx	r3
 8004ae0:	e02c      	b.n	8004b3c <HAL_DMA_IRQHandler+0x2a0>
 8004ae2:	bf00      	nop
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e01e      	b.n	8004b3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0210 	bic.w	r2, r2, #16
 8004b1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d032      	beq.n	8004baa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d022      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2205      	movs	r2, #5
 8004b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d307      	bcc.n	8004b84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f2      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x2cc>
 8004b82:	e000      	b.n	8004b86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
 8004ba6:	e000      	b.n	8004baa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ba8:	bf00      	nop
    }
  }
}
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d108      	bne.n	8004bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bee:	e007      	b.n	8004c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3b10      	subs	r3, #16
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <DMA_CalcBaseAndBitshift+0x64>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <DMA_CalcBaseAndBitshift+0x68>)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d909      	bls.n	8004c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c4c:	e007      	b.n	8004c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	aaaaaaab 	.word	0xaaaaaaab
 8004c74:	0800c7ec 	.word	0x0800c7ec

08004c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11f      	bne.n	8004cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d856      	bhi.n	8004d46 <DMA_CheckFifoParam+0xce>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <DMA_CheckFifoParam+0x28>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cc3 	.word	0x08004cc3
 8004ca8:	08004cb1 	.word	0x08004cb1
 8004cac:	08004d47 	.word	0x08004d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d046      	beq.n	8004d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc0:	e043      	b.n	8004d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cca:	d140      	bne.n	8004d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd0:	e03d      	b.n	8004d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cda:	d121      	bne.n	8004d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d837      	bhi.n	8004d52 <DMA_CheckFifoParam+0xda>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <DMA_CheckFifoParam+0x70>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004cff 	.word	0x08004cff
 8004cf0:	08004cf9 	.word	0x08004cf9
 8004cf4:	08004d11 	.word	0x08004d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e030      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d025      	beq.n	8004d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0e:	e022      	b.n	8004d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d18:	d11f      	bne.n	8004d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d1e:	e01c      	b.n	8004d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d903      	bls.n	8004d2e <DMA_CheckFifoParam+0xb6>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d003      	beq.n	8004d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d2c:	e018      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
      break;
 8004d32:	e015      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e00b      	b.n	8004d5e <DMA_CheckFifoParam+0xe6>
      break;
 8004d46:	bf00      	nop
 8004d48:	e00a      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e008      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e006      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d52:	bf00      	nop
 8004d54:	e004      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop

08004d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e16b      	b.n	8005064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	f040 815a 	bne.w	800505e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d005      	beq.n	8004dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d130      	bne.n	8004e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2203      	movs	r2, #3
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 0201 	and.w	r2, r3, #1
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d017      	beq.n	8004e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d123      	bne.n	8004eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	08da      	lsrs	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3208      	adds	r2, #8
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	220f      	movs	r2, #15
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0203 	and.w	r2, r3, #3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80b4 	beq.w	800505e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4b60      	ldr	r3, [pc, #384]	; (800507c <HAL_GPIO_Init+0x30c>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	4a5f      	ldr	r2, [pc, #380]	; (800507c <HAL_GPIO_Init+0x30c>)
 8004f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f04:	6453      	str	r3, [r2, #68]	; 0x44
 8004f06:	4b5d      	ldr	r3, [pc, #372]	; (800507c <HAL_GPIO_Init+0x30c>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f12:	4a5b      	ldr	r2, [pc, #364]	; (8005080 <HAL_GPIO_Init+0x310>)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	220f      	movs	r2, #15
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a52      	ldr	r2, [pc, #328]	; (8005084 <HAL_GPIO_Init+0x314>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d02b      	beq.n	8004f96 <HAL_GPIO_Init+0x226>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a51      	ldr	r2, [pc, #324]	; (8005088 <HAL_GPIO_Init+0x318>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d025      	beq.n	8004f92 <HAL_GPIO_Init+0x222>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a50      	ldr	r2, [pc, #320]	; (800508c <HAL_GPIO_Init+0x31c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01f      	beq.n	8004f8e <HAL_GPIO_Init+0x21e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4f      	ldr	r2, [pc, #316]	; (8005090 <HAL_GPIO_Init+0x320>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d019      	beq.n	8004f8a <HAL_GPIO_Init+0x21a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a4e      	ldr	r2, [pc, #312]	; (8005094 <HAL_GPIO_Init+0x324>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_GPIO_Init+0x216>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a4d      	ldr	r2, [pc, #308]	; (8005098 <HAL_GPIO_Init+0x328>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00d      	beq.n	8004f82 <HAL_GPIO_Init+0x212>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a4c      	ldr	r2, [pc, #304]	; (800509c <HAL_GPIO_Init+0x32c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <HAL_GPIO_Init+0x20e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a4b      	ldr	r2, [pc, #300]	; (80050a0 <HAL_GPIO_Init+0x330>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <HAL_GPIO_Init+0x20a>
 8004f76:	2307      	movs	r3, #7
 8004f78:	e00e      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	e00c      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f7e:	2306      	movs	r3, #6
 8004f80:	e00a      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f82:	2305      	movs	r3, #5
 8004f84:	e008      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f86:	2304      	movs	r3, #4
 8004f88:	e006      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e004      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f96:	2300      	movs	r3, #0
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	f002 0203 	and.w	r2, r2, #3
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	4093      	lsls	r3, r2
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa8:	4935      	ldr	r1, [pc, #212]	; (8005080 <HAL_GPIO_Init+0x310>)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	3302      	adds	r3, #2
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fda:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fe0:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_GPIO_Init+0x334>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005058:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_GPIO_Init+0x334>)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3301      	adds	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	f67f ae90 	bls.w	8004d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	40013800 	.word	0x40013800
 8005084:	40020000 	.word	0x40020000
 8005088:	40020400 	.word	0x40020400
 800508c:	40020800 	.word	0x40020800
 8005090:	40020c00 	.word	0x40020c00
 8005094:	40021000 	.word	0x40021000
 8005098:	40021400 	.word	0x40021400
 800509c:	40021800 	.word	0x40021800
 80050a0:	40021c00 	.word	0x40021c00
 80050a4:	40013c00 	.word	0x40013c00

080050a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e267      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d075      	beq.n	80051b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050c6:	4b88      	ldr	r3, [pc, #544]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d00c      	beq.n	80050ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d2:	4b85      	ldr	r3, [pc, #532]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d112      	bne.n	8005104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050de:	4b82      	ldr	r3, [pc, #520]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ea:	d10b      	bne.n	8005104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ec:	4b7e      	ldr	r3, [pc, #504]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d05b      	beq.n	80051b0 <HAL_RCC_OscConfig+0x108>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d157      	bne.n	80051b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e242      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d106      	bne.n	800511c <HAL_RCC_OscConfig+0x74>
 800510e:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a75      	ldr	r2, [pc, #468]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e01d      	b.n	8005158 <HAL_RCC_OscConfig+0xb0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0x98>
 8005126:	4b70      	ldr	r3, [pc, #448]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6f      	ldr	r2, [pc, #444]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 800512c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	4b6d      	ldr	r3, [pc, #436]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6c      	ldr	r2, [pc, #432]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0xb0>
 8005140:	4b69      	ldr	r3, [pc, #420]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a68      	ldr	r2, [pc, #416]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	4b66      	ldr	r3, [pc, #408]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a65      	ldr	r2, [pc, #404]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7ff f8c2 	bl	80042e8 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005168:	f7ff f8be 	bl	80042e8 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e207      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0xc0>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7ff f8ae 	bl	80042e8 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005190:	f7ff f8aa 	bl	80042e8 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	; 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e1f3      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a2:	4b51      	ldr	r3, [pc, #324]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0xe8>
 80051ae:	e000      	b.n	80051b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d063      	beq.n	8005286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051be:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d11c      	bne.n	8005210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d6:	4b44      	ldr	r3, [pc, #272]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d116      	bne.n	8005210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e2:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_RCC_OscConfig+0x152>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e1c7      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4937      	ldr	r1, [pc, #220]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520e:	e03a      	b.n	8005286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d020      	beq.n	800525a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005218:	4b34      	ldr	r3, [pc, #208]	; (80052ec <HAL_RCC_OscConfig+0x244>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521e:	f7ff f863 	bl	80042e8 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005226:	f7ff f85f 	bl	80042e8 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e1a8      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005244:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4925      	ldr	r1, [pc, #148]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]
 8005258:	e015      	b.n	8005286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_RCC_OscConfig+0x244>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7ff f842 	bl	80042e8 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005268:	f7ff f83e 	bl	80042e8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e187      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_RCC_OscConfig+0x248>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a0:	f7ff f822 	bl	80042e8 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a8:	f7ff f81e 	bl	80042e8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e167      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_OscConfig+0x240>)
 80052bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x200>
 80052c6:	e01b      	b.n	8005300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_OscConfig+0x248>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ce:	f7ff f80b 	bl	80042e8 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d4:	e00e      	b.n	80052f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d6:	f7ff f807 	bl	80042e8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d907      	bls.n	80052f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e150      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
 80052e8:	40023800 	.word	0x40023800
 80052ec:	42470000 	.word	0x42470000
 80052f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	4b88      	ldr	r3, [pc, #544]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80052f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ea      	bne.n	80052d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8097 	beq.w	800543c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b81      	ldr	r3, [pc, #516]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10f      	bne.n	800533e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	4b7d      	ldr	r3, [pc, #500]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b7a      	ldr	r3, [pc, #488]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533e:	4b77      	ldr	r3, [pc, #476]	; (800551c <HAL_RCC_OscConfig+0x474>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d118      	bne.n	800537c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534a:	4b74      	ldr	r3, [pc, #464]	; (800551c <HAL_RCC_OscConfig+0x474>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a73      	ldr	r2, [pc, #460]	; (800551c <HAL_RCC_OscConfig+0x474>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005356:	f7fe ffc7 	bl	80042e8 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535e:	f7fe ffc3 	bl	80042e8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e10c      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005370:	4b6a      	ldr	r3, [pc, #424]	; (800551c <HAL_RCC_OscConfig+0x474>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d106      	bne.n	8005392 <HAL_RCC_OscConfig+0x2ea>
 8005384:	4b64      	ldr	r3, [pc, #400]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a63      	ldr	r2, [pc, #396]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	e01c      	b.n	80053cc <HAL_RCC_OscConfig+0x324>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b05      	cmp	r3, #5
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x30c>
 800539a:	4b5f      	ldr	r3, [pc, #380]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	4a5e      	ldr	r2, [pc, #376]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053a0:	f043 0304 	orr.w	r3, r3, #4
 80053a4:	6713      	str	r3, [r2, #112]	; 0x70
 80053a6:	4b5c      	ldr	r3, [pc, #368]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a5b      	ldr	r2, [pc, #364]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0x324>
 80053b4:	4b58      	ldr	r3, [pc, #352]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	4a57      	ldr	r2, [pc, #348]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	6713      	str	r3, [r2, #112]	; 0x70
 80053c0:	4b55      	ldr	r3, [pc, #340]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4a54      	ldr	r2, [pc, #336]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f023 0304 	bic.w	r3, r3, #4
 80053ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fe ff88 	bl	80042e8 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053dc:	f7fe ff84 	bl	80042e8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e0cb      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f2:	4b49      	ldr	r3, [pc, #292]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ee      	beq.n	80053dc <HAL_RCC_OscConfig+0x334>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005400:	f7fe ff72 	bl	80042e8 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005406:	e00a      	b.n	800541e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fe ff6e 	bl	80042e8 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0b5      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800541e:	4b3e      	ldr	r3, [pc, #248]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ee      	bne.n	8005408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d105      	bne.n	800543c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005430:	4b39      	ldr	r3, [pc, #228]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	4a38      	ldr	r2, [pc, #224]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80a1 	beq.w	8005588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005446:	4b34      	ldr	r3, [pc, #208]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b08      	cmp	r3, #8
 8005450:	d05c      	beq.n	800550c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d141      	bne.n	80054de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <HAL_RCC_OscConfig+0x478>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe ff42 	bl	80042e8 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005468:	f7fe ff3e 	bl	80042e8 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e087      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	019b      	lsls	r3, r3, #6
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	3b01      	subs	r3, #1
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	061b      	lsls	r3, r3, #24
 80054aa:	491b      	ldr	r1, [pc, #108]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b0:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <HAL_RCC_OscConfig+0x478>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7fe ff17 	bl	80042e8 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054be:	f7fe ff13 	bl	80042e8 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e05c      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x416>
 80054dc:	e054      	b.n	8005588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x478>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fe ff00 	bl	80042e8 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fe fefc 	bl	80042e8 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e045      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_RCC_OscConfig+0x470>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x444>
 800550a:	e03d      	b.n	8005588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e038      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
 8005518:	40023800 	.word	0x40023800
 800551c:	40007000 	.word	0x40007000
 8005520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x4ec>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d028      	beq.n	8005584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d121      	bne.n	8005584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d11a      	bne.n	8005584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800555a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800555c:	4293      	cmp	r3, r2
 800555e:	d111      	bne.n	8005584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	3b01      	subs	r3, #1
 800556e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d107      	bne.n	8005584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d001      	beq.n	8005588 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800

08005598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0cc      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055ac:	4b68      	ldr	r3, [pc, #416]	; (8005750 <HAL_RCC_ClockConfig+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d90c      	bls.n	80055d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ba:	4b65      	ldr	r3, [pc, #404]	; (8005750 <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b63      	ldr	r3, [pc, #396]	; (8005750 <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0b8      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d020      	beq.n	8005622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ec:	4b59      	ldr	r3, [pc, #356]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	4a58      	ldr	r2, [pc, #352]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005604:	4b53      	ldr	r3, [pc, #332]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4a52      	ldr	r2, [pc, #328]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800560e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005610:	4b50      	ldr	r3, [pc, #320]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	494d      	ldr	r1, [pc, #308]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d044      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d107      	bne.n	8005646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d119      	bne.n	8005676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e07f      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d003      	beq.n	8005656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005652:	2b03      	cmp	r3, #3
 8005654:	d107      	bne.n	8005666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005656:	4b3f      	ldr	r3, [pc, #252]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e06f      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e067      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005676:	4b37      	ldr	r3, [pc, #220]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 0203 	bic.w	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4934      	ldr	r1, [pc, #208]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005688:	f7fe fe2e 	bl	80042e8 <HAL_GetTick>
 800568c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005690:	f7fe fe2a 	bl	80042e8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	; 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e04f      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a6:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 020c 	and.w	r2, r3, #12
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d1eb      	bne.n	8005690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <HAL_RCC_ClockConfig+0x1b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d20c      	bcs.n	80056e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b22      	ldr	r3, [pc, #136]	; (8005750 <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e032      	b.n	8005746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ec:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4916      	ldr	r1, [pc, #88]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	490e      	ldr	r1, [pc, #56]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800571e:	f000 f821 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005722:	4602      	mov	r2, r0
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	490a      	ldr	r1, [pc, #40]	; (8005758 <HAL_RCC_ClockConfig+0x1c0>)
 8005730:	5ccb      	ldrb	r3, [r1, r3]
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	4a09      	ldr	r2, [pc, #36]	; (800575c <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <HAL_RCC_ClockConfig+0x1c8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fd8e 	bl	8004260 <HAL_InitTick>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40023c00 	.word	0x40023c00
 8005754:	40023800 	.word	0x40023800
 8005758:	0800c7d4 	.word	0x0800c7d4
 800575c:	20000000 	.word	0x20000000
 8005760:	20000004 	.word	0x20000004

08005764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005768:	b094      	sub	sp, #80	; 0x50
 800576a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	647b      	str	r3, [r7, #68]	; 0x44
 8005770:	2300      	movs	r3, #0
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	2300      	movs	r3, #0
 8005776:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800577c:	4b79      	ldr	r3, [pc, #484]	; (8005964 <HAL_RCC_GetSysClockFreq+0x200>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b08      	cmp	r3, #8
 8005786:	d00d      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005788:	2b08      	cmp	r3, #8
 800578a:	f200 80e1 	bhi.w	8005950 <HAL_RCC_GetSysClockFreq+0x1ec>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_RCC_GetSysClockFreq+0x34>
 8005792:	2b04      	cmp	r3, #4
 8005794:	d003      	beq.n	800579e <HAL_RCC_GetSysClockFreq+0x3a>
 8005796:	e0db      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005798:	4b73      	ldr	r3, [pc, #460]	; (8005968 <HAL_RCC_GetSysClockFreq+0x204>)
 800579a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800579c:	e0db      	b.n	8005956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800579e:	4b73      	ldr	r3, [pc, #460]	; (800596c <HAL_RCC_GetSysClockFreq+0x208>)
 80057a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057a2:	e0d8      	b.n	8005956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057a4:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ae:	4b6d      	ldr	r3, [pc, #436]	; (8005964 <HAL_RCC_GetSysClockFreq+0x200>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d063      	beq.n	8005882 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ba:	4b6a      	ldr	r3, [pc, #424]	; (8005964 <HAL_RCC_GetSysClockFreq+0x200>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	2200      	movs	r2, #0
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	2300      	movs	r3, #0
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
 80057d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	f04f 0000 	mov.w	r0, #0
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	0159      	lsls	r1, r3, #5
 80057e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e8:	0150      	lsls	r0, r2, #5
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4621      	mov	r1, r4
 80057f0:	1a51      	subs	r1, r2, r1
 80057f2:	6139      	str	r1, [r7, #16]
 80057f4:	4629      	mov	r1, r5
 80057f6:	eb63 0301 	sbc.w	r3, r3, r1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005808:	4659      	mov	r1, fp
 800580a:	018b      	lsls	r3, r1, #6
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005812:	4651      	mov	r1, sl
 8005814:	018a      	lsls	r2, r1, #6
 8005816:	4651      	mov	r1, sl
 8005818:	ebb2 0801 	subs.w	r8, r2, r1
 800581c:	4659      	mov	r1, fp
 800581e:	eb63 0901 	sbc.w	r9, r3, r1
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800582e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005836:	4690      	mov	r8, r2
 8005838:	4699      	mov	r9, r3
 800583a:	4623      	mov	r3, r4
 800583c:	eb18 0303 	adds.w	r3, r8, r3
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	462b      	mov	r3, r5
 8005844:	eb49 0303 	adc.w	r3, r9, r3
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005856:	4629      	mov	r1, r5
 8005858:	024b      	lsls	r3, r1, #9
 800585a:	4621      	mov	r1, r4
 800585c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005860:	4621      	mov	r1, r4
 8005862:	024a      	lsls	r2, r1, #9
 8005864:	4610      	mov	r0, r2
 8005866:	4619      	mov	r1, r3
 8005868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586a:	2200      	movs	r2, #0
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
 800586e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005870:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005874:	f7fb fa08 	bl	8000c88 <__aeabi_uldivmod>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4613      	mov	r3, r2
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005880:	e058      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005882:	4b38      	ldr	r3, [pc, #224]	; (8005964 <HAL_RCC_GetSysClockFreq+0x200>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	2200      	movs	r2, #0
 800588a:	4618      	mov	r0, r3
 800588c:	4611      	mov	r1, r2
 800588e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	2300      	movs	r3, #0
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	f04f 0000 	mov.w	r0, #0
 80058a4:	f04f 0100 	mov.w	r1, #0
 80058a8:	0159      	lsls	r1, r3, #5
 80058aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ae:	0150      	lsls	r0, r2, #5
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4641      	mov	r1, r8
 80058b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80058ba:	4649      	mov	r1, r9
 80058bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058d4:	ebb2 040a 	subs.w	r4, r2, sl
 80058d8:	eb63 050b 	sbc.w	r5, r3, fp
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	00eb      	lsls	r3, r5, #3
 80058e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ea:	00e2      	lsls	r2, r4, #3
 80058ec:	4614      	mov	r4, r2
 80058ee:	461d      	mov	r5, r3
 80058f0:	4643      	mov	r3, r8
 80058f2:	18e3      	adds	r3, r4, r3
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	464b      	mov	r3, r9
 80058f8:	eb45 0303 	adc.w	r3, r5, r3
 80058fc:	607b      	str	r3, [r7, #4]
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800590a:	4629      	mov	r1, r5
 800590c:	028b      	lsls	r3, r1, #10
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005914:	4621      	mov	r1, r4
 8005916:	028a      	lsls	r2, r1, #10
 8005918:	4610      	mov	r0, r2
 800591a:	4619      	mov	r1, r3
 800591c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591e:	2200      	movs	r2, #0
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	61fa      	str	r2, [r7, #28]
 8005924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005928:	f7fb f9ae 	bl	8000c88 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4613      	mov	r3, r2
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_RCC_GetSysClockFreq+0x200>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	3301      	adds	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800594e:	e002      	b.n	8005956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCC_GetSysClockFreq+0x204>)
 8005952:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005958:	4618      	mov	r0, r3
 800595a:	3750      	adds	r7, #80	; 0x50
 800595c:	46bd      	mov	sp, r7
 800595e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
 8005968:	00f42400 	.word	0x00f42400
 800596c:	007a1200 	.word	0x007a1200

08005970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <HAL_RCC_GetHCLKFreq+0x14>)
 8005976:	681b      	ldr	r3, [r3, #0]
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000000 	.word	0x20000000

08005988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800598c:	f7ff fff0 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 8005990:	4602      	mov	r2, r0
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	0a9b      	lsrs	r3, r3, #10
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	4903      	ldr	r1, [pc, #12]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40023800 	.word	0x40023800
 80059ac:	0800c7e4 	.word	0x0800c7e4

080059b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059b4:	f7ff ffdc 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0b5b      	lsrs	r3, r3, #13
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4903      	ldr	r1, [pc, #12]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40023800 	.word	0x40023800
 80059d4:	0800c7e4 	.word	0x0800c7e4

080059d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e041      	b.n	8005a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fe f99c 	bl	8003d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fb42 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e046      	b.n	8005b1e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <HAL_TIM_Base_Start+0xb4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <HAL_TIM_Base_Start+0xb8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <HAL_TIM_Base_Start+0xbc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <HAL_TIM_Base_Start+0xc0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <HAL_TIM_Base_Start+0xc4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <HAL_TIM_Base_Start+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIM_Base_Start+0x70>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_TIM_Base_Start+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d111      	bne.n	8005b0c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b06      	cmp	r3, #6
 8005af8:	d010      	beq.n	8005b1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	e007      	b.n	8005b1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40010400 	.word	0x40010400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40001800 	.word	0x40001800

08005b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e041      	b.n	8005bde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f839 	bl	8005be6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f000 fa8a 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e022      	b.n	8005c66 <HAL_TIM_PWM_Start+0x6a>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d109      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x3e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e015      	b.n	8005c66 <HAL_TIM_PWM_Start+0x6a>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d109      	bne.n	8005c54 <HAL_TIM_PWM_Start+0x58>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e008      	b.n	8005c66 <HAL_TIM_PWM_Start+0x6a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07c      	b.n	8005d68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0x82>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c7c:	e013      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0x92>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c9c:	e003      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2201      	movs	r2, #1
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fce0 	bl	8006674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <HAL_TIM_PWM_Start+0x174>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_PWM_Start+0xcc>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <HAL_TIM_PWM_Start+0x178>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIM_PWM_Start+0xd0>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_TIM_PWM_Start+0xd2>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <HAL_TIM_PWM_Start+0x174>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1f      	ldr	r2, [pc, #124]	; (8005d78 <HAL_TIM_PWM_Start+0x17c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_TIM_PWM_Start+0x180>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <HAL_TIM_PWM_Start+0x184>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <HAL_TIM_PWM_Start+0x178>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <HAL_TIM_PWM_Start+0x188>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <HAL_TIM_PWM_Start+0x18c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d111      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d010      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	e007      	b.n	8005d66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40001800 	.word	0x40001800

08005d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0ae      	b.n	8005f08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	f200 809f 	bhi.w	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005df5 	.word	0x08005df5
 8005dc4:	08005ef9 	.word	0x08005ef9
 8005dc8:	08005ef9 	.word	0x08005ef9
 8005dcc:	08005ef9 	.word	0x08005ef9
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005ef9 	.word	0x08005ef9
 8005dd8:	08005ef9 	.word	0x08005ef9
 8005ddc:	08005ef9 	.word	0x08005ef9
 8005de0:	08005e77 	.word	0x08005e77
 8005de4:	08005ef9 	.word	0x08005ef9
 8005de8:	08005ef9 	.word	0x08005ef9
 8005dec:	08005ef9 	.word	0x08005ef9
 8005df0:	08005eb7 	.word	0x08005eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f9f0 	bl	80061e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	619a      	str	r2, [r3, #24]
      break;
 8005e32:	e064      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fa40 	bl	80062c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6999      	ldr	r1, [r3, #24]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
      break;
 8005e74:	e043      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fa95 	bl	80063ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0208 	orr.w	r2, r2, #8
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0204 	bic.w	r2, r2, #4
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
      break;
 8005eb4:	e023      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fae9 	bl	8006494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69d9      	ldr	r1, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	021a      	lsls	r2, r3, #8
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	61da      	str	r2, [r3, #28]
      break;
 8005ef6:	e002      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
      break;
 8005efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIM_ConfigClockSource+0x1c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0b4      	b.n	8006096 <HAL_TIM_ConfigClockSource+0x186>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f64:	d03e      	beq.n	8005fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6a:	f200 8087 	bhi.w	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	f000 8086 	beq.w	8006082 <HAL_TIM_ConfigClockSource+0x172>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d87f      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d01a      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f80:	2b70      	cmp	r3, #112	; 0x70
 8005f82:	d87b      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d050      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x11a>
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d877      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d03c      	beq.n	800600a <HAL_TIM_ConfigClockSource+0xfa>
 8005f90:	2b50      	cmp	r3, #80	; 0x50
 8005f92:	d873      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d058      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x13a>
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d86f      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d064      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b30      	cmp	r3, #48	; 0x30
 8005fa2:	d86b      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d060      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d867      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d05c      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d05a      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	e062      	b.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f000 fb35 	bl	8006634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	609a      	str	r2, [r3, #8]
      break;
 8005fe2:	e04f      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6899      	ldr	r1, [r3, #8]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f000 fb1e 	bl	8006634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006006:	609a      	str	r2, [r3, #8]
      break;
 8006008:	e03c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	461a      	mov	r2, r3
 8006018:	f000 fa92 	bl	8006540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2150      	movs	r1, #80	; 0x50
 8006022:	4618      	mov	r0, r3
 8006024:	f000 faeb 	bl	80065fe <TIM_ITRx_SetConfig>
      break;
 8006028:	e02c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	f000 fab1 	bl	800659e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2160      	movs	r1, #96	; 0x60
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fadb 	bl	80065fe <TIM_ITRx_SetConfig>
      break;
 8006048:	e01c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	f000 fa72 	bl	8006540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2140      	movs	r1, #64	; 0x40
 8006062:	4618      	mov	r0, r3
 8006064:	f000 facb 	bl	80065fe <TIM_ITRx_SetConfig>
      break;
 8006068:	e00c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f000 fac2 	bl	80065fe <TIM_ITRx_SetConfig>
      break;
 800607a:	e003      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	e000      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a40      	ldr	r2, [pc, #256]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d013      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060be:	d00f      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <TIM_Base_SetConfig+0x118>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a3c      	ldr	r2, [pc, #240]	; (80061bc <TIM_Base_SetConfig+0x11c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <TIM_Base_SetConfig+0x120>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3a      	ldr	r2, [pc, #232]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2f      	ldr	r2, [pc, #188]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d02b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d027      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <TIM_Base_SetConfig+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d023      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a2b      	ldr	r2, [pc, #172]	; (80061bc <TIM_Base_SetConfig+0x11c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <TIM_Base_SetConfig+0x120>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a29      	ldr	r2, [pc, #164]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d017      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a28      	ldr	r2, [pc, #160]	; (80061c8 <TIM_Base_SetConfig+0x128>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <TIM_Base_SetConfig+0x12c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <TIM_Base_SetConfig+0x130>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <TIM_Base_SetConfig+0x134>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <TIM_Base_SetConfig+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a23      	ldr	r2, [pc, #140]	; (80061dc <TIM_Base_SetConfig+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40010400 	.word	0x40010400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	40001800 	.word	0x40001800
 80061d8:	40001c00 	.word	0x40001c00
 80061dc:	40002000 	.word	0x40002000

080061e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 0302 	bic.w	r3, r3, #2
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <TIM_OC1_SetConfig+0xd8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC1_SetConfig+0x64>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <TIM_OC1_SetConfig+0xdc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0308 	bic.w	r3, r3, #8
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <TIM_OC1_SetConfig+0xd8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_OC1_SetConfig+0x8e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a14      	ldr	r2, [pc, #80]	; (80062bc <TIM_OC1_SetConfig+0xdc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d111      	bne.n	8006292 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40010400 	.word	0x40010400

080062c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0210 	bic.w	r2, r3, #16
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0320 	bic.w	r3, r3, #32
 800630a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a22      	ldr	r2, [pc, #136]	; (80063a4 <TIM_OC2_SetConfig+0xe4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC2_SetConfig+0x68>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <TIM_OC2_SetConfig+0xe8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d10d      	bne.n	8006344 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a17      	ldr	r2, [pc, #92]	; (80063a4 <TIM_OC2_SetConfig+0xe4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC2_SetConfig+0x94>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <TIM_OC2_SetConfig+0xe8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d113      	bne.n	800637c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800635a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400

080063ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a21      	ldr	r2, [pc, #132]	; (800648c <TIM_OC3_SetConfig+0xe0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC3_SetConfig+0x66>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a20      	ldr	r2, [pc, #128]	; (8006490 <TIM_OC3_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10d      	bne.n	800642e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800642c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a16      	ldr	r2, [pc, #88]	; (800648c <TIM_OC3_SetConfig+0xe0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d003      	beq.n	800643e <TIM_OC3_SetConfig+0x92>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a15      	ldr	r2, [pc, #84]	; (8006490 <TIM_OC3_SetConfig+0xe4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d113      	bne.n	8006466 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800644c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	031b      	lsls	r3, r3, #12
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a12      	ldr	r2, [pc, #72]	; (8006538 <TIM_OC4_SetConfig+0xa4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_OC4_SetConfig+0x68>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a11      	ldr	r2, [pc, #68]	; (800653c <TIM_OC4_SetConfig+0xa8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d109      	bne.n	8006510 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	019b      	lsls	r3, r3, #6
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400

08006540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800656a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 030a 	bic.w	r3, r3, #10
 800657c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659e:	b480      	push	{r7}
 80065a0:	b087      	sub	sp, #28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0210 	bic.w	r2, r3, #16
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	031b      	lsls	r3, r3, #12
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	f043 0307 	orr.w	r3, r3, #7
 8006620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800664e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	021a      	lsls	r2, r3, #8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	431a      	orrs	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4313      	orrs	r3, r2
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	609a      	str	r2, [r3, #8]
}
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2201      	movs	r2, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	43db      	mvns	r3, r3
 8006696:	401a      	ands	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a1a      	ldr	r2, [r3, #32]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e05a      	b.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d022      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006724:	d01d      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1d      	ldr	r2, [pc, #116]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d018      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1a      	ldr	r2, [pc, #104]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00e      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d009      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d004      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d10c      	bne.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4313      	orrs	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	40000c00 	.word	0x40000c00
 80067ac:	40010400 	.word	0x40010400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40001800 	.word	0x40001800

080067b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e03d      	b.n	8006850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e03f      	b.n	80068ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fd fbe8 	bl	8004058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2224      	movs	r2, #36	; 0x24
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800689e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 ff43 	bl	800772c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695a      	ldr	r2, [r3, #20]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08c      	sub	sp, #48	; 0x30
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b20      	cmp	r3, #32
 8006910:	d165      	bne.n	80069de <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_UART_Transmit_DMA+0x26>
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e05e      	b.n	80069e0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_UART_Transmit_DMA+0x38>
 800692c:	2302      	movs	r3, #2
 800692e:	e057      	b.n	80069e0 <HAL_UART_Transmit_DMA+0xe8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	4a22      	ldr	r2, [pc, #136]	; (80069e8 <HAL_UART_Transmit_DMA+0xf0>)
 800695e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	4a21      	ldr	r2, [pc, #132]	; (80069ec <HAL_UART_Transmit_DMA+0xf4>)
 8006966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	4a20      	ldr	r2, [pc, #128]	; (80069f0 <HAL_UART_Transmit_DMA+0xf8>)
 800696e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	2200      	movs	r2, #0
 8006976:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006978:	f107 0308 	add.w	r3, r7, #8
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3304      	adds	r3, #4
 800698c:	461a      	mov	r2, r3
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	f7fd fe9a 	bl	80046c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800699c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3314      	adds	r3, #20
 80069ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	617b      	str	r3, [r7, #20]
   return(result);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c6:	627a      	str	r2, [r7, #36]	; 0x24
 80069c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6a39      	ldr	r1, [r7, #32]
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3730      	adds	r7, #48	; 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	08006fc5 	.word	0x08006fc5
 80069ec:	0800705f 	.word	0x0800705f
 80069f0:	080071d7 	.word	0x080071d7

080069f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d11d      	bne.n	8006a4a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_UART_Receive_DMA+0x26>
 8006a14:	88fb      	ldrh	r3, [r7, #6]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e016      	b.n	8006a4c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_UART_Receive_DMA+0x38>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e00f      	b.n	8006a4c <HAL_UART_Receive_DMA+0x58>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fc13 	bl	800726c <UART_Start_Receive_DMA>
 8006a46:	4603      	mov	r3, r0
 8006a48:	e000      	b.n	8006a4c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
  }
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0ba      	sub	sp, #232	; 0xe8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10f      	bne.n	8006aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_UART_IRQHandler+0x66>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fd7f 	bl	80075b6 <UART_Receive_IT>
      return;
 8006ab8:	e256      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80de 	beq.w	8006c80 <HAL_UART_IRQHandler+0x22c>
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80d1 	beq.w	8006c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <HAL_UART_IRQHandler+0xae>
 8006aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_UART_IRQHandler+0xd2>
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f043 0202 	orr.w	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_UART_IRQHandler+0xf6>
 8006b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <HAL_UART_IRQHandler+0x126>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f043 0208 	orr.w	r2, r3, #8
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 81ed 	beq.w	8006f5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x14e>
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fd0a 	bl	80075b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <HAL_UART_IRQHandler+0x17a>
 8006bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04f      	beq.n	8006c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fc12 	bl	80073f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d141      	bne.n	8006c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3314      	adds	r3, #20
 8006c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d9      	bne.n	8006be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d013      	beq.n	8006c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	4a7d      	ldr	r2, [pc, #500]	; (8006e30 <HAL_UART_IRQHandler+0x3dc>)
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fd fe08 	bl	8004858 <HAL_DMA_Abort_IT>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5c:	e00e      	b.n	8006c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f99a 	bl	8006f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	e00a      	b.n	8006c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f996 	bl	8006f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e006      	b.n	8006c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f992 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c7a:	e170      	b.n	8006f5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	bf00      	nop
    return;
 8006c7e:	e16e      	b.n	8006f5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	f040 814a 	bne.w	8006f1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 8143 	beq.w	8006f1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 813c 	beq.w	8006f1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	f040 80b4 	bne.w	8006e34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8140 	beq.w	8006f62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f080 8139 	bcs.w	8006f62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d02:	f000 8088 	beq.w	8006e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1d9      	bne.n	8006d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3314      	adds	r3, #20
 8006d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e1      	bne.n	8006d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3314      	adds	r3, #20
 8006dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006df8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e3      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fd fcb1 	bl	8004778 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8c0 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e2c:	e099      	b.n	8006f62 <HAL_UART_IRQHandler+0x50e>
 8006e2e:	bf00      	nop
 8006e30:	080074bf 	.word	0x080074bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 808b 	beq.w	8006f66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8086 	beq.w	8006f66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e3      	bne.n	8006e5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e3      	bne.n	8006e92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006efc:	61fa      	str	r2, [r7, #28]
 8006efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e3      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f848 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f1c:	e023      	b.n	8006f66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <HAL_UART_IRQHandler+0x4ea>
 8006f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fad5 	bl	80074e6 <UART_Transmit_IT>
    return;
 8006f3c:	e014      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00e      	beq.n	8006f68 <HAL_UART_IRQHandler+0x514>
 8006f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fb15 	bl	8007586 <UART_EndTransmit_IT>
    return;
 8006f5c:	e004      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
    return;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
      return;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_UART_IRQHandler+0x514>
      return;
 8006f66:	bf00      	nop
  }
}
 8006f68:	37e8      	adds	r7, #232	; 0xe8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b090      	sub	sp, #64	; 0x40
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d137      	bne.n	8007050 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3314      	adds	r3, #20
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007006:	633a      	str	r2, [r7, #48]	; 0x30
 8007008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800701a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	330c      	adds	r3, #12
 8007020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	60fb      	str	r3, [r7, #12]
   return(result);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703a:	61fa      	str	r2, [r7, #28]
 800703c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	617b      	str	r3, [r7, #20]
   return(result);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e5      	bne.n	800701a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800704e:	e002      	b.n	8007056 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007052:	f7fa f931 	bl	80012b8 <HAL_UART_TxCpltCallback>
}
 8007056:	bf00      	nop
 8007058:	3740      	adds	r7, #64	; 0x40
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff7f 	bl	8006f70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b09c      	sub	sp, #112	; 0x70
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d172      	bne.n	800717c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007098:	2200      	movs	r2, #0
 800709a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80070be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e5      	bne.n	800709c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3314      	adds	r3, #20
 80070d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	667b      	str	r3, [r7, #100]	; 0x64
 80070e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3314      	adds	r3, #20
 80070ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070f0:	647a      	str	r2, [r7, #68]	; 0x44
 80070f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	623b      	str	r3, [r7, #32]
   return(result);
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711a:	663b      	str	r3, [r7, #96]	; 0x60
 800711c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3314      	adds	r3, #20
 8007122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007124:	633a      	str	r2, [r7, #48]	; 0x30
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800712a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e5      	bne.n	8007104 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d119      	bne.n	800717c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60fb      	str	r3, [r7, #12]
   return(result);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007168:	61fa      	str	r2, [r7, #28]
 800716a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	69b9      	ldr	r1, [r7, #24]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	617b      	str	r3, [r7, #20]
   return(result);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800717c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007186:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007188:	4619      	mov	r1, r3
 800718a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800718c:	f7ff ff0e 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007190:	e002      	b.n	8007198 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007192:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007194:	f7fa f8ac 	bl	80012f0 <HAL_UART_RxCpltCallback>
}
 8007198:	bf00      	nop
 800719a:	3770      	adds	r7, #112	; 0x70
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d108      	bne.n	80071c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	b29b      	uxth	r3, r3
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff fef3 	bl	8006fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071c6:	e002      	b.n	80071ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fedb 	bl	8006f84 <HAL_UART_RxHalfCpltCallback>
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f2:	2b80      	cmp	r3, #128	; 0x80
 80071f4:	bf0c      	ite	eq
 80071f6:	2301      	moveq	r3, #1
 80071f8:	2300      	movne	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b21      	cmp	r3, #33	; 0x21
 8007208:	d108      	bne.n	800721c <UART_DMAError+0x46>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007216:	68b8      	ldr	r0, [r7, #8]
 8007218:	f000 f8c6 	bl	80073a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	bf0c      	ite	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	2300      	movne	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b22      	cmp	r3, #34	; 0x22
 800723c:	d108      	bne.n	8007250 <UART_DMAError+0x7a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800724a:	68b8      	ldr	r0, [r7, #8]
 800724c:	f000 f8d4 	bl	80073f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	f043 0210 	orr.w	r2, r3, #16
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800725c:	68b8      	ldr	r0, [r7, #8]
 800725e:	f7ff fe9b 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b098      	sub	sp, #96	; 0x60
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	4613      	mov	r3, r2
 8007278:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2222      	movs	r2, #34	; 0x22
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	4a40      	ldr	r2, [pc, #256]	; (800739c <UART_Start_Receive_DMA+0x130>)
 800729a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	4a3f      	ldr	r2, [pc, #252]	; (80073a0 <UART_Start_Receive_DMA+0x134>)
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	4a3e      	ldr	r2, [pc, #248]	; (80073a4 <UART_Start_Receive_DMA+0x138>)
 80072aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	2200      	movs	r2, #0
 80072b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	f7fd f9fc 	bl	80046c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d019      	beq.n	800732a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730c:	65bb      	str	r3, [r7, #88]	; 0x58
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007316:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007318:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800731c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3314      	adds	r3, #20
 8007330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	657b      	str	r3, [r7, #84]	; 0x54
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800734a:	63ba      	str	r2, [r7, #56]	; 0x38
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e5      	bne.n	800732a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3314      	adds	r3, #20
 8007364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	617b      	str	r3, [r7, #20]
   return(result);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007374:	653b      	str	r3, [r7, #80]	; 0x50
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3314      	adds	r3, #20
 800737c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800737e:	627a      	str	r2, [r7, #36]	; 0x24
 8007380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6a39      	ldr	r1, [r7, #32]
 8007384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	61fb      	str	r3, [r7, #28]
   return(result);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3760      	adds	r7, #96	; 0x60
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	0800707b 	.word	0x0800707b
 80073a0:	080071a1 	.word	0x080071a1
 80073a4:	080071d7 	.word	0x080071d7

080073a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	61ba      	str	r2, [r7, #24]
 80073d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	613b      	str	r3, [r7, #16]
   return(result);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80073ec:	bf00      	nop
 80073ee:	3724      	adds	r7, #36	; 0x24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b095      	sub	sp, #84	; 0x54
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007420:	643a      	str	r2, [r7, #64]	; 0x40
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e5      	bne.n	8007400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3314      	adds	r3, #20
 800743a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	61fb      	str	r3, [r7, #28]
   return(result);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f023 0301 	bic.w	r3, r3, #1
 800744a:	64bb      	str	r3, [r7, #72]	; 0x48
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800745a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	2b01      	cmp	r3, #1
 800746e:	d119      	bne.n	80074a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f023 0310 	bic.w	r3, r3, #16
 8007486:	647b      	str	r3, [r7, #68]	; 0x44
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	330c      	adds	r3, #12
 800748e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007490:	61ba      	str	r2, [r7, #24]
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6979      	ldr	r1, [r7, #20]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	613b      	str	r3, [r7, #16]
   return(result);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e5      	bne.n	8007470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074b2:	bf00      	nop
 80074b4:	3754      	adds	r7, #84	; 0x54
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff fd5d 	bl	8006f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b21      	cmp	r3, #33	; 0x21
 80074f8:	d13e      	bne.n	8007578 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007502:	d114      	bne.n	800752e <UART_Transmit_IT+0x48>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007520:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	1c9a      	adds	r2, r3, #2
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	621a      	str	r2, [r3, #32]
 800752c:	e008      	b.n	8007540 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	1c59      	adds	r1, r3, #1
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6211      	str	r1, [r2, #32]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29b      	uxth	r3, r3
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4619      	mov	r1, r3
 800754e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10f      	bne.n	8007574 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007562:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007572:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	e000      	b.n	800757a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007578:	2302      	movs	r3, #2
  }
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800759c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7f9 fe86 	bl	80012b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08c      	sub	sp, #48	; 0x30
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b22      	cmp	r3, #34	; 0x22
 80075c8:	f040 80ab 	bne.w	8007722 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d4:	d117      	bne.n	8007606 <UART_Receive_IT+0x50>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d113      	bne.n	8007606 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28
 8007604:	e026      	b.n	8007654 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800760c:	2300      	movs	r3, #0
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007618:	d007      	beq.n	800762a <UART_Receive_IT+0x74>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <UART_Receive_IT+0x82>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e008      	b.n	800764a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007644:	b2da      	uxtb	r2, r3
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29b      	uxth	r3, r3
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4619      	mov	r1, r3
 8007662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007664:	2b00      	cmp	r3, #0
 8007666:	d15a      	bne.n	800771e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0220 	bic.w	r2, r2, #32
 8007676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0201 	bic.w	r2, r2, #1
 8007696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d135      	bne.n	8007714 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	613b      	str	r3, [r7, #16]
   return(result);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f023 0310 	bic.w	r3, r3, #16
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ce:	623a      	str	r2, [r7, #32]
 80076d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	61bb      	str	r3, [r7, #24]
   return(result);
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d10a      	bne.n	8007706 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fc4d 	bl	8006fac <HAL_UARTEx_RxEventCallback>
 8007712:	e002      	b.n	800771a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7f9 fdeb 	bl	80012f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e002      	b.n	8007724 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e000      	b.n	8007724 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007722:	2302      	movs	r3, #2
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3730      	adds	r7, #48	; 0x30
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800772c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007730:	b0c0      	sub	sp, #256	; 0x100
 8007732:	af00      	add	r7, sp, #0
 8007734:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	68d9      	ldr	r1, [r3, #12]
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	ea40 0301 	orr.w	r3, r0, r1
 8007754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	431a      	orrs	r2, r3
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	431a      	orrs	r2, r3
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007784:	f021 010c 	bic.w	r1, r1, #12
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007792:	430b      	orrs	r3, r1
 8007794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a6:	6999      	ldr	r1, [r3, #24]
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	ea40 0301 	orr.w	r3, r0, r1
 80077b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b8f      	ldr	r3, [pc, #572]	; (80079f8 <UART_SetConfig+0x2cc>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	d005      	beq.n	80077cc <UART_SetConfig+0xa0>
 80077c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b8d      	ldr	r3, [pc, #564]	; (80079fc <UART_SetConfig+0x2d0>)
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d104      	bne.n	80077d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077cc:	f7fe f8f0 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 80077d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077d4:	e003      	b.n	80077de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077d6:	f7fe f8d7 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 80077da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e8:	f040 810c 	bne.w	8007a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	1891      	adds	r1, r2, r2
 8007804:	65b9      	str	r1, [r7, #88]	; 0x58
 8007806:	415b      	adcs	r3, r3
 8007808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800780e:	4621      	mov	r1, r4
 8007810:	eb12 0801 	adds.w	r8, r2, r1
 8007814:	4629      	mov	r1, r5
 8007816:	eb43 0901 	adc.w	r9, r3, r1
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800782a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800782e:	4690      	mov	r8, r2
 8007830:	4699      	mov	r9, r3
 8007832:	4623      	mov	r3, r4
 8007834:	eb18 0303 	adds.w	r3, r8, r3
 8007838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800783c:	462b      	mov	r3, r5
 800783e:	eb49 0303 	adc.w	r3, r9, r3
 8007842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007852:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800785a:	460b      	mov	r3, r1
 800785c:	18db      	adds	r3, r3, r3
 800785e:	653b      	str	r3, [r7, #80]	; 0x50
 8007860:	4613      	mov	r3, r2
 8007862:	eb42 0303 	adc.w	r3, r2, r3
 8007866:	657b      	str	r3, [r7, #84]	; 0x54
 8007868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800786c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007870:	f7f9 fa0a 	bl	8000c88 <__aeabi_uldivmod>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4b61      	ldr	r3, [pc, #388]	; (8007a00 <UART_SetConfig+0x2d4>)
 800787a:	fba3 2302 	umull	r2, r3, r3, r2
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	011c      	lsls	r4, r3, #4
 8007882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800788c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007894:	4642      	mov	r2, r8
 8007896:	464b      	mov	r3, r9
 8007898:	1891      	adds	r1, r2, r2
 800789a:	64b9      	str	r1, [r7, #72]	; 0x48
 800789c:	415b      	adcs	r3, r3
 800789e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078a4:	4641      	mov	r1, r8
 80078a6:	eb12 0a01 	adds.w	sl, r2, r1
 80078aa:	4649      	mov	r1, r9
 80078ac:	eb43 0b01 	adc.w	fp, r3, r1
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078c4:	4692      	mov	sl, r2
 80078c6:	469b      	mov	fp, r3
 80078c8:	4643      	mov	r3, r8
 80078ca:	eb1a 0303 	adds.w	r3, sl, r3
 80078ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078d2:	464b      	mov	r3, r9
 80078d4:	eb4b 0303 	adc.w	r3, fp, r3
 80078d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078f0:	460b      	mov	r3, r1
 80078f2:	18db      	adds	r3, r3, r3
 80078f4:	643b      	str	r3, [r7, #64]	; 0x40
 80078f6:	4613      	mov	r3, r2
 80078f8:	eb42 0303 	adc.w	r3, r2, r3
 80078fc:	647b      	str	r3, [r7, #68]	; 0x44
 80078fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007906:	f7f9 f9bf 	bl	8000c88 <__aeabi_uldivmod>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4611      	mov	r1, r2
 8007910:	4b3b      	ldr	r3, [pc, #236]	; (8007a00 <UART_SetConfig+0x2d4>)
 8007912:	fba3 2301 	umull	r2, r3, r3, r1
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	2264      	movs	r2, #100	; 0x64
 800791a:	fb02 f303 	mul.w	r3, r2, r3
 800791e:	1acb      	subs	r3, r1, r3
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007926:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <UART_SetConfig+0x2d4>)
 8007928:	fba3 2302 	umull	r2, r3, r3, r2
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007934:	441c      	add	r4, r3
 8007936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800793a:	2200      	movs	r2, #0
 800793c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007940:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	1891      	adds	r1, r2, r2
 800794e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007950:	415b      	adcs	r3, r3
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007958:	4641      	mov	r1, r8
 800795a:	1851      	adds	r1, r2, r1
 800795c:	6339      	str	r1, [r7, #48]	; 0x30
 800795e:	4649      	mov	r1, r9
 8007960:	414b      	adcs	r3, r1
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007970:	4659      	mov	r1, fp
 8007972:	00cb      	lsls	r3, r1, #3
 8007974:	4651      	mov	r1, sl
 8007976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800797a:	4651      	mov	r1, sl
 800797c:	00ca      	lsls	r2, r1, #3
 800797e:	4610      	mov	r0, r2
 8007980:	4619      	mov	r1, r3
 8007982:	4603      	mov	r3, r0
 8007984:	4642      	mov	r2, r8
 8007986:	189b      	adds	r3, r3, r2
 8007988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800798c:	464b      	mov	r3, r9
 800798e:	460a      	mov	r2, r1
 8007990:	eb42 0303 	adc.w	r3, r2, r3
 8007994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80079a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079ac:	460b      	mov	r3, r1
 80079ae:	18db      	adds	r3, r3, r3
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b2:	4613      	mov	r3, r2
 80079b4:	eb42 0303 	adc.w	r3, r2, r3
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079c2:	f7f9 f961 	bl	8000c88 <__aeabi_uldivmod>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <UART_SetConfig+0x2d4>)
 80079cc:	fba3 1302 	umull	r1, r3, r3, r2
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	2164      	movs	r1, #100	; 0x64
 80079d4:	fb01 f303 	mul.w	r3, r1, r3
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	3332      	adds	r3, #50	; 0x32
 80079de:	4a08      	ldr	r2, [pc, #32]	; (8007a00 <UART_SetConfig+0x2d4>)
 80079e0:	fba2 2303 	umull	r2, r3, r2, r3
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	f003 0207 	and.w	r2, r3, #7
 80079ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4422      	add	r2, r4
 80079f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079f4:	e106      	b.n	8007c04 <UART_SetConfig+0x4d8>
 80079f6:	bf00      	nop
 80079f8:	40011000 	.word	0x40011000
 80079fc:	40011400 	.word	0x40011400
 8007a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a16:	4642      	mov	r2, r8
 8007a18:	464b      	mov	r3, r9
 8007a1a:	1891      	adds	r1, r2, r2
 8007a1c:	6239      	str	r1, [r7, #32]
 8007a1e:	415b      	adcs	r3, r3
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
 8007a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a26:	4641      	mov	r1, r8
 8007a28:	1854      	adds	r4, r2, r1
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	eb43 0501 	adc.w	r5, r3, r1
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	00eb      	lsls	r3, r5, #3
 8007a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a3e:	00e2      	lsls	r2, r4, #3
 8007a40:	4614      	mov	r4, r2
 8007a42:	461d      	mov	r5, r3
 8007a44:	4643      	mov	r3, r8
 8007a46:	18e3      	adds	r3, r4, r3
 8007a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	eb45 0303 	adc.w	r3, r5, r3
 8007a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a72:	4629      	mov	r1, r5
 8007a74:	008b      	lsls	r3, r1, #2
 8007a76:	4621      	mov	r1, r4
 8007a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	008a      	lsls	r2, r1, #2
 8007a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a84:	f7f9 f900 	bl	8000c88 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4b60      	ldr	r3, [pc, #384]	; (8007c10 <UART_SetConfig+0x4e4>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	011c      	lsls	r4, r3, #4
 8007a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	1891      	adds	r1, r2, r2
 8007aae:	61b9      	str	r1, [r7, #24]
 8007ab0:	415b      	adcs	r3, r3
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ab8:	4641      	mov	r1, r8
 8007aba:	1851      	adds	r1, r2, r1
 8007abc:	6139      	str	r1, [r7, #16]
 8007abe:	4649      	mov	r1, r9
 8007ac0:	414b      	adcs	r3, r1
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	00cb      	lsls	r3, r1, #3
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ada:	4651      	mov	r1, sl
 8007adc:	00ca      	lsls	r2, r1, #3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aec:	464b      	mov	r3, r9
 8007aee:	460a      	mov	r2, r1
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b10:	4649      	mov	r1, r9
 8007b12:	008b      	lsls	r3, r1, #2
 8007b14:	4641      	mov	r1, r8
 8007b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	008a      	lsls	r2, r1, #2
 8007b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b22:	f7f9 f8b1 	bl	8000c88 <__aeabi_uldivmod>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4b38      	ldr	r3, [pc, #224]	; (8007c10 <UART_SetConfig+0x4e4>)
 8007b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	2264      	movs	r2, #100	; 0x64
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	1acb      	subs	r3, r1, r3
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	3332      	adds	r3, #50	; 0x32
 8007b40:	4a33      	ldr	r2, [pc, #204]	; (8007c10 <UART_SetConfig+0x4e4>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b4c:	441c      	add	r4, r3
 8007b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b52:	2200      	movs	r2, #0
 8007b54:	673b      	str	r3, [r7, #112]	; 0x70
 8007b56:	677a      	str	r2, [r7, #116]	; 0x74
 8007b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	415b      	adcs	r3, r3
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	1851      	adds	r1, r2, r1
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	4649      	mov	r1, r9
 8007b74:	414b      	adcs	r3, r1
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b84:	4659      	mov	r1, fp
 8007b86:	00cb      	lsls	r3, r1, #3
 8007b88:	4651      	mov	r1, sl
 8007b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b8e:	4651      	mov	r1, sl
 8007b90:	00ca      	lsls	r2, r1, #3
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	4603      	mov	r3, r0
 8007b98:	4642      	mov	r2, r8
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	460a      	mov	r2, r1
 8007ba2:	eb42 0303 	adc.w	r3, r2, r3
 8007ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb2:	667a      	str	r2, [r7, #100]	; 0x64
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	008b      	lsls	r3, r1, #2
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bca:	4641      	mov	r1, r8
 8007bcc:	008a      	lsls	r2, r1, #2
 8007bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bd2:	f7f9 f859 	bl	8000c88 <__aeabi_uldivmod>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <UART_SetConfig+0x4e4>)
 8007bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	2164      	movs	r1, #100	; 0x64
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	3332      	adds	r3, #50	; 0x32
 8007bee:	4a08      	ldr	r2, [pc, #32]	; (8007c10 <UART_SetConfig+0x4e4>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	f003 020f 	and.w	r2, r3, #15
 8007bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4422      	add	r2, r4
 8007c02:	609a      	str	r2, [r3, #8]
}
 8007c04:	bf00      	nop
 8007c06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c10:	51eb851f 	.word	0x51eb851f

08007c14 <atof>:
 8007c14:	2100      	movs	r1, #0
 8007c16:	f000 bf09 	b.w	8008a2c <strtod>
	...

08007c1c <malloc>:
 8007c1c:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <malloc+0xc>)
 8007c1e:	4601      	mov	r1, r0
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	f000 b82b 	b.w	8007c7c <_malloc_r>
 8007c26:	bf00      	nop
 8007c28:	200001d0 	.word	0x200001d0

08007c2c <free>:
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <free+0xc>)
 8007c2e:	4601      	mov	r1, r0
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	f002 be73 	b.w	800a91c <_free_r>
 8007c36:	bf00      	nop
 8007c38:	200001d0 	.word	0x200001d0

08007c3c <sbrk_aligned>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	4e0e      	ldr	r6, [pc, #56]	; (8007c78 <sbrk_aligned+0x3c>)
 8007c40:	460c      	mov	r4, r1
 8007c42:	6831      	ldr	r1, [r6, #0]
 8007c44:	4605      	mov	r5, r0
 8007c46:	b911      	cbnz	r1, 8007c4e <sbrk_aligned+0x12>
 8007c48:	f001 ff64 	bl	8009b14 <_sbrk_r>
 8007c4c:	6030      	str	r0, [r6, #0]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	f001 ff5f 	bl	8009b14 <_sbrk_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d00a      	beq.n	8007c70 <sbrk_aligned+0x34>
 8007c5a:	1cc4      	adds	r4, r0, #3
 8007c5c:	f024 0403 	bic.w	r4, r4, #3
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d007      	beq.n	8007c74 <sbrk_aligned+0x38>
 8007c64:	1a21      	subs	r1, r4, r0
 8007c66:	4628      	mov	r0, r5
 8007c68:	f001 ff54 	bl	8009b14 <_sbrk_r>
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d101      	bne.n	8007c74 <sbrk_aligned+0x38>
 8007c70:	f04f 34ff 	mov.w	r4, #4294967295
 8007c74:	4620      	mov	r0, r4
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	20000dc0 	.word	0x20000dc0

08007c7c <_malloc_r>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	1ccd      	adds	r5, r1, #3
 8007c82:	f025 0503 	bic.w	r5, r5, #3
 8007c86:	3508      	adds	r5, #8
 8007c88:	2d0c      	cmp	r5, #12
 8007c8a:	bf38      	it	cc
 8007c8c:	250c      	movcc	r5, #12
 8007c8e:	2d00      	cmp	r5, #0
 8007c90:	4607      	mov	r7, r0
 8007c92:	db01      	blt.n	8007c98 <_malloc_r+0x1c>
 8007c94:	42a9      	cmp	r1, r5
 8007c96:	d905      	bls.n	8007ca4 <_malloc_r+0x28>
 8007c98:	230c      	movs	r3, #12
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d78 <_malloc_r+0xfc>
 8007ca8:	f000 f868 	bl	8007d7c <__malloc_lock>
 8007cac:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb0:	461c      	mov	r4, r3
 8007cb2:	bb5c      	cbnz	r4, 8007d0c <_malloc_r+0x90>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f7ff ffc0 	bl	8007c3c <sbrk_aligned>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	d155      	bne.n	8007d6e <_malloc_r+0xf2>
 8007cc2:	f8d8 4000 	ldr.w	r4, [r8]
 8007cc6:	4626      	mov	r6, r4
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	d145      	bne.n	8007d58 <_malloc_r+0xdc>
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	d048      	beq.n	8007d62 <_malloc_r+0xe6>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	eb04 0903 	add.w	r9, r4, r3
 8007cda:	f001 ff1b 	bl	8009b14 <_sbrk_r>
 8007cde:	4581      	cmp	r9, r0
 8007ce0:	d13f      	bne.n	8007d62 <_malloc_r+0xe6>
 8007ce2:	6821      	ldr	r1, [r4, #0]
 8007ce4:	1a6d      	subs	r5, r5, r1
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7ff ffa7 	bl	8007c3c <sbrk_aligned>
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d037      	beq.n	8007d62 <_malloc_r+0xe6>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	442b      	add	r3, r5
 8007cf6:	6023      	str	r3, [r4, #0]
 8007cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d038      	beq.n	8007d72 <_malloc_r+0xf6>
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	42a2      	cmp	r2, r4
 8007d04:	d12b      	bne.n	8007d5e <_malloc_r+0xe2>
 8007d06:	2200      	movs	r2, #0
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	e00f      	b.n	8007d2c <_malloc_r+0xb0>
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	1b52      	subs	r2, r2, r5
 8007d10:	d41f      	bmi.n	8007d52 <_malloc_r+0xd6>
 8007d12:	2a0b      	cmp	r2, #11
 8007d14:	d917      	bls.n	8007d46 <_malloc_r+0xca>
 8007d16:	1961      	adds	r1, r4, r5
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	6025      	str	r5, [r4, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	6059      	strne	r1, [r3, #4]
 8007d20:	6863      	ldr	r3, [r4, #4]
 8007d22:	bf08      	it	eq
 8007d24:	f8c8 1000 	streq.w	r1, [r8]
 8007d28:	5162      	str	r2, [r4, r5]
 8007d2a:	604b      	str	r3, [r1, #4]
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f104 060b 	add.w	r6, r4, #11
 8007d32:	f000 f829 	bl	8007d88 <__malloc_unlock>
 8007d36:	f026 0607 	bic.w	r6, r6, #7
 8007d3a:	1d23      	adds	r3, r4, #4
 8007d3c:	1af2      	subs	r2, r6, r3
 8007d3e:	d0ae      	beq.n	8007c9e <_malloc_r+0x22>
 8007d40:	1b9b      	subs	r3, r3, r6
 8007d42:	50a3      	str	r3, [r4, r2]
 8007d44:	e7ab      	b.n	8007c9e <_malloc_r+0x22>
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	6862      	ldr	r2, [r4, #4]
 8007d4a:	d1dd      	bne.n	8007d08 <_malloc_r+0x8c>
 8007d4c:	f8c8 2000 	str.w	r2, [r8]
 8007d50:	e7ec      	b.n	8007d2c <_malloc_r+0xb0>
 8007d52:	4623      	mov	r3, r4
 8007d54:	6864      	ldr	r4, [r4, #4]
 8007d56:	e7ac      	b.n	8007cb2 <_malloc_r+0x36>
 8007d58:	4634      	mov	r4, r6
 8007d5a:	6876      	ldr	r6, [r6, #4]
 8007d5c:	e7b4      	b.n	8007cc8 <_malloc_r+0x4c>
 8007d5e:	4613      	mov	r3, r2
 8007d60:	e7cc      	b.n	8007cfc <_malloc_r+0x80>
 8007d62:	230c      	movs	r3, #12
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	4638      	mov	r0, r7
 8007d68:	f000 f80e 	bl	8007d88 <__malloc_unlock>
 8007d6c:	e797      	b.n	8007c9e <_malloc_r+0x22>
 8007d6e:	6025      	str	r5, [r4, #0]
 8007d70:	e7dc      	b.n	8007d2c <_malloc_r+0xb0>
 8007d72:	605b      	str	r3, [r3, #4]
 8007d74:	deff      	udf	#255	; 0xff
 8007d76:	bf00      	nop
 8007d78:	20000dbc 	.word	0x20000dbc

08007d7c <__malloc_lock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__malloc_lock+0x8>)
 8007d7e:	f001 bf16 	b.w	8009bae <__retarget_lock_acquire_recursive>
 8007d82:	bf00      	nop
 8007d84:	20000f04 	.word	0x20000f04

08007d88 <__malloc_unlock>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__malloc_unlock+0x8>)
 8007d8a:	f001 bf11 	b.w	8009bb0 <__retarget_lock_release_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20000f04 	.word	0x20000f04

08007d94 <realloc>:
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <realloc+0xc>)
 8007d96:	460a      	mov	r2, r1
 8007d98:	4601      	mov	r1, r0
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	f000 b802 	b.w	8007da4 <_realloc_r>
 8007da0:	200001d0 	.word	0x200001d0

08007da4 <_realloc_r>:
 8007da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da8:	4680      	mov	r8, r0
 8007daa:	4614      	mov	r4, r2
 8007dac:	460e      	mov	r6, r1
 8007dae:	b921      	cbnz	r1, 8007dba <_realloc_r+0x16>
 8007db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db4:	4611      	mov	r1, r2
 8007db6:	f7ff bf61 	b.w	8007c7c <_malloc_r>
 8007dba:	b92a      	cbnz	r2, 8007dc8 <_realloc_r+0x24>
 8007dbc:	f002 fdae 	bl	800a91c <_free_r>
 8007dc0:	4625      	mov	r5, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc8:	f003 fe0b 	bl	800b9e2 <_malloc_usable_size_r>
 8007dcc:	4284      	cmp	r4, r0
 8007dce:	4607      	mov	r7, r0
 8007dd0:	d802      	bhi.n	8007dd8 <_realloc_r+0x34>
 8007dd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dd6:	d812      	bhi.n	8007dfe <_realloc_r+0x5a>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4640      	mov	r0, r8
 8007ddc:	f7ff ff4e 	bl	8007c7c <_malloc_r>
 8007de0:	4605      	mov	r5, r0
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d0ed      	beq.n	8007dc2 <_realloc_r+0x1e>
 8007de6:	42bc      	cmp	r4, r7
 8007de8:	4622      	mov	r2, r4
 8007dea:	4631      	mov	r1, r6
 8007dec:	bf28      	it	cs
 8007dee:	463a      	movcs	r2, r7
 8007df0:	f001 fedf 	bl	8009bb2 <memcpy>
 8007df4:	4631      	mov	r1, r6
 8007df6:	4640      	mov	r0, r8
 8007df8:	f002 fd90 	bl	800a91c <_free_r>
 8007dfc:	e7e1      	b.n	8007dc2 <_realloc_r+0x1e>
 8007dfe:	4635      	mov	r5, r6
 8007e00:	e7df      	b.n	8007dc2 <_realloc_r+0x1e>

08007e02 <sulp>:
 8007e02:	b570      	push	{r4, r5, r6, lr}
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	ec45 4b10 	vmov	d0, r4, r5
 8007e0c:	4616      	mov	r6, r2
 8007e0e:	f003 fca7 	bl	800b760 <__ulp>
 8007e12:	ec51 0b10 	vmov	r0, r1, d0
 8007e16:	b17e      	cbz	r6, 8007e38 <sulp+0x36>
 8007e18:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dd09      	ble.n	8007e38 <sulp+0x36>
 8007e24:	051b      	lsls	r3, r3, #20
 8007e26:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e30:	4622      	mov	r2, r4
 8007e32:	462b      	mov	r3, r5
 8007e34:	f7f8 fbe0 	bl	80005f8 <__aeabi_dmul>
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	0000      	movs	r0, r0
 8007e3c:	0000      	movs	r0, r0
	...

08007e40 <_strtod_l>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	ed2d 8b02 	vpush	{d8}
 8007e48:	b09b      	sub	sp, #108	; 0x6c
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e4e:	2200      	movs	r2, #0
 8007e50:	9216      	str	r2, [sp, #88]	; 0x58
 8007e52:	460d      	mov	r5, r1
 8007e54:	f04f 0800 	mov.w	r8, #0
 8007e58:	f04f 0900 	mov.w	r9, #0
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	9215      	str	r2, [sp, #84]	; 0x54
 8007e60:	7811      	ldrb	r1, [r2, #0]
 8007e62:	292b      	cmp	r1, #43	; 0x2b
 8007e64:	d04c      	beq.n	8007f00 <_strtod_l+0xc0>
 8007e66:	d83a      	bhi.n	8007ede <_strtod_l+0x9e>
 8007e68:	290d      	cmp	r1, #13
 8007e6a:	d834      	bhi.n	8007ed6 <_strtod_l+0x96>
 8007e6c:	2908      	cmp	r1, #8
 8007e6e:	d834      	bhi.n	8007eda <_strtod_l+0x9a>
 8007e70:	2900      	cmp	r1, #0
 8007e72:	d03d      	beq.n	8007ef0 <_strtod_l+0xb0>
 8007e74:	2200      	movs	r2, #0
 8007e76:	920a      	str	r2, [sp, #40]	; 0x28
 8007e78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007e7a:	7832      	ldrb	r2, [r6, #0]
 8007e7c:	2a30      	cmp	r2, #48	; 0x30
 8007e7e:	f040 80b4 	bne.w	8007fea <_strtod_l+0x1aa>
 8007e82:	7872      	ldrb	r2, [r6, #1]
 8007e84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e88:	2a58      	cmp	r2, #88	; 0x58
 8007e8a:	d170      	bne.n	8007f6e <_strtod_l+0x12e>
 8007e8c:	9302      	str	r3, [sp, #8]
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	ab16      	add	r3, sp, #88	; 0x58
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4a8e      	ldr	r2, [pc, #568]	; (80080d0 <_strtod_l+0x290>)
 8007e98:	ab17      	add	r3, sp, #92	; 0x5c
 8007e9a:	a915      	add	r1, sp, #84	; 0x54
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f002 fdf1 	bl	800aa84 <__gethex>
 8007ea2:	f010 070f 	ands.w	r7, r0, #15
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	d005      	beq.n	8007eb6 <_strtod_l+0x76>
 8007eaa:	2f06      	cmp	r7, #6
 8007eac:	d12a      	bne.n	8007f04 <_strtod_l+0xc4>
 8007eae:	3601      	adds	r6, #1
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9615      	str	r6, [sp, #84]	; 0x54
 8007eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f040 857f 	bne.w	80089bc <_strtod_l+0xb7c>
 8007ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec0:	b1db      	cbz	r3, 8007efa <_strtod_l+0xba>
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ec8:	ec43 2b10 	vmov	d0, r2, r3
 8007ecc:	b01b      	add	sp, #108	; 0x6c
 8007ece:	ecbd 8b02 	vpop	{d8}
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	2920      	cmp	r1, #32
 8007ed8:	d1cc      	bne.n	8007e74 <_strtod_l+0x34>
 8007eda:	3201      	adds	r2, #1
 8007edc:	e7bf      	b.n	8007e5e <_strtod_l+0x1e>
 8007ede:	292d      	cmp	r1, #45	; 0x2d
 8007ee0:	d1c8      	bne.n	8007e74 <_strtod_l+0x34>
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	910a      	str	r1, [sp, #40]	; 0x28
 8007ee6:	1c51      	adds	r1, r2, #1
 8007ee8:	9115      	str	r1, [sp, #84]	; 0x54
 8007eea:	7852      	ldrb	r2, [r2, #1]
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	d1c3      	bne.n	8007e78 <_strtod_l+0x38>
 8007ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ef2:	9515      	str	r5, [sp, #84]	; 0x54
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 855f 	bne.w	80089b8 <_strtod_l+0xb78>
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	e7e3      	b.n	8007ec8 <_strtod_l+0x88>
 8007f00:	2100      	movs	r1, #0
 8007f02:	e7ef      	b.n	8007ee4 <_strtod_l+0xa4>
 8007f04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f06:	b13a      	cbz	r2, 8007f18 <_strtod_l+0xd8>
 8007f08:	2135      	movs	r1, #53	; 0x35
 8007f0a:	a818      	add	r0, sp, #96	; 0x60
 8007f0c:	f003 fd25 	bl	800b95a <__copybits>
 8007f10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f12:	4620      	mov	r0, r4
 8007f14:	f003 f8f8 	bl	800b108 <_Bfree>
 8007f18:	3f01      	subs	r7, #1
 8007f1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f1c:	2f04      	cmp	r7, #4
 8007f1e:	d806      	bhi.n	8007f2e <_strtod_l+0xee>
 8007f20:	e8df f007 	tbb	[pc, r7]
 8007f24:	201d0314 	.word	0x201d0314
 8007f28:	14          	.byte	0x14
 8007f29:	00          	.byte	0x00
 8007f2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007f2e:	05e9      	lsls	r1, r5, #23
 8007f30:	bf48      	it	mi
 8007f32:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007f36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f3a:	0d1b      	lsrs	r3, r3, #20
 8007f3c:	051b      	lsls	r3, r3, #20
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1b9      	bne.n	8007eb6 <_strtod_l+0x76>
 8007f42:	f001 fe09 	bl	8009b58 <__errno>
 8007f46:	2322      	movs	r3, #34	; 0x22
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	e7b4      	b.n	8007eb6 <_strtod_l+0x76>
 8007f4c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007f50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f5c:	e7e7      	b.n	8007f2e <_strtod_l+0xee>
 8007f5e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80080d8 <_strtod_l+0x298>
 8007f62:	e7e4      	b.n	8007f2e <_strtod_l+0xee>
 8007f64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f68:	f04f 38ff 	mov.w	r8, #4294967295
 8007f6c:	e7df      	b.n	8007f2e <_strtod_l+0xee>
 8007f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	9215      	str	r2, [sp, #84]	; 0x54
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b30      	cmp	r3, #48	; 0x30
 8007f78:	d0f9      	beq.n	8007f6e <_strtod_l+0x12e>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d09b      	beq.n	8007eb6 <_strtod_l+0x76>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f04f 0a00 	mov.w	sl, #0
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007f8e:	46d3      	mov	fp, sl
 8007f90:	220a      	movs	r2, #10
 8007f92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007f94:	7806      	ldrb	r6, [r0, #0]
 8007f96:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f9a:	b2d9      	uxtb	r1, r3
 8007f9c:	2909      	cmp	r1, #9
 8007f9e:	d926      	bls.n	8007fee <_strtod_l+0x1ae>
 8007fa0:	494c      	ldr	r1, [pc, #304]	; (80080d4 <_strtod_l+0x294>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f001 fd0f 	bl	80099c6 <strncmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d030      	beq.n	800800e <_strtod_l+0x1ce>
 8007fac:	2000      	movs	r0, #0
 8007fae:	4632      	mov	r2, r6
 8007fb0:	9005      	str	r0, [sp, #20]
 8007fb2:	465e      	mov	r6, fp
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2a65      	cmp	r2, #101	; 0x65
 8007fb8:	d001      	beq.n	8007fbe <_strtod_l+0x17e>
 8007fba:	2a45      	cmp	r2, #69	; 0x45
 8007fbc:	d113      	bne.n	8007fe6 <_strtod_l+0x1a6>
 8007fbe:	b91e      	cbnz	r6, 8007fc8 <_strtod_l+0x188>
 8007fc0:	9a04      	ldr	r2, [sp, #16]
 8007fc2:	4302      	orrs	r2, r0
 8007fc4:	d094      	beq.n	8007ef0 <_strtod_l+0xb0>
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007fca:	1c6a      	adds	r2, r5, #1
 8007fcc:	9215      	str	r2, [sp, #84]	; 0x54
 8007fce:	786a      	ldrb	r2, [r5, #1]
 8007fd0:	2a2b      	cmp	r2, #43	; 0x2b
 8007fd2:	d074      	beq.n	80080be <_strtod_l+0x27e>
 8007fd4:	2a2d      	cmp	r2, #45	; 0x2d
 8007fd6:	d078      	beq.n	80080ca <_strtod_l+0x28a>
 8007fd8:	f04f 0c00 	mov.w	ip, #0
 8007fdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007fe0:	2909      	cmp	r1, #9
 8007fe2:	d97f      	bls.n	80080e4 <_strtod_l+0x2a4>
 8007fe4:	9515      	str	r5, [sp, #84]	; 0x54
 8007fe6:	2700      	movs	r7, #0
 8007fe8:	e09e      	b.n	8008128 <_strtod_l+0x2e8>
 8007fea:	2300      	movs	r3, #0
 8007fec:	e7c8      	b.n	8007f80 <_strtod_l+0x140>
 8007fee:	f1bb 0f08 	cmp.w	fp, #8
 8007ff2:	bfd8      	it	le
 8007ff4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007ff6:	f100 0001 	add.w	r0, r0, #1
 8007ffa:	bfda      	itte	le
 8007ffc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008000:	9309      	strle	r3, [sp, #36]	; 0x24
 8008002:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008006:	f10b 0b01 	add.w	fp, fp, #1
 800800a:	9015      	str	r0, [sp, #84]	; 0x54
 800800c:	e7c1      	b.n	8007f92 <_strtod_l+0x152>
 800800e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	9215      	str	r2, [sp, #84]	; 0x54
 8008014:	785a      	ldrb	r2, [r3, #1]
 8008016:	f1bb 0f00 	cmp.w	fp, #0
 800801a:	d037      	beq.n	800808c <_strtod_l+0x24c>
 800801c:	9005      	str	r0, [sp, #20]
 800801e:	465e      	mov	r6, fp
 8008020:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008024:	2b09      	cmp	r3, #9
 8008026:	d912      	bls.n	800804e <_strtod_l+0x20e>
 8008028:	2301      	movs	r3, #1
 800802a:	e7c4      	b.n	8007fb6 <_strtod_l+0x176>
 800802c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	9215      	str	r2, [sp, #84]	; 0x54
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	3001      	adds	r0, #1
 8008036:	2a30      	cmp	r2, #48	; 0x30
 8008038:	d0f8      	beq.n	800802c <_strtod_l+0x1ec>
 800803a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800803e:	2b08      	cmp	r3, #8
 8008040:	f200 84c1 	bhi.w	80089c6 <_strtod_l+0xb86>
 8008044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008046:	9005      	str	r0, [sp, #20]
 8008048:	2000      	movs	r0, #0
 800804a:	930b      	str	r3, [sp, #44]	; 0x2c
 800804c:	4606      	mov	r6, r0
 800804e:	3a30      	subs	r2, #48	; 0x30
 8008050:	f100 0301 	add.w	r3, r0, #1
 8008054:	d014      	beq.n	8008080 <_strtod_l+0x240>
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	4419      	add	r1, r3
 800805a:	9105      	str	r1, [sp, #20]
 800805c:	4633      	mov	r3, r6
 800805e:	eb00 0c06 	add.w	ip, r0, r6
 8008062:	210a      	movs	r1, #10
 8008064:	4563      	cmp	r3, ip
 8008066:	d113      	bne.n	8008090 <_strtod_l+0x250>
 8008068:	1833      	adds	r3, r6, r0
 800806a:	2b08      	cmp	r3, #8
 800806c:	f106 0601 	add.w	r6, r6, #1
 8008070:	4406      	add	r6, r0
 8008072:	dc1a      	bgt.n	80080aa <_strtod_l+0x26a>
 8008074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008076:	230a      	movs	r3, #10
 8008078:	fb03 2301 	mla	r3, r3, r1, r2
 800807c:	9309      	str	r3, [sp, #36]	; 0x24
 800807e:	2300      	movs	r3, #0
 8008080:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008082:	1c51      	adds	r1, r2, #1
 8008084:	9115      	str	r1, [sp, #84]	; 0x54
 8008086:	7852      	ldrb	r2, [r2, #1]
 8008088:	4618      	mov	r0, r3
 800808a:	e7c9      	b.n	8008020 <_strtod_l+0x1e0>
 800808c:	4658      	mov	r0, fp
 800808e:	e7d2      	b.n	8008036 <_strtod_l+0x1f6>
 8008090:	2b08      	cmp	r3, #8
 8008092:	f103 0301 	add.w	r3, r3, #1
 8008096:	dc03      	bgt.n	80080a0 <_strtod_l+0x260>
 8008098:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800809a:	434f      	muls	r7, r1
 800809c:	9709      	str	r7, [sp, #36]	; 0x24
 800809e:	e7e1      	b.n	8008064 <_strtod_l+0x224>
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	bfd8      	it	le
 80080a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80080a8:	e7dc      	b.n	8008064 <_strtod_l+0x224>
 80080aa:	2e10      	cmp	r6, #16
 80080ac:	bfdc      	itt	le
 80080ae:	230a      	movle	r3, #10
 80080b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80080b4:	e7e3      	b.n	800807e <_strtod_l+0x23e>
 80080b6:	2300      	movs	r3, #0
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	2301      	movs	r3, #1
 80080bc:	e780      	b.n	8007fc0 <_strtod_l+0x180>
 80080be:	f04f 0c00 	mov.w	ip, #0
 80080c2:	1caa      	adds	r2, r5, #2
 80080c4:	9215      	str	r2, [sp, #84]	; 0x54
 80080c6:	78aa      	ldrb	r2, [r5, #2]
 80080c8:	e788      	b.n	8007fdc <_strtod_l+0x19c>
 80080ca:	f04f 0c01 	mov.w	ip, #1
 80080ce:	e7f8      	b.n	80080c2 <_strtod_l+0x282>
 80080d0:	0800c7f8 	.word	0x0800c7f8
 80080d4:	0800c7f4 	.word	0x0800c7f4
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080de:	1c51      	adds	r1, r2, #1
 80080e0:	9115      	str	r1, [sp, #84]	; 0x54
 80080e2:	7852      	ldrb	r2, [r2, #1]
 80080e4:	2a30      	cmp	r2, #48	; 0x30
 80080e6:	d0f9      	beq.n	80080dc <_strtod_l+0x29c>
 80080e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80080ec:	2908      	cmp	r1, #8
 80080ee:	f63f af7a 	bhi.w	8007fe6 <_strtod_l+0x1a6>
 80080f2:	3a30      	subs	r2, #48	; 0x30
 80080f4:	9208      	str	r2, [sp, #32]
 80080f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080f8:	920c      	str	r2, [sp, #48]	; 0x30
 80080fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080fc:	1c57      	adds	r7, r2, #1
 80080fe:	9715      	str	r7, [sp, #84]	; 0x54
 8008100:	7852      	ldrb	r2, [r2, #1]
 8008102:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008106:	f1be 0f09 	cmp.w	lr, #9
 800810a:	d938      	bls.n	800817e <_strtod_l+0x33e>
 800810c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800810e:	1a7f      	subs	r7, r7, r1
 8008110:	2f08      	cmp	r7, #8
 8008112:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008116:	dc03      	bgt.n	8008120 <_strtod_l+0x2e0>
 8008118:	9908      	ldr	r1, [sp, #32]
 800811a:	428f      	cmp	r7, r1
 800811c:	bfa8      	it	ge
 800811e:	460f      	movge	r7, r1
 8008120:	f1bc 0f00 	cmp.w	ip, #0
 8008124:	d000      	beq.n	8008128 <_strtod_l+0x2e8>
 8008126:	427f      	negs	r7, r7
 8008128:	2e00      	cmp	r6, #0
 800812a:	d14f      	bne.n	80081cc <_strtod_l+0x38c>
 800812c:	9904      	ldr	r1, [sp, #16]
 800812e:	4301      	orrs	r1, r0
 8008130:	f47f aec1 	bne.w	8007eb6 <_strtod_l+0x76>
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f aedb 	bne.w	8007ef0 <_strtod_l+0xb0>
 800813a:	2a69      	cmp	r2, #105	; 0x69
 800813c:	d029      	beq.n	8008192 <_strtod_l+0x352>
 800813e:	dc26      	bgt.n	800818e <_strtod_l+0x34e>
 8008140:	2a49      	cmp	r2, #73	; 0x49
 8008142:	d026      	beq.n	8008192 <_strtod_l+0x352>
 8008144:	2a4e      	cmp	r2, #78	; 0x4e
 8008146:	f47f aed3 	bne.w	8007ef0 <_strtod_l+0xb0>
 800814a:	499b      	ldr	r1, [pc, #620]	; (80083b8 <_strtod_l+0x578>)
 800814c:	a815      	add	r0, sp, #84	; 0x54
 800814e:	f002 fed9 	bl	800af04 <__match>
 8008152:	2800      	cmp	r0, #0
 8008154:	f43f aecc 	beq.w	8007ef0 <_strtod_l+0xb0>
 8008158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b28      	cmp	r3, #40	; 0x28
 800815e:	d12f      	bne.n	80081c0 <_strtod_l+0x380>
 8008160:	4996      	ldr	r1, [pc, #600]	; (80083bc <_strtod_l+0x57c>)
 8008162:	aa18      	add	r2, sp, #96	; 0x60
 8008164:	a815      	add	r0, sp, #84	; 0x54
 8008166:	f002 fee1 	bl	800af2c <__hexnan>
 800816a:	2805      	cmp	r0, #5
 800816c:	d128      	bne.n	80081c0 <_strtod_l+0x380>
 800816e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008174:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008178:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800817c:	e69b      	b.n	8007eb6 <_strtod_l+0x76>
 800817e:	9f08      	ldr	r7, [sp, #32]
 8008180:	210a      	movs	r1, #10
 8008182:	fb01 2107 	mla	r1, r1, r7, r2
 8008186:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800818a:	9208      	str	r2, [sp, #32]
 800818c:	e7b5      	b.n	80080fa <_strtod_l+0x2ba>
 800818e:	2a6e      	cmp	r2, #110	; 0x6e
 8008190:	e7d9      	b.n	8008146 <_strtod_l+0x306>
 8008192:	498b      	ldr	r1, [pc, #556]	; (80083c0 <_strtod_l+0x580>)
 8008194:	a815      	add	r0, sp, #84	; 0x54
 8008196:	f002 feb5 	bl	800af04 <__match>
 800819a:	2800      	cmp	r0, #0
 800819c:	f43f aea8 	beq.w	8007ef0 <_strtod_l+0xb0>
 80081a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a2:	4988      	ldr	r1, [pc, #544]	; (80083c4 <_strtod_l+0x584>)
 80081a4:	3b01      	subs	r3, #1
 80081a6:	a815      	add	r0, sp, #84	; 0x54
 80081a8:	9315      	str	r3, [sp, #84]	; 0x54
 80081aa:	f002 feab 	bl	800af04 <__match>
 80081ae:	b910      	cbnz	r0, 80081b6 <_strtod_l+0x376>
 80081b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b2:	3301      	adds	r3, #1
 80081b4:	9315      	str	r3, [sp, #84]	; 0x54
 80081b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80083d4 <_strtod_l+0x594>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	e67a      	b.n	8007eb6 <_strtod_l+0x76>
 80081c0:	4881      	ldr	r0, [pc, #516]	; (80083c8 <_strtod_l+0x588>)
 80081c2:	f001 fd05 	bl	8009bd0 <nan>
 80081c6:	ec59 8b10 	vmov	r8, r9, d0
 80081ca:	e674      	b.n	8007eb6 <_strtod_l+0x76>
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081d0:	1afb      	subs	r3, r7, r3
 80081d2:	f1bb 0f00 	cmp.w	fp, #0
 80081d6:	bf08      	it	eq
 80081d8:	46b3      	moveq	fp, r6
 80081da:	2e10      	cmp	r6, #16
 80081dc:	9308      	str	r3, [sp, #32]
 80081de:	4635      	mov	r5, r6
 80081e0:	bfa8      	it	ge
 80081e2:	2510      	movge	r5, #16
 80081e4:	f7f8 f98e 	bl	8000504 <__aeabi_ui2d>
 80081e8:	2e09      	cmp	r6, #9
 80081ea:	4680      	mov	r8, r0
 80081ec:	4689      	mov	r9, r1
 80081ee:	dd13      	ble.n	8008218 <_strtod_l+0x3d8>
 80081f0:	4b76      	ldr	r3, [pc, #472]	; (80083cc <_strtod_l+0x58c>)
 80081f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80081f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081fa:	f7f8 f9fd 	bl	80005f8 <__aeabi_dmul>
 80081fe:	4680      	mov	r8, r0
 8008200:	4650      	mov	r0, sl
 8008202:	4689      	mov	r9, r1
 8008204:	f7f8 f97e 	bl	8000504 <__aeabi_ui2d>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 f83c 	bl	800028c <__adddf3>
 8008214:	4680      	mov	r8, r0
 8008216:	4689      	mov	r9, r1
 8008218:	2e0f      	cmp	r6, #15
 800821a:	dc38      	bgt.n	800828e <_strtod_l+0x44e>
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f43f ae49 	beq.w	8007eb6 <_strtod_l+0x76>
 8008224:	dd24      	ble.n	8008270 <_strtod_l+0x430>
 8008226:	2b16      	cmp	r3, #22
 8008228:	dc0b      	bgt.n	8008242 <_strtod_l+0x402>
 800822a:	4968      	ldr	r1, [pc, #416]	; (80083cc <_strtod_l+0x58c>)
 800822c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	f7f8 f9de 	bl	80005f8 <__aeabi_dmul>
 800823c:	4680      	mov	r8, r0
 800823e:	4689      	mov	r9, r1
 8008240:	e639      	b.n	8007eb6 <_strtod_l+0x76>
 8008242:	9a08      	ldr	r2, [sp, #32]
 8008244:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008248:	4293      	cmp	r3, r2
 800824a:	db20      	blt.n	800828e <_strtod_l+0x44e>
 800824c:	4c5f      	ldr	r4, [pc, #380]	; (80083cc <_strtod_l+0x58c>)
 800824e:	f1c6 060f 	rsb	r6, r6, #15
 8008252:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008256:	4642      	mov	r2, r8
 8008258:	464b      	mov	r3, r9
 800825a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	1b9e      	subs	r6, r3, r6
 8008266:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800826a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800826e:	e7e3      	b.n	8008238 <_strtod_l+0x3f8>
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	3316      	adds	r3, #22
 8008274:	db0b      	blt.n	800828e <_strtod_l+0x44e>
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	1bdf      	subs	r7, r3, r7
 800827a:	4b54      	ldr	r3, [pc, #336]	; (80083cc <_strtod_l+0x58c>)
 800827c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fae0 	bl	800084c <__aeabi_ddiv>
 800828c:	e7d6      	b.n	800823c <_strtod_l+0x3fc>
 800828e:	9b08      	ldr	r3, [sp, #32]
 8008290:	1b75      	subs	r5, r6, r5
 8008292:	441d      	add	r5, r3
 8008294:	2d00      	cmp	r5, #0
 8008296:	dd70      	ble.n	800837a <_strtod_l+0x53a>
 8008298:	f015 030f 	ands.w	r3, r5, #15
 800829c:	d00a      	beq.n	80082b4 <_strtod_l+0x474>
 800829e:	494b      	ldr	r1, [pc, #300]	; (80083cc <_strtod_l+0x58c>)
 80082a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	f035 050f 	bics.w	r5, r5, #15
 80082b8:	d04d      	beq.n	8008356 <_strtod_l+0x516>
 80082ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80082be:	dd22      	ble.n	8008306 <_strtod_l+0x4c6>
 80082c0:	2500      	movs	r5, #0
 80082c2:	46ab      	mov	fp, r5
 80082c4:	9509      	str	r5, [sp, #36]	; 0x24
 80082c6:	9505      	str	r5, [sp, #20]
 80082c8:	2322      	movs	r3, #34	; 0x22
 80082ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80083d4 <_strtod_l+0x594>
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	f04f 0800 	mov.w	r8, #0
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f43f aded 	beq.w	8007eb6 <_strtod_l+0x76>
 80082dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082de:	4620      	mov	r0, r4
 80082e0:	f002 ff12 	bl	800b108 <_Bfree>
 80082e4:	9905      	ldr	r1, [sp, #20]
 80082e6:	4620      	mov	r0, r4
 80082e8:	f002 ff0e 	bl	800b108 <_Bfree>
 80082ec:	4659      	mov	r1, fp
 80082ee:	4620      	mov	r0, r4
 80082f0:	f002 ff0a 	bl	800b108 <_Bfree>
 80082f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f6:	4620      	mov	r0, r4
 80082f8:	f002 ff06 	bl	800b108 <_Bfree>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	f002 ff02 	bl	800b108 <_Bfree>
 8008304:	e5d7      	b.n	8007eb6 <_strtod_l+0x76>
 8008306:	4b32      	ldr	r3, [pc, #200]	; (80083d0 <_strtod_l+0x590>)
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	2300      	movs	r3, #0
 800830c:	112d      	asrs	r5, r5, #4
 800830e:	4640      	mov	r0, r8
 8008310:	4649      	mov	r1, r9
 8008312:	469a      	mov	sl, r3
 8008314:	2d01      	cmp	r5, #1
 8008316:	dc21      	bgt.n	800835c <_strtod_l+0x51c>
 8008318:	b10b      	cbz	r3, 800831e <_strtod_l+0x4de>
 800831a:	4680      	mov	r8, r0
 800831c:	4689      	mov	r9, r1
 800831e:	492c      	ldr	r1, [pc, #176]	; (80083d0 <_strtod_l+0x590>)
 8008320:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008324:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <_strtod_l+0x594>)
 8008336:	460a      	mov	r2, r1
 8008338:	400b      	ands	r3, r1
 800833a:	4927      	ldr	r1, [pc, #156]	; (80083d8 <_strtod_l+0x598>)
 800833c:	428b      	cmp	r3, r1
 800833e:	4680      	mov	r8, r0
 8008340:	d8be      	bhi.n	80082c0 <_strtod_l+0x480>
 8008342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008346:	428b      	cmp	r3, r1
 8008348:	bf86      	itte	hi
 800834a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80083dc <_strtod_l+0x59c>
 800834e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008352:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008356:	2300      	movs	r3, #0
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	e07b      	b.n	8008454 <_strtod_l+0x614>
 800835c:	07ea      	lsls	r2, r5, #31
 800835e:	d505      	bpl.n	800836c <_strtod_l+0x52c>
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f8 f947 	bl	80005f8 <__aeabi_dmul>
 800836a:	2301      	movs	r3, #1
 800836c:	9a04      	ldr	r2, [sp, #16]
 800836e:	3208      	adds	r2, #8
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	106d      	asrs	r5, r5, #1
 8008376:	9204      	str	r2, [sp, #16]
 8008378:	e7cc      	b.n	8008314 <_strtod_l+0x4d4>
 800837a:	d0ec      	beq.n	8008356 <_strtod_l+0x516>
 800837c:	426d      	negs	r5, r5
 800837e:	f015 020f 	ands.w	r2, r5, #15
 8008382:	d00a      	beq.n	800839a <_strtod_l+0x55a>
 8008384:	4b11      	ldr	r3, [pc, #68]	; (80083cc <_strtod_l+0x58c>)
 8008386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f8 fa5b 	bl	800084c <__aeabi_ddiv>
 8008396:	4680      	mov	r8, r0
 8008398:	4689      	mov	r9, r1
 800839a:	112d      	asrs	r5, r5, #4
 800839c:	d0db      	beq.n	8008356 <_strtod_l+0x516>
 800839e:	2d1f      	cmp	r5, #31
 80083a0:	dd1e      	ble.n	80083e0 <_strtod_l+0x5a0>
 80083a2:	2500      	movs	r5, #0
 80083a4:	46ab      	mov	fp, r5
 80083a6:	9509      	str	r5, [sp, #36]	; 0x24
 80083a8:	9505      	str	r5, [sp, #20]
 80083aa:	2322      	movs	r3, #34	; 0x22
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	f04f 0900 	mov.w	r9, #0
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	e78d      	b.n	80082d4 <_strtod_l+0x494>
 80083b8:	0800c855 	.word	0x0800c855
 80083bc:	0800c80c 	.word	0x0800c80c
 80083c0:	0800c84d 	.word	0x0800c84d
 80083c4:	0800c939 	.word	0x0800c939
 80083c8:	0800c935 	.word	0x0800c935
 80083cc:	0800ca90 	.word	0x0800ca90
 80083d0:	0800ca68 	.word	0x0800ca68
 80083d4:	7ff00000 	.word	0x7ff00000
 80083d8:	7ca00000 	.word	0x7ca00000
 80083dc:	7fefffff 	.word	0x7fefffff
 80083e0:	f015 0310 	ands.w	r3, r5, #16
 80083e4:	bf18      	it	ne
 80083e6:	236a      	movne	r3, #106	; 0x6a
 80083e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800878c <_strtod_l+0x94c>
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	2300      	movs	r3, #0
 80083f4:	07ea      	lsls	r2, r5, #31
 80083f6:	d504      	bpl.n	8008402 <_strtod_l+0x5c2>
 80083f8:	e9da 2300 	ldrd	r2, r3, [sl]
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	2301      	movs	r3, #1
 8008402:	106d      	asrs	r5, r5, #1
 8008404:	f10a 0a08 	add.w	sl, sl, #8
 8008408:	d1f4      	bne.n	80083f4 <_strtod_l+0x5b4>
 800840a:	b10b      	cbz	r3, 8008410 <_strtod_l+0x5d0>
 800840c:	4680      	mov	r8, r0
 800840e:	4689      	mov	r9, r1
 8008410:	9b04      	ldr	r3, [sp, #16]
 8008412:	b1bb      	cbz	r3, 8008444 <_strtod_l+0x604>
 8008414:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008418:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800841c:	2b00      	cmp	r3, #0
 800841e:	4649      	mov	r1, r9
 8008420:	dd10      	ble.n	8008444 <_strtod_l+0x604>
 8008422:	2b1f      	cmp	r3, #31
 8008424:	f340 811e 	ble.w	8008664 <_strtod_l+0x824>
 8008428:	2b34      	cmp	r3, #52	; 0x34
 800842a:	bfde      	ittt	le
 800842c:	f04f 33ff 	movle.w	r3, #4294967295
 8008430:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008434:	4093      	lslle	r3, r2
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	bfcc      	ite	gt
 800843c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008440:	ea03 0901 	andle.w	r9, r3, r1
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008450:	2800      	cmp	r0, #0
 8008452:	d1a6      	bne.n	80083a2 <_strtod_l+0x562>
 8008454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800845a:	4633      	mov	r3, r6
 800845c:	465a      	mov	r2, fp
 800845e:	4620      	mov	r0, r4
 8008460:	f002 feba 	bl	800b1d8 <__s2b>
 8008464:	9009      	str	r0, [sp, #36]	; 0x24
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f af2a 	beq.w	80082c0 <_strtod_l+0x480>
 800846c:	9a08      	ldr	r2, [sp, #32]
 800846e:	9b05      	ldr	r3, [sp, #20]
 8008470:	2a00      	cmp	r2, #0
 8008472:	eba3 0307 	sub.w	r3, r3, r7
 8008476:	bfa8      	it	ge
 8008478:	2300      	movge	r3, #0
 800847a:	930c      	str	r3, [sp, #48]	; 0x30
 800847c:	2500      	movs	r5, #0
 800847e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008482:	9312      	str	r3, [sp, #72]	; 0x48
 8008484:	46ab      	mov	fp, r5
 8008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008488:	4620      	mov	r0, r4
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	f002 fdfc 	bl	800b088 <_Balloc>
 8008490:	9005      	str	r0, [sp, #20]
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f af18 	beq.w	80082c8 <_strtod_l+0x488>
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	f103 010c 	add.w	r1, r3, #12
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	300c      	adds	r0, #12
 80084a6:	f001 fb84 	bl	8009bb2 <memcpy>
 80084aa:	ec49 8b10 	vmov	d0, r8, r9
 80084ae:	aa18      	add	r2, sp, #96	; 0x60
 80084b0:	a917      	add	r1, sp, #92	; 0x5c
 80084b2:	4620      	mov	r0, r4
 80084b4:	f003 f9c4 	bl	800b840 <__d2b>
 80084b8:	ec49 8b18 	vmov	d8, r8, r9
 80084bc:	9016      	str	r0, [sp, #88]	; 0x58
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f af02 	beq.w	80082c8 <_strtod_l+0x488>
 80084c4:	2101      	movs	r1, #1
 80084c6:	4620      	mov	r0, r4
 80084c8:	f002 ff1e 	bl	800b308 <__i2b>
 80084cc:	4683      	mov	fp, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f43f aefa 	beq.w	80082c8 <_strtod_l+0x488>
 80084d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80084d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084d8:	2e00      	cmp	r6, #0
 80084da:	bfab      	itete	ge
 80084dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80084de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80084e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80084e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80084e6:	bfac      	ite	ge
 80084e8:	eb06 0a03 	addge.w	sl, r6, r3
 80084ec:	1b9f      	sublt	r7, r3, r6
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	1af6      	subs	r6, r6, r3
 80084f2:	4416      	add	r6, r2
 80084f4:	4ba0      	ldr	r3, [pc, #640]	; (8008778 <_strtod_l+0x938>)
 80084f6:	3e01      	subs	r6, #1
 80084f8:	429e      	cmp	r6, r3
 80084fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084fe:	f280 80c4 	bge.w	800868a <_strtod_l+0x84a>
 8008502:	1b9b      	subs	r3, r3, r6
 8008504:	2b1f      	cmp	r3, #31
 8008506:	eba2 0203 	sub.w	r2, r2, r3
 800850a:	f04f 0101 	mov.w	r1, #1
 800850e:	f300 80b0 	bgt.w	8008672 <_strtod_l+0x832>
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	930e      	str	r3, [sp, #56]	; 0x38
 8008518:	2300      	movs	r3, #0
 800851a:	930d      	str	r3, [sp, #52]	; 0x34
 800851c:	eb0a 0602 	add.w	r6, sl, r2
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	45b2      	cmp	sl, r6
 8008524:	4417      	add	r7, r2
 8008526:	441f      	add	r7, r3
 8008528:	4653      	mov	r3, sl
 800852a:	bfa8      	it	ge
 800852c:	4633      	movge	r3, r6
 800852e:	42bb      	cmp	r3, r7
 8008530:	bfa8      	it	ge
 8008532:	463b      	movge	r3, r7
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfc2      	ittt	gt
 8008538:	1af6      	subgt	r6, r6, r3
 800853a:	1aff      	subgt	r7, r7, r3
 800853c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd17      	ble.n	8008576 <_strtod_l+0x736>
 8008546:	4659      	mov	r1, fp
 8008548:	461a      	mov	r2, r3
 800854a:	4620      	mov	r0, r4
 800854c:	f002 ff9c 	bl	800b488 <__pow5mult>
 8008550:	4683      	mov	fp, r0
 8008552:	2800      	cmp	r0, #0
 8008554:	f43f aeb8 	beq.w	80082c8 <_strtod_l+0x488>
 8008558:	4601      	mov	r1, r0
 800855a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800855c:	4620      	mov	r0, r4
 800855e:	f002 fee9 	bl	800b334 <__multiply>
 8008562:	900b      	str	r0, [sp, #44]	; 0x2c
 8008564:	2800      	cmp	r0, #0
 8008566:	f43f aeaf 	beq.w	80082c8 <_strtod_l+0x488>
 800856a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800856c:	4620      	mov	r0, r4
 800856e:	f002 fdcb 	bl	800b108 <_Bfree>
 8008572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008574:	9316      	str	r3, [sp, #88]	; 0x58
 8008576:	2e00      	cmp	r6, #0
 8008578:	f300 808c 	bgt.w	8008694 <_strtod_l+0x854>
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd08      	ble.n	8008594 <_strtod_l+0x754>
 8008582:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008584:	9905      	ldr	r1, [sp, #20]
 8008586:	4620      	mov	r0, r4
 8008588:	f002 ff7e 	bl	800b488 <__pow5mult>
 800858c:	9005      	str	r0, [sp, #20]
 800858e:	2800      	cmp	r0, #0
 8008590:	f43f ae9a 	beq.w	80082c8 <_strtod_l+0x488>
 8008594:	2f00      	cmp	r7, #0
 8008596:	dd08      	ble.n	80085aa <_strtod_l+0x76a>
 8008598:	9905      	ldr	r1, [sp, #20]
 800859a:	463a      	mov	r2, r7
 800859c:	4620      	mov	r0, r4
 800859e:	f002 ffcd 	bl	800b53c <__lshift>
 80085a2:	9005      	str	r0, [sp, #20]
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f ae8f 	beq.w	80082c8 <_strtod_l+0x488>
 80085aa:	f1ba 0f00 	cmp.w	sl, #0
 80085ae:	dd08      	ble.n	80085c2 <_strtod_l+0x782>
 80085b0:	4659      	mov	r1, fp
 80085b2:	4652      	mov	r2, sl
 80085b4:	4620      	mov	r0, r4
 80085b6:	f002 ffc1 	bl	800b53c <__lshift>
 80085ba:	4683      	mov	fp, r0
 80085bc:	2800      	cmp	r0, #0
 80085be:	f43f ae83 	beq.w	80082c8 <_strtod_l+0x488>
 80085c2:	9a05      	ldr	r2, [sp, #20]
 80085c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085c6:	4620      	mov	r0, r4
 80085c8:	f003 f840 	bl	800b64c <__mdiff>
 80085cc:	4605      	mov	r5, r0
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f ae7a 	beq.w	80082c8 <_strtod_l+0x488>
 80085d4:	68c3      	ldr	r3, [r0, #12]
 80085d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d8:	2300      	movs	r3, #0
 80085da:	60c3      	str	r3, [r0, #12]
 80085dc:	4659      	mov	r1, fp
 80085de:	f003 f819 	bl	800b614 <__mcmp>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	da60      	bge.n	80086a8 <_strtod_l+0x868>
 80085e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e8:	ea53 0308 	orrs.w	r3, r3, r8
 80085ec:	f040 8084 	bne.w	80086f8 <_strtod_l+0x8b8>
 80085f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d17f      	bne.n	80086f8 <_strtod_l+0x8b8>
 80085f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085fc:	0d1b      	lsrs	r3, r3, #20
 80085fe:	051b      	lsls	r3, r3, #20
 8008600:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008604:	d978      	bls.n	80086f8 <_strtod_l+0x8b8>
 8008606:	696b      	ldr	r3, [r5, #20]
 8008608:	b913      	cbnz	r3, 8008610 <_strtod_l+0x7d0>
 800860a:	692b      	ldr	r3, [r5, #16]
 800860c:	2b01      	cmp	r3, #1
 800860e:	dd73      	ble.n	80086f8 <_strtod_l+0x8b8>
 8008610:	4629      	mov	r1, r5
 8008612:	2201      	movs	r2, #1
 8008614:	4620      	mov	r0, r4
 8008616:	f002 ff91 	bl	800b53c <__lshift>
 800861a:	4659      	mov	r1, fp
 800861c:	4605      	mov	r5, r0
 800861e:	f002 fff9 	bl	800b614 <__mcmp>
 8008622:	2800      	cmp	r0, #0
 8008624:	dd68      	ble.n	80086f8 <_strtod_l+0x8b8>
 8008626:	9904      	ldr	r1, [sp, #16]
 8008628:	4a54      	ldr	r2, [pc, #336]	; (800877c <_strtod_l+0x93c>)
 800862a:	464b      	mov	r3, r9
 800862c:	2900      	cmp	r1, #0
 800862e:	f000 8084 	beq.w	800873a <_strtod_l+0x8fa>
 8008632:	ea02 0109 	and.w	r1, r2, r9
 8008636:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800863a:	dc7e      	bgt.n	800873a <_strtod_l+0x8fa>
 800863c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008640:	f77f aeb3 	ble.w	80083aa <_strtod_l+0x56a>
 8008644:	4b4e      	ldr	r3, [pc, #312]	; (8008780 <_strtod_l+0x940>)
 8008646:	4640      	mov	r0, r8
 8008648:	4649      	mov	r1, r9
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 ffd4 	bl	80005f8 <__aeabi_dmul>
 8008650:	4b4a      	ldr	r3, [pc, #296]	; (800877c <_strtod_l+0x93c>)
 8008652:	400b      	ands	r3, r1
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	2b00      	cmp	r3, #0
 800865a:	f47f ae3f 	bne.w	80082dc <_strtod_l+0x49c>
 800865e:	2322      	movs	r3, #34	; 0x22
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	e63b      	b.n	80082dc <_strtod_l+0x49c>
 8008664:	f04f 32ff 	mov.w	r2, #4294967295
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	ea03 0808 	and.w	r8, r3, r8
 8008670:	e6e8      	b.n	8008444 <_strtod_l+0x604>
 8008672:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008676:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800867a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800867e:	36e2      	adds	r6, #226	; 0xe2
 8008680:	fa01 f306 	lsl.w	r3, r1, r6
 8008684:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008688:	e748      	b.n	800851c <_strtod_l+0x6dc>
 800868a:	2100      	movs	r1, #0
 800868c:	2301      	movs	r3, #1
 800868e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008692:	e743      	b.n	800851c <_strtod_l+0x6dc>
 8008694:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008696:	4632      	mov	r2, r6
 8008698:	4620      	mov	r0, r4
 800869a:	f002 ff4f 	bl	800b53c <__lshift>
 800869e:	9016      	str	r0, [sp, #88]	; 0x58
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f47f af6b 	bne.w	800857c <_strtod_l+0x73c>
 80086a6:	e60f      	b.n	80082c8 <_strtod_l+0x488>
 80086a8:	46ca      	mov	sl, r9
 80086aa:	d171      	bne.n	8008790 <_strtod_l+0x950>
 80086ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086b2:	b352      	cbz	r2, 800870a <_strtod_l+0x8ca>
 80086b4:	4a33      	ldr	r2, [pc, #204]	; (8008784 <_strtod_l+0x944>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d12a      	bne.n	8008710 <_strtod_l+0x8d0>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	4641      	mov	r1, r8
 80086be:	b1fb      	cbz	r3, 8008700 <_strtod_l+0x8c0>
 80086c0:	4b2e      	ldr	r3, [pc, #184]	; (800877c <_strtod_l+0x93c>)
 80086c2:	ea09 0303 	and.w	r3, r9, r3
 80086c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	d81a      	bhi.n	8008706 <_strtod_l+0x8c6>
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	4299      	cmp	r1, r3
 80086dc:	d118      	bne.n	8008710 <_strtod_l+0x8d0>
 80086de:	4b2a      	ldr	r3, [pc, #168]	; (8008788 <_strtod_l+0x948>)
 80086e0:	459a      	cmp	sl, r3
 80086e2:	d102      	bne.n	80086ea <_strtod_l+0x8aa>
 80086e4:	3101      	adds	r1, #1
 80086e6:	f43f adef 	beq.w	80082c8 <_strtod_l+0x488>
 80086ea:	4b24      	ldr	r3, [pc, #144]	; (800877c <_strtod_l+0x93c>)
 80086ec:	ea0a 0303 	and.w	r3, sl, r3
 80086f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80086f4:	f04f 0800 	mov.w	r8, #0
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1a2      	bne.n	8008644 <_strtod_l+0x804>
 80086fe:	e5ed      	b.n	80082dc <_strtod_l+0x49c>
 8008700:	f04f 33ff 	mov.w	r3, #4294967295
 8008704:	e7e9      	b.n	80086da <_strtod_l+0x89a>
 8008706:	4613      	mov	r3, r2
 8008708:	e7e7      	b.n	80086da <_strtod_l+0x89a>
 800870a:	ea53 0308 	orrs.w	r3, r3, r8
 800870e:	d08a      	beq.n	8008626 <_strtod_l+0x7e6>
 8008710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008712:	b1e3      	cbz	r3, 800874e <_strtod_l+0x90e>
 8008714:	ea13 0f0a 	tst.w	r3, sl
 8008718:	d0ee      	beq.n	80086f8 <_strtod_l+0x8b8>
 800871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871c:	9a04      	ldr	r2, [sp, #16]
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	b1c3      	cbz	r3, 8008756 <_strtod_l+0x916>
 8008724:	f7ff fb6d 	bl	8007e02 <sulp>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	ec51 0b18 	vmov	r0, r1, d8
 8008730:	f7f7 fdac 	bl	800028c <__adddf3>
 8008734:	4680      	mov	r8, r0
 8008736:	4689      	mov	r9, r1
 8008738:	e7de      	b.n	80086f8 <_strtod_l+0x8b8>
 800873a:	4013      	ands	r3, r2
 800873c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008740:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008744:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008748:	f04f 38ff 	mov.w	r8, #4294967295
 800874c:	e7d4      	b.n	80086f8 <_strtod_l+0x8b8>
 800874e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008750:	ea13 0f08 	tst.w	r3, r8
 8008754:	e7e0      	b.n	8008718 <_strtod_l+0x8d8>
 8008756:	f7ff fb54 	bl	8007e02 <sulp>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	ec51 0b18 	vmov	r0, r1, d8
 8008762:	f7f7 fd91 	bl	8000288 <__aeabi_dsub>
 8008766:	2200      	movs	r2, #0
 8008768:	2300      	movs	r3, #0
 800876a:	4680      	mov	r8, r0
 800876c:	4689      	mov	r9, r1
 800876e:	f7f8 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008772:	2800      	cmp	r0, #0
 8008774:	d0c0      	beq.n	80086f8 <_strtod_l+0x8b8>
 8008776:	e618      	b.n	80083aa <_strtod_l+0x56a>
 8008778:	fffffc02 	.word	0xfffffc02
 800877c:	7ff00000 	.word	0x7ff00000
 8008780:	39500000 	.word	0x39500000
 8008784:	000fffff 	.word	0x000fffff
 8008788:	7fefffff 	.word	0x7fefffff
 800878c:	0800c820 	.word	0x0800c820
 8008790:	4659      	mov	r1, fp
 8008792:	4628      	mov	r0, r5
 8008794:	f003 f8ae 	bl	800b8f4 <__ratio>
 8008798:	ec57 6b10 	vmov	r6, r7, d0
 800879c:	ee10 0a10 	vmov	r0, s0
 80087a0:	2200      	movs	r2, #0
 80087a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f9a2 	bl	8000af0 <__aeabi_dcmple>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d071      	beq.n	8008894 <_strtod_l+0xa54>
 80087b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d17c      	bne.n	80088b0 <_strtod_l+0xa70>
 80087b6:	f1b8 0f00 	cmp.w	r8, #0
 80087ba:	d15a      	bne.n	8008872 <_strtod_l+0xa32>
 80087bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d15d      	bne.n	8008880 <_strtod_l+0xa40>
 80087c4:	4b90      	ldr	r3, [pc, #576]	; (8008a08 <_strtod_l+0xbc8>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f986 	bl	8000adc <__aeabi_dcmplt>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d15c      	bne.n	800888e <_strtod_l+0xa4e>
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	4b8c      	ldr	r3, [pc, #560]	; (8008a0c <_strtod_l+0xbcc>)
 80087da:	2200      	movs	r2, #0
 80087dc:	f7f7 ff0c 	bl	80005f8 <__aeabi_dmul>
 80087e0:	4606      	mov	r6, r0
 80087e2:	460f      	mov	r7, r1
 80087e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80087e8:	9606      	str	r6, [sp, #24]
 80087ea:	9307      	str	r3, [sp, #28]
 80087ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80087f4:	4b86      	ldr	r3, [pc, #536]	; (8008a10 <_strtod_l+0xbd0>)
 80087f6:	ea0a 0303 	and.w	r3, sl, r3
 80087fa:	930d      	str	r3, [sp, #52]	; 0x34
 80087fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087fe:	4b85      	ldr	r3, [pc, #532]	; (8008a14 <_strtod_l+0xbd4>)
 8008800:	429a      	cmp	r2, r3
 8008802:	f040 8090 	bne.w	8008926 <_strtod_l+0xae6>
 8008806:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800880a:	ec49 8b10 	vmov	d0, r8, r9
 800880e:	f002 ffa7 	bl	800b760 <__ulp>
 8008812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008816:	ec51 0b10 	vmov	r0, r1, d0
 800881a:	f7f7 feed 	bl	80005f8 <__aeabi_dmul>
 800881e:	4642      	mov	r2, r8
 8008820:	464b      	mov	r3, r9
 8008822:	f7f7 fd33 	bl	800028c <__adddf3>
 8008826:	460b      	mov	r3, r1
 8008828:	4979      	ldr	r1, [pc, #484]	; (8008a10 <_strtod_l+0xbd0>)
 800882a:	4a7b      	ldr	r2, [pc, #492]	; (8008a18 <_strtod_l+0xbd8>)
 800882c:	4019      	ands	r1, r3
 800882e:	4291      	cmp	r1, r2
 8008830:	4680      	mov	r8, r0
 8008832:	d944      	bls.n	80088be <_strtod_l+0xa7e>
 8008834:	ee18 2a90 	vmov	r2, s17
 8008838:	4b78      	ldr	r3, [pc, #480]	; (8008a1c <_strtod_l+0xbdc>)
 800883a:	429a      	cmp	r2, r3
 800883c:	d104      	bne.n	8008848 <_strtod_l+0xa08>
 800883e:	ee18 3a10 	vmov	r3, s16
 8008842:	3301      	adds	r3, #1
 8008844:	f43f ad40 	beq.w	80082c8 <_strtod_l+0x488>
 8008848:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008a1c <_strtod_l+0xbdc>
 800884c:	f04f 38ff 	mov.w	r8, #4294967295
 8008850:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008852:	4620      	mov	r0, r4
 8008854:	f002 fc58 	bl	800b108 <_Bfree>
 8008858:	9905      	ldr	r1, [sp, #20]
 800885a:	4620      	mov	r0, r4
 800885c:	f002 fc54 	bl	800b108 <_Bfree>
 8008860:	4659      	mov	r1, fp
 8008862:	4620      	mov	r0, r4
 8008864:	f002 fc50 	bl	800b108 <_Bfree>
 8008868:	4629      	mov	r1, r5
 800886a:	4620      	mov	r0, r4
 800886c:	f002 fc4c 	bl	800b108 <_Bfree>
 8008870:	e609      	b.n	8008486 <_strtod_l+0x646>
 8008872:	f1b8 0f01 	cmp.w	r8, #1
 8008876:	d103      	bne.n	8008880 <_strtod_l+0xa40>
 8008878:	f1b9 0f00 	cmp.w	r9, #0
 800887c:	f43f ad95 	beq.w	80083aa <_strtod_l+0x56a>
 8008880:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80089d8 <_strtod_l+0xb98>
 8008884:	4f60      	ldr	r7, [pc, #384]	; (8008a08 <_strtod_l+0xbc8>)
 8008886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800888a:	2600      	movs	r6, #0
 800888c:	e7ae      	b.n	80087ec <_strtod_l+0x9ac>
 800888e:	4f5f      	ldr	r7, [pc, #380]	; (8008a0c <_strtod_l+0xbcc>)
 8008890:	2600      	movs	r6, #0
 8008892:	e7a7      	b.n	80087e4 <_strtod_l+0x9a4>
 8008894:	4b5d      	ldr	r3, [pc, #372]	; (8008a0c <_strtod_l+0xbcc>)
 8008896:	4630      	mov	r0, r6
 8008898:	4639      	mov	r1, r7
 800889a:	2200      	movs	r2, #0
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d09c      	beq.n	80087e4 <_strtod_l+0x9a4>
 80088aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088ae:	e79d      	b.n	80087ec <_strtod_l+0x9ac>
 80088b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80089e0 <_strtod_l+0xba0>
 80088b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088b8:	ec57 6b17 	vmov	r6, r7, d7
 80088bc:	e796      	b.n	80087ec <_strtod_l+0x9ac>
 80088be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	46ca      	mov	sl, r9
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1c2      	bne.n	8008850 <_strtod_l+0xa10>
 80088ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088d0:	0d1b      	lsrs	r3, r3, #20
 80088d2:	051b      	lsls	r3, r3, #20
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d1bb      	bne.n	8008850 <_strtod_l+0xa10>
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f8 f9ec 	bl	8000cb8 <__aeabi_d2lz>
 80088e0:	f7f7 fe5c 	bl	800059c <__aeabi_l2d>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4630      	mov	r0, r6
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f7 fccc 	bl	8000288 <__aeabi_dsub>
 80088f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088f6:	ea43 0308 	orr.w	r3, r3, r8
 80088fa:	4313      	orrs	r3, r2
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	d054      	beq.n	80089ac <_strtod_l+0xb6c>
 8008902:	a339      	add	r3, pc, #228	; (adr r3, 80089e8 <_strtod_l+0xba8>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f8 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800890c:	2800      	cmp	r0, #0
 800890e:	f47f ace5 	bne.w	80082dc <_strtod_l+0x49c>
 8008912:	a337      	add	r3, pc, #220	; (adr r3, 80089f0 <_strtod_l+0xbb0>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8008920:	2800      	cmp	r0, #0
 8008922:	d095      	beq.n	8008850 <_strtod_l+0xa10>
 8008924:	e4da      	b.n	80082dc <_strtod_l+0x49c>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	b333      	cbz	r3, 8008978 <_strtod_l+0xb38>
 800892a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800892c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008930:	d822      	bhi.n	8008978 <_strtod_l+0xb38>
 8008932:	a331      	add	r3, pc, #196	; (adr r3, 80089f8 <_strtod_l+0xbb8>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	4630      	mov	r0, r6
 800893a:	4639      	mov	r1, r7
 800893c:	f7f8 f8d8 	bl	8000af0 <__aeabi_dcmple>
 8008940:	b1a0      	cbz	r0, 800896c <_strtod_l+0xb2c>
 8008942:	4639      	mov	r1, r7
 8008944:	4630      	mov	r0, r6
 8008946:	f7f8 f92f 	bl	8000ba8 <__aeabi_d2uiz>
 800894a:	2801      	cmp	r0, #1
 800894c:	bf38      	it	cc
 800894e:	2001      	movcc	r0, #1
 8008950:	f7f7 fdd8 	bl	8000504 <__aeabi_ui2d>
 8008954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	bb23      	cbnz	r3, 80089a6 <_strtod_l+0xb66>
 800895c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008960:	9010      	str	r0, [sp, #64]	; 0x40
 8008962:	9311      	str	r3, [sp, #68]	; 0x44
 8008964:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008968:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800896c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800896e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008970:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	930f      	str	r3, [sp, #60]	; 0x3c
 8008978:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800897c:	eeb0 0a48 	vmov.f32	s0, s16
 8008980:	eef0 0a68 	vmov.f32	s1, s17
 8008984:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008988:	f002 feea 	bl	800b760 <__ulp>
 800898c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008990:	ec53 2b10 	vmov	r2, r3, d0
 8008994:	f7f7 fe30 	bl	80005f8 <__aeabi_dmul>
 8008998:	ec53 2b18 	vmov	r2, r3, d8
 800899c:	f7f7 fc76 	bl	800028c <__adddf3>
 80089a0:	4680      	mov	r8, r0
 80089a2:	4689      	mov	r9, r1
 80089a4:	e78d      	b.n	80088c2 <_strtod_l+0xa82>
 80089a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80089aa:	e7db      	b.n	8008964 <_strtod_l+0xb24>
 80089ac:	a314      	add	r3, pc, #80	; (adr r3, 8008a00 <_strtod_l+0xbc0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f8 f893 	bl	8000adc <__aeabi_dcmplt>
 80089b6:	e7b3      	b.n	8008920 <_strtod_l+0xae0>
 80089b8:	2300      	movs	r3, #0
 80089ba:	930a      	str	r3, [sp, #40]	; 0x28
 80089bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	f7ff ba7c 	b.w	8007ebe <_strtod_l+0x7e>
 80089c6:	2a65      	cmp	r2, #101	; 0x65
 80089c8:	f43f ab75 	beq.w	80080b6 <_strtod_l+0x276>
 80089cc:	2a45      	cmp	r2, #69	; 0x45
 80089ce:	f43f ab72 	beq.w	80080b6 <_strtod_l+0x276>
 80089d2:	2301      	movs	r3, #1
 80089d4:	f7ff bbaa 	b.w	800812c <_strtod_l+0x2ec>
 80089d8:	00000000 	.word	0x00000000
 80089dc:	bff00000 	.word	0xbff00000
 80089e0:	00000000 	.word	0x00000000
 80089e4:	3ff00000 	.word	0x3ff00000
 80089e8:	94a03595 	.word	0x94a03595
 80089ec:	3fdfffff 	.word	0x3fdfffff
 80089f0:	35afe535 	.word	0x35afe535
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	ffc00000 	.word	0xffc00000
 80089fc:	41dfffff 	.word	0x41dfffff
 8008a00:	94a03595 	.word	0x94a03595
 8008a04:	3fcfffff 	.word	0x3fcfffff
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	3fe00000 	.word	0x3fe00000
 8008a10:	7ff00000 	.word	0x7ff00000
 8008a14:	7fe00000 	.word	0x7fe00000
 8008a18:	7c9fffff 	.word	0x7c9fffff
 8008a1c:	7fefffff 	.word	0x7fefffff

08008a20 <_strtod_r>:
 8008a20:	4b01      	ldr	r3, [pc, #4]	; (8008a28 <_strtod_r+0x8>)
 8008a22:	f7ff ba0d 	b.w	8007e40 <_strtod_l>
 8008a26:	bf00      	nop
 8008a28:	20000018 	.word	0x20000018

08008a2c <strtod>:
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	4601      	mov	r1, r0
 8008a30:	4802      	ldr	r0, [pc, #8]	; (8008a3c <strtod+0x10>)
 8008a32:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <strtod+0x14>)
 8008a34:	6800      	ldr	r0, [r0, #0]
 8008a36:	f7ff ba03 	b.w	8007e40 <_strtod_l>
 8008a3a:	bf00      	nop
 8008a3c:	200001d0 	.word	0x200001d0
 8008a40:	20000018 	.word	0x20000018

08008a44 <__cvt>:
 8008a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	ec55 4b10 	vmov	r4, r5, d0
 8008a4c:	2d00      	cmp	r5, #0
 8008a4e:	460e      	mov	r6, r1
 8008a50:	4619      	mov	r1, r3
 8008a52:	462b      	mov	r3, r5
 8008a54:	bfbb      	ittet	lt
 8008a56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a5a:	461d      	movlt	r5, r3
 8008a5c:	2300      	movge	r3, #0
 8008a5e:	232d      	movlt	r3, #45	; 0x2d
 8008a60:	700b      	strb	r3, [r1, #0]
 8008a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a68:	4691      	mov	r9, r2
 8008a6a:	f023 0820 	bic.w	r8, r3, #32
 8008a6e:	bfbc      	itt	lt
 8008a70:	4622      	movlt	r2, r4
 8008a72:	4614      	movlt	r4, r2
 8008a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a78:	d005      	beq.n	8008a86 <__cvt+0x42>
 8008a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a7e:	d100      	bne.n	8008a82 <__cvt+0x3e>
 8008a80:	3601      	adds	r6, #1
 8008a82:	2102      	movs	r1, #2
 8008a84:	e000      	b.n	8008a88 <__cvt+0x44>
 8008a86:	2103      	movs	r1, #3
 8008a88:	ab03      	add	r3, sp, #12
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	ab02      	add	r3, sp, #8
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	ec45 4b10 	vmov	d0, r4, r5
 8008a94:	4653      	mov	r3, sl
 8008a96:	4632      	mov	r2, r6
 8008a98:	f001 f94e 	bl	8009d38 <_dtoa_r>
 8008a9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	d102      	bne.n	8008aaa <__cvt+0x66>
 8008aa4:	f019 0f01 	tst.w	r9, #1
 8008aa8:	d022      	beq.n	8008af0 <__cvt+0xac>
 8008aaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008aae:	eb07 0906 	add.w	r9, r7, r6
 8008ab2:	d110      	bne.n	8008ad6 <__cvt+0x92>
 8008ab4:	783b      	ldrb	r3, [r7, #0]
 8008ab6:	2b30      	cmp	r3, #48	; 0x30
 8008ab8:	d10a      	bne.n	8008ad0 <__cvt+0x8c>
 8008aba:	2200      	movs	r2, #0
 8008abc:	2300      	movs	r3, #0
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f8 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac6:	b918      	cbnz	r0, 8008ad0 <__cvt+0x8c>
 8008ac8:	f1c6 0601 	rsb	r6, r6, #1
 8008acc:	f8ca 6000 	str.w	r6, [sl]
 8008ad0:	f8da 3000 	ldr.w	r3, [sl]
 8008ad4:	4499      	add	r9, r3
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ae2:	b108      	cbz	r0, 8008ae8 <__cvt+0xa4>
 8008ae4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ae8:	2230      	movs	r2, #48	; 0x30
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	454b      	cmp	r3, r9
 8008aee:	d307      	bcc.n	8008b00 <__cvt+0xbc>
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008af4:	1bdb      	subs	r3, r3, r7
 8008af6:	4638      	mov	r0, r7
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	b004      	add	sp, #16
 8008afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b00:	1c59      	adds	r1, r3, #1
 8008b02:	9103      	str	r1, [sp, #12]
 8008b04:	701a      	strb	r2, [r3, #0]
 8008b06:	e7f0      	b.n	8008aea <__cvt+0xa6>

08008b08 <__exponent>:
 8008b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	bfb8      	it	lt
 8008b10:	4249      	neglt	r1, r1
 8008b12:	f803 2b02 	strb.w	r2, [r3], #2
 8008b16:	bfb4      	ite	lt
 8008b18:	222d      	movlt	r2, #45	; 0x2d
 8008b1a:	222b      	movge	r2, #43	; 0x2b
 8008b1c:	2909      	cmp	r1, #9
 8008b1e:	7042      	strb	r2, [r0, #1]
 8008b20:	dd2a      	ble.n	8008b78 <__exponent+0x70>
 8008b22:	f10d 0207 	add.w	r2, sp, #7
 8008b26:	4617      	mov	r7, r2
 8008b28:	260a      	movs	r6, #10
 8008b2a:	4694      	mov	ip, r2
 8008b2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b30:	fb06 1415 	mls	r4, r6, r5, r1
 8008b34:	3430      	adds	r4, #48	; 0x30
 8008b36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	2c63      	cmp	r4, #99	; 0x63
 8008b3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b42:	4629      	mov	r1, r5
 8008b44:	dcf1      	bgt.n	8008b2a <__exponent+0x22>
 8008b46:	3130      	adds	r1, #48	; 0x30
 8008b48:	f1ac 0402 	sub.w	r4, ip, #2
 8008b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b50:	1c41      	adds	r1, r0, #1
 8008b52:	4622      	mov	r2, r4
 8008b54:	42ba      	cmp	r2, r7
 8008b56:	d30a      	bcc.n	8008b6e <__exponent+0x66>
 8008b58:	f10d 0209 	add.w	r2, sp, #9
 8008b5c:	eba2 020c 	sub.w	r2, r2, ip
 8008b60:	42bc      	cmp	r4, r7
 8008b62:	bf88      	it	hi
 8008b64:	2200      	movhi	r2, #0
 8008b66:	4413      	add	r3, r2
 8008b68:	1a18      	subs	r0, r3, r0
 8008b6a:	b003      	add	sp, #12
 8008b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b76:	e7ed      	b.n	8008b54 <__exponent+0x4c>
 8008b78:	2330      	movs	r3, #48	; 0x30
 8008b7a:	3130      	adds	r1, #48	; 0x30
 8008b7c:	7083      	strb	r3, [r0, #2]
 8008b7e:	70c1      	strb	r1, [r0, #3]
 8008b80:	1d03      	adds	r3, r0, #4
 8008b82:	e7f1      	b.n	8008b68 <__exponent+0x60>

08008b84 <_printf_float>:
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	ed2d 8b02 	vpush	{d8}
 8008b8c:	b08d      	sub	sp, #52	; 0x34
 8008b8e:	460c      	mov	r4, r1
 8008b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b94:	4616      	mov	r6, r2
 8008b96:	461f      	mov	r7, r3
 8008b98:	4605      	mov	r5, r0
 8008b9a:	f000 ff83 	bl	8009aa4 <_localeconv_r>
 8008b9e:	f8d0 a000 	ldr.w	sl, [r0]
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f7f7 fb64 	bl	8000270 <strlen>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	930a      	str	r3, [sp, #40]	; 0x28
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008bb8:	3307      	adds	r3, #7
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	f103 0208 	add.w	r2, r3, #8
 8008bc2:	f8c8 2000 	str.w	r2, [r8]
 8008bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bce:	9307      	str	r3, [sp, #28]
 8008bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bd4:	ee08 0a10 	vmov	s16, r0
 8008bd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008be0:	4b9e      	ldr	r3, [pc, #632]	; (8008e5c <_printf_float+0x2d8>)
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	f7f7 ffa1 	bl	8000b2c <__aeabi_dcmpun>
 8008bea:	bb88      	cbnz	r0, 8008c50 <_printf_float+0xcc>
 8008bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bf0:	4b9a      	ldr	r3, [pc, #616]	; (8008e5c <_printf_float+0x2d8>)
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf6:	f7f7 ff7b 	bl	8000af0 <__aeabi_dcmple>
 8008bfa:	bb48      	cbnz	r0, 8008c50 <_printf_float+0xcc>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	f7f7 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8008c08:	b110      	cbz	r0, 8008c10 <_printf_float+0x8c>
 8008c0a:	232d      	movs	r3, #45	; 0x2d
 8008c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c10:	4a93      	ldr	r2, [pc, #588]	; (8008e60 <_printf_float+0x2dc>)
 8008c12:	4b94      	ldr	r3, [pc, #592]	; (8008e64 <_printf_float+0x2e0>)
 8008c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c18:	bf94      	ite	ls
 8008c1a:	4690      	movls	r8, r2
 8008c1c:	4698      	movhi	r8, r3
 8008c1e:	2303      	movs	r3, #3
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	9b05      	ldr	r3, [sp, #20]
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	f04f 0900 	mov.w	r9, #0
 8008c2e:	9700      	str	r7, [sp, #0]
 8008c30:	4633      	mov	r3, r6
 8008c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c34:	4621      	mov	r1, r4
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 f9da 	bl	8008ff0 <_printf_common>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	f040 8090 	bne.w	8008d62 <_printf_float+0x1de>
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	b00d      	add	sp, #52	; 0x34
 8008c48:	ecbd 8b02 	vpop	{d8}
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	4649      	mov	r1, r9
 8008c58:	f7f7 ff68 	bl	8000b2c <__aeabi_dcmpun>
 8008c5c:	b140      	cbz	r0, 8008c70 <_printf_float+0xec>
 8008c5e:	464b      	mov	r3, r9
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfbc      	itt	lt
 8008c64:	232d      	movlt	r3, #45	; 0x2d
 8008c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c6a:	4a7f      	ldr	r2, [pc, #508]	; (8008e68 <_printf_float+0x2e4>)
 8008c6c:	4b7f      	ldr	r3, [pc, #508]	; (8008e6c <_printf_float+0x2e8>)
 8008c6e:	e7d1      	b.n	8008c14 <_printf_float+0x90>
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c76:	9206      	str	r2, [sp, #24]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	d13f      	bne.n	8008cfc <_printf_float+0x178>
 8008c7c:	2306      	movs	r3, #6
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	9b05      	ldr	r3, [sp, #20]
 8008c82:	6861      	ldr	r1, [r4, #4]
 8008c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9303      	str	r3, [sp, #12]
 8008c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c92:	ab09      	add	r3, sp, #36	; 0x24
 8008c94:	ec49 8b10 	vmov	d0, r8, r9
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f7ff fecf 	bl	8008a44 <__cvt>
 8008ca6:	9b06      	ldr	r3, [sp, #24]
 8008ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008caa:	2b47      	cmp	r3, #71	; 0x47
 8008cac:	4680      	mov	r8, r0
 8008cae:	d108      	bne.n	8008cc2 <_printf_float+0x13e>
 8008cb0:	1cc8      	adds	r0, r1, #3
 8008cb2:	db02      	blt.n	8008cba <_printf_float+0x136>
 8008cb4:	6863      	ldr	r3, [r4, #4]
 8008cb6:	4299      	cmp	r1, r3
 8008cb8:	dd41      	ble.n	8008d3e <_printf_float+0x1ba>
 8008cba:	f1ab 0302 	sub.w	r3, fp, #2
 8008cbe:	fa5f fb83 	uxtb.w	fp, r3
 8008cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cc6:	d820      	bhi.n	8008d0a <_printf_float+0x186>
 8008cc8:	3901      	subs	r1, #1
 8008cca:	465a      	mov	r2, fp
 8008ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8008cd2:	f7ff ff19 	bl	8008b08 <__exponent>
 8008cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd8:	1813      	adds	r3, r2, r0
 8008cda:	2a01      	cmp	r2, #1
 8008cdc:	4681      	mov	r9, r0
 8008cde:	6123      	str	r3, [r4, #16]
 8008ce0:	dc02      	bgt.n	8008ce8 <_printf_float+0x164>
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	07d2      	lsls	r2, r2, #31
 8008ce6:	d501      	bpl.n	8008cec <_printf_float+0x168>
 8008ce8:	3301      	adds	r3, #1
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d09c      	beq.n	8008c2e <_printf_float+0xaa>
 8008cf4:	232d      	movs	r3, #45	; 0x2d
 8008cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cfa:	e798      	b.n	8008c2e <_printf_float+0xaa>
 8008cfc:	9a06      	ldr	r2, [sp, #24]
 8008cfe:	2a47      	cmp	r2, #71	; 0x47
 8008d00:	d1be      	bne.n	8008c80 <_printf_float+0xfc>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1bc      	bne.n	8008c80 <_printf_float+0xfc>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e7b9      	b.n	8008c7e <_printf_float+0xfa>
 8008d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d0e:	d118      	bne.n	8008d42 <_printf_float+0x1be>
 8008d10:	2900      	cmp	r1, #0
 8008d12:	6863      	ldr	r3, [r4, #4]
 8008d14:	dd0b      	ble.n	8008d2e <_printf_float+0x1aa>
 8008d16:	6121      	str	r1, [r4, #16]
 8008d18:	b913      	cbnz	r3, 8008d20 <_printf_float+0x19c>
 8008d1a:	6822      	ldr	r2, [r4, #0]
 8008d1c:	07d0      	lsls	r0, r2, #31
 8008d1e:	d502      	bpl.n	8008d26 <_printf_float+0x1a2>
 8008d20:	3301      	adds	r3, #1
 8008d22:	440b      	add	r3, r1
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d28:	f04f 0900 	mov.w	r9, #0
 8008d2c:	e7de      	b.n	8008cec <_printf_float+0x168>
 8008d2e:	b913      	cbnz	r3, 8008d36 <_printf_float+0x1b2>
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	07d2      	lsls	r2, r2, #31
 8008d34:	d501      	bpl.n	8008d3a <_printf_float+0x1b6>
 8008d36:	3302      	adds	r3, #2
 8008d38:	e7f4      	b.n	8008d24 <_printf_float+0x1a0>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e7f2      	b.n	8008d24 <_printf_float+0x1a0>
 8008d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d44:	4299      	cmp	r1, r3
 8008d46:	db05      	blt.n	8008d54 <_printf_float+0x1d0>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	6121      	str	r1, [r4, #16]
 8008d4c:	07d8      	lsls	r0, r3, #31
 8008d4e:	d5ea      	bpl.n	8008d26 <_printf_float+0x1a2>
 8008d50:	1c4b      	adds	r3, r1, #1
 8008d52:	e7e7      	b.n	8008d24 <_printf_float+0x1a0>
 8008d54:	2900      	cmp	r1, #0
 8008d56:	bfd4      	ite	le
 8008d58:	f1c1 0202 	rsble	r2, r1, #2
 8008d5c:	2201      	movgt	r2, #1
 8008d5e:	4413      	add	r3, r2
 8008d60:	e7e0      	b.n	8008d24 <_printf_float+0x1a0>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	055a      	lsls	r2, r3, #21
 8008d66:	d407      	bmi.n	8008d78 <_printf_float+0x1f4>
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	4642      	mov	r2, r8
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	d12c      	bne.n	8008dd0 <_printf_float+0x24c>
 8008d76:	e764      	b.n	8008c42 <_printf_float+0xbe>
 8008d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d7c:	f240 80e0 	bls.w	8008f40 <_printf_float+0x3bc>
 8008d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	f7f7 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d034      	beq.n	8008dfa <_printf_float+0x276>
 8008d90:	4a37      	ldr	r2, [pc, #220]	; (8008e70 <_printf_float+0x2ec>)
 8008d92:	2301      	movs	r3, #1
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f af51 	beq.w	8008c42 <_printf_float+0xbe>
 8008da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008da4:	429a      	cmp	r2, r3
 8008da6:	db02      	blt.n	8008dae <_printf_float+0x22a>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	07d8      	lsls	r0, r3, #31
 8008dac:	d510      	bpl.n	8008dd0 <_printf_float+0x24c>
 8008dae:	ee18 3a10 	vmov	r3, s16
 8008db2:	4652      	mov	r2, sl
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af41 	beq.w	8008c42 <_printf_float+0xbe>
 8008dc0:	f04f 0800 	mov.w	r8, #0
 8008dc4:	f104 091a 	add.w	r9, r4, #26
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	4543      	cmp	r3, r8
 8008dce:	dc09      	bgt.n	8008de4 <_printf_float+0x260>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	079b      	lsls	r3, r3, #30
 8008dd4:	f100 8107 	bmi.w	8008fe6 <_printf_float+0x462>
 8008dd8:	68e0      	ldr	r0, [r4, #12]
 8008dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ddc:	4298      	cmp	r0, r3
 8008dde:	bfb8      	it	lt
 8008de0:	4618      	movlt	r0, r3
 8008de2:	e730      	b.n	8008c46 <_printf_float+0xc2>
 8008de4:	2301      	movs	r3, #1
 8008de6:	464a      	mov	r2, r9
 8008de8:	4631      	mov	r1, r6
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b8      	blx	r7
 8008dee:	3001      	adds	r0, #1
 8008df0:	f43f af27 	beq.w	8008c42 <_printf_float+0xbe>
 8008df4:	f108 0801 	add.w	r8, r8, #1
 8008df8:	e7e6      	b.n	8008dc8 <_printf_float+0x244>
 8008dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dc39      	bgt.n	8008e74 <_printf_float+0x2f0>
 8008e00:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <_printf_float+0x2ec>)
 8008e02:	2301      	movs	r3, #1
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b8      	blx	r7
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	f43f af19 	beq.w	8008c42 <_printf_float+0xbe>
 8008e10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e14:	4313      	orrs	r3, r2
 8008e16:	d102      	bne.n	8008e1e <_printf_float+0x29a>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	d5d8      	bpl.n	8008dd0 <_printf_float+0x24c>
 8008e1e:	ee18 3a10 	vmov	r3, s16
 8008e22:	4652      	mov	r2, sl
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f af09 	beq.w	8008c42 <_printf_float+0xbe>
 8008e30:	f04f 0900 	mov.w	r9, #0
 8008e34:	f104 0a1a 	add.w	sl, r4, #26
 8008e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3a:	425b      	negs	r3, r3
 8008e3c:	454b      	cmp	r3, r9
 8008e3e:	dc01      	bgt.n	8008e44 <_printf_float+0x2c0>
 8008e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e42:	e792      	b.n	8008d6a <_printf_float+0x1e6>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4652      	mov	r2, sl
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f aef7 	beq.w	8008c42 <_printf_float+0xbe>
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e7ee      	b.n	8008e38 <_printf_float+0x2b4>
 8008e5a:	bf00      	nop
 8008e5c:	7fefffff 	.word	0x7fefffff
 8008e60:	0800c848 	.word	0x0800c848
 8008e64:	0800c84c 	.word	0x0800c84c
 8008e68:	0800c850 	.word	0x0800c850
 8008e6c:	0800c854 	.word	0x0800c854
 8008e70:	0800c858 	.word	0x0800c858
 8008e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	bfa8      	it	ge
 8008e7c:	461a      	movge	r2, r3
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	4691      	mov	r9, r2
 8008e82:	dc37      	bgt.n	8008ef4 <_printf_float+0x370>
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e8c:	f104 021a 	add.w	r2, r4, #26
 8008e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	eba3 0309 	sub.w	r3, r3, r9
 8008e98:	455b      	cmp	r3, fp
 8008e9a:	dc33      	bgt.n	8008f04 <_printf_float+0x380>
 8008e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	db3b      	blt.n	8008f1c <_printf_float+0x398>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d438      	bmi.n	8008f1c <_printf_float+0x398>
 8008eaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008eae:	eba2 0903 	sub.w	r9, r2, r3
 8008eb2:	9b05      	ldr	r3, [sp, #20]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	4591      	cmp	r9, r2
 8008eb8:	bfa8      	it	ge
 8008eba:	4691      	movge	r9, r2
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	dc35      	bgt.n	8008f2e <_printf_float+0x3aa>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eca:	f104 0a1a 	add.w	sl, r4, #26
 8008ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	eba3 0309 	sub.w	r3, r3, r9
 8008ed8:	4543      	cmp	r3, r8
 8008eda:	f77f af79 	ble.w	8008dd0 <_printf_float+0x24c>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f43f aeaa 	beq.w	8008c42 <_printf_float+0xbe>
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	e7ec      	b.n	8008ece <_printf_float+0x34a>
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4642      	mov	r2, r8
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	d1c0      	bne.n	8008e84 <_printf_float+0x300>
 8008f02:	e69e      	b.n	8008c42 <_printf_float+0xbe>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	9205      	str	r2, [sp, #20]
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f43f ae97 	beq.w	8008c42 <_printf_float+0xbe>
 8008f14:	9a05      	ldr	r2, [sp, #20]
 8008f16:	f10b 0b01 	add.w	fp, fp, #1
 8008f1a:	e7b9      	b.n	8008e90 <_printf_float+0x30c>
 8008f1c:	ee18 3a10 	vmov	r3, s16
 8008f20:	4652      	mov	r2, sl
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d1be      	bne.n	8008eaa <_printf_float+0x326>
 8008f2c:	e689      	b.n	8008c42 <_printf_float+0xbe>
 8008f2e:	9a05      	ldr	r2, [sp, #20]
 8008f30:	464b      	mov	r3, r9
 8008f32:	4442      	add	r2, r8
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d1c1      	bne.n	8008ec2 <_printf_float+0x33e>
 8008f3e:	e680      	b.n	8008c42 <_printf_float+0xbe>
 8008f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f42:	2a01      	cmp	r2, #1
 8008f44:	dc01      	bgt.n	8008f4a <_printf_float+0x3c6>
 8008f46:	07db      	lsls	r3, r3, #31
 8008f48:	d53a      	bpl.n	8008fc0 <_printf_float+0x43c>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b8      	blx	r7
 8008f54:	3001      	adds	r0, #1
 8008f56:	f43f ae74 	beq.w	8008c42 <_printf_float+0xbe>
 8008f5a:	ee18 3a10 	vmov	r3, s16
 8008f5e:	4652      	mov	r2, sl
 8008f60:	4631      	mov	r1, r6
 8008f62:	4628      	mov	r0, r5
 8008f64:	47b8      	blx	r7
 8008f66:	3001      	adds	r0, #1
 8008f68:	f43f ae6b 	beq.w	8008c42 <_printf_float+0xbe>
 8008f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008f78:	f7f7 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f7c:	b9d8      	cbnz	r0, 8008fb6 <_printf_float+0x432>
 8008f7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f82:	f108 0201 	add.w	r2, r8, #1
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d10e      	bne.n	8008fae <_printf_float+0x42a>
 8008f90:	e657      	b.n	8008c42 <_printf_float+0xbe>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4652      	mov	r2, sl
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae50 	beq.w	8008c42 <_printf_float+0xbe>
 8008fa2:	f108 0801 	add.w	r8, r8, #1
 8008fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	4543      	cmp	r3, r8
 8008fac:	dcf1      	bgt.n	8008f92 <_printf_float+0x40e>
 8008fae:	464b      	mov	r3, r9
 8008fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fb4:	e6da      	b.n	8008d6c <_printf_float+0x1e8>
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	f104 0a1a 	add.w	sl, r4, #26
 8008fbe:	e7f2      	b.n	8008fa6 <_printf_float+0x422>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	4642      	mov	r2, r8
 8008fc4:	e7df      	b.n	8008f86 <_printf_float+0x402>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	464a      	mov	r2, r9
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b8      	blx	r7
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f43f ae36 	beq.w	8008c42 <_printf_float+0xbe>
 8008fd6:	f108 0801 	add.w	r8, r8, #1
 8008fda:	68e3      	ldr	r3, [r4, #12]
 8008fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fde:	1a5b      	subs	r3, r3, r1
 8008fe0:	4543      	cmp	r3, r8
 8008fe2:	dcf0      	bgt.n	8008fc6 <_printf_float+0x442>
 8008fe4:	e6f8      	b.n	8008dd8 <_printf_float+0x254>
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	f104 0919 	add.w	r9, r4, #25
 8008fee:	e7f4      	b.n	8008fda <_printf_float+0x456>

08008ff0 <_printf_common>:
 8008ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	4699      	mov	r9, r3
 8008ff8:	688a      	ldr	r2, [r1, #8]
 8008ffa:	690b      	ldr	r3, [r1, #16]
 8008ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009000:	4293      	cmp	r3, r2
 8009002:	bfb8      	it	lt
 8009004:	4613      	movlt	r3, r2
 8009006:	6033      	str	r3, [r6, #0]
 8009008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800900c:	4607      	mov	r7, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b10a      	cbz	r2, 8009016 <_printf_common+0x26>
 8009012:	3301      	adds	r3, #1
 8009014:	6033      	str	r3, [r6, #0]
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	0699      	lsls	r1, r3, #26
 800901a:	bf42      	ittt	mi
 800901c:	6833      	ldrmi	r3, [r6, #0]
 800901e:	3302      	addmi	r3, #2
 8009020:	6033      	strmi	r3, [r6, #0]
 8009022:	6825      	ldr	r5, [r4, #0]
 8009024:	f015 0506 	ands.w	r5, r5, #6
 8009028:	d106      	bne.n	8009038 <_printf_common+0x48>
 800902a:	f104 0a19 	add.w	sl, r4, #25
 800902e:	68e3      	ldr	r3, [r4, #12]
 8009030:	6832      	ldr	r2, [r6, #0]
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	42ab      	cmp	r3, r5
 8009036:	dc26      	bgt.n	8009086 <_printf_common+0x96>
 8009038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800903c:	1e13      	subs	r3, r2, #0
 800903e:	6822      	ldr	r2, [r4, #0]
 8009040:	bf18      	it	ne
 8009042:	2301      	movne	r3, #1
 8009044:	0692      	lsls	r2, r2, #26
 8009046:	d42b      	bmi.n	80090a0 <_printf_common+0xb0>
 8009048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800904c:	4649      	mov	r1, r9
 800904e:	4638      	mov	r0, r7
 8009050:	47c0      	blx	r8
 8009052:	3001      	adds	r0, #1
 8009054:	d01e      	beq.n	8009094 <_printf_common+0xa4>
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	f003 0306 	and.w	r3, r3, #6
 800905e:	2b04      	cmp	r3, #4
 8009060:	bf02      	ittt	eq
 8009062:	68e5      	ldreq	r5, [r4, #12]
 8009064:	6833      	ldreq	r3, [r6, #0]
 8009066:	1aed      	subeq	r5, r5, r3
 8009068:	68a3      	ldr	r3, [r4, #8]
 800906a:	bf0c      	ite	eq
 800906c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009070:	2500      	movne	r5, #0
 8009072:	4293      	cmp	r3, r2
 8009074:	bfc4      	itt	gt
 8009076:	1a9b      	subgt	r3, r3, r2
 8009078:	18ed      	addgt	r5, r5, r3
 800907a:	2600      	movs	r6, #0
 800907c:	341a      	adds	r4, #26
 800907e:	42b5      	cmp	r5, r6
 8009080:	d11a      	bne.n	80090b8 <_printf_common+0xc8>
 8009082:	2000      	movs	r0, #0
 8009084:	e008      	b.n	8009098 <_printf_common+0xa8>
 8009086:	2301      	movs	r3, #1
 8009088:	4652      	mov	r2, sl
 800908a:	4649      	mov	r1, r9
 800908c:	4638      	mov	r0, r7
 800908e:	47c0      	blx	r8
 8009090:	3001      	adds	r0, #1
 8009092:	d103      	bne.n	800909c <_printf_common+0xac>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909c:	3501      	adds	r5, #1
 800909e:	e7c6      	b.n	800902e <_printf_common+0x3e>
 80090a0:	18e1      	adds	r1, r4, r3
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	2030      	movs	r0, #48	; 0x30
 80090a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090aa:	4422      	add	r2, r4
 80090ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090b4:	3302      	adds	r3, #2
 80090b6:	e7c7      	b.n	8009048 <_printf_common+0x58>
 80090b8:	2301      	movs	r3, #1
 80090ba:	4622      	mov	r2, r4
 80090bc:	4649      	mov	r1, r9
 80090be:	4638      	mov	r0, r7
 80090c0:	47c0      	blx	r8
 80090c2:	3001      	adds	r0, #1
 80090c4:	d0e6      	beq.n	8009094 <_printf_common+0xa4>
 80090c6:	3601      	adds	r6, #1
 80090c8:	e7d9      	b.n	800907e <_printf_common+0x8e>
	...

080090cc <_printf_i>:
 80090cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	7e0f      	ldrb	r7, [r1, #24]
 80090d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090d4:	2f78      	cmp	r7, #120	; 0x78
 80090d6:	4691      	mov	r9, r2
 80090d8:	4680      	mov	r8, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	469a      	mov	sl, r3
 80090de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090e2:	d807      	bhi.n	80090f4 <_printf_i+0x28>
 80090e4:	2f62      	cmp	r7, #98	; 0x62
 80090e6:	d80a      	bhi.n	80090fe <_printf_i+0x32>
 80090e8:	2f00      	cmp	r7, #0
 80090ea:	f000 80d4 	beq.w	8009296 <_printf_i+0x1ca>
 80090ee:	2f58      	cmp	r7, #88	; 0x58
 80090f0:	f000 80c0 	beq.w	8009274 <_printf_i+0x1a8>
 80090f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090fc:	e03a      	b.n	8009174 <_printf_i+0xa8>
 80090fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009102:	2b15      	cmp	r3, #21
 8009104:	d8f6      	bhi.n	80090f4 <_printf_i+0x28>
 8009106:	a101      	add	r1, pc, #4	; (adr r1, 800910c <_printf_i+0x40>)
 8009108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800910c:	08009165 	.word	0x08009165
 8009110:	08009179 	.word	0x08009179
 8009114:	080090f5 	.word	0x080090f5
 8009118:	080090f5 	.word	0x080090f5
 800911c:	080090f5 	.word	0x080090f5
 8009120:	080090f5 	.word	0x080090f5
 8009124:	08009179 	.word	0x08009179
 8009128:	080090f5 	.word	0x080090f5
 800912c:	080090f5 	.word	0x080090f5
 8009130:	080090f5 	.word	0x080090f5
 8009134:	080090f5 	.word	0x080090f5
 8009138:	0800927d 	.word	0x0800927d
 800913c:	080091a5 	.word	0x080091a5
 8009140:	08009237 	.word	0x08009237
 8009144:	080090f5 	.word	0x080090f5
 8009148:	080090f5 	.word	0x080090f5
 800914c:	0800929f 	.word	0x0800929f
 8009150:	080090f5 	.word	0x080090f5
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080090f5 	.word	0x080090f5
 800915c:	080090f5 	.word	0x080090f5
 8009160:	0800923f 	.word	0x0800923f
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	1d1a      	adds	r2, r3, #4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	602a      	str	r2, [r5, #0]
 800916c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009174:	2301      	movs	r3, #1
 8009176:	e09f      	b.n	80092b8 <_printf_i+0x1ec>
 8009178:	6820      	ldr	r0, [r4, #0]
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	0607      	lsls	r7, r0, #24
 800917e:	f103 0104 	add.w	r1, r3, #4
 8009182:	6029      	str	r1, [r5, #0]
 8009184:	d501      	bpl.n	800918a <_printf_i+0xbe>
 8009186:	681e      	ldr	r6, [r3, #0]
 8009188:	e003      	b.n	8009192 <_printf_i+0xc6>
 800918a:	0646      	lsls	r6, r0, #25
 800918c:	d5fb      	bpl.n	8009186 <_printf_i+0xba>
 800918e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009192:	2e00      	cmp	r6, #0
 8009194:	da03      	bge.n	800919e <_printf_i+0xd2>
 8009196:	232d      	movs	r3, #45	; 0x2d
 8009198:	4276      	negs	r6, r6
 800919a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919e:	485a      	ldr	r0, [pc, #360]	; (8009308 <_printf_i+0x23c>)
 80091a0:	230a      	movs	r3, #10
 80091a2:	e012      	b.n	80091ca <_printf_i+0xfe>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	1d19      	adds	r1, r3, #4
 80091aa:	6029      	str	r1, [r5, #0]
 80091ac:	0605      	lsls	r5, r0, #24
 80091ae:	d501      	bpl.n	80091b4 <_printf_i+0xe8>
 80091b0:	681e      	ldr	r6, [r3, #0]
 80091b2:	e002      	b.n	80091ba <_printf_i+0xee>
 80091b4:	0641      	lsls	r1, r0, #25
 80091b6:	d5fb      	bpl.n	80091b0 <_printf_i+0xe4>
 80091b8:	881e      	ldrh	r6, [r3, #0]
 80091ba:	4853      	ldr	r0, [pc, #332]	; (8009308 <_printf_i+0x23c>)
 80091bc:	2f6f      	cmp	r7, #111	; 0x6f
 80091be:	bf0c      	ite	eq
 80091c0:	2308      	moveq	r3, #8
 80091c2:	230a      	movne	r3, #10
 80091c4:	2100      	movs	r1, #0
 80091c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ca:	6865      	ldr	r5, [r4, #4]
 80091cc:	60a5      	str	r5, [r4, #8]
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	bfa2      	ittt	ge
 80091d2:	6821      	ldrge	r1, [r4, #0]
 80091d4:	f021 0104 	bicge.w	r1, r1, #4
 80091d8:	6021      	strge	r1, [r4, #0]
 80091da:	b90e      	cbnz	r6, 80091e0 <_printf_i+0x114>
 80091dc:	2d00      	cmp	r5, #0
 80091de:	d04b      	beq.n	8009278 <_printf_i+0x1ac>
 80091e0:	4615      	mov	r5, r2
 80091e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80091e6:	fb03 6711 	mls	r7, r3, r1, r6
 80091ea:	5dc7      	ldrb	r7, [r0, r7]
 80091ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091f0:	4637      	mov	r7, r6
 80091f2:	42bb      	cmp	r3, r7
 80091f4:	460e      	mov	r6, r1
 80091f6:	d9f4      	bls.n	80091e2 <_printf_i+0x116>
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d10b      	bne.n	8009214 <_printf_i+0x148>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	07de      	lsls	r6, r3, #31
 8009200:	d508      	bpl.n	8009214 <_printf_i+0x148>
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	6861      	ldr	r1, [r4, #4]
 8009206:	4299      	cmp	r1, r3
 8009208:	bfde      	ittt	le
 800920a:	2330      	movle	r3, #48	; 0x30
 800920c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009214:	1b52      	subs	r2, r2, r5
 8009216:	6122      	str	r2, [r4, #16]
 8009218:	f8cd a000 	str.w	sl, [sp]
 800921c:	464b      	mov	r3, r9
 800921e:	aa03      	add	r2, sp, #12
 8009220:	4621      	mov	r1, r4
 8009222:	4640      	mov	r0, r8
 8009224:	f7ff fee4 	bl	8008ff0 <_printf_common>
 8009228:	3001      	adds	r0, #1
 800922a:	d14a      	bne.n	80092c2 <_printf_i+0x1f6>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	b004      	add	sp, #16
 8009232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f043 0320 	orr.w	r3, r3, #32
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	4833      	ldr	r0, [pc, #204]	; (800930c <_printf_i+0x240>)
 8009240:	2778      	movs	r7, #120	; 0x78
 8009242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	6829      	ldr	r1, [r5, #0]
 800924a:	061f      	lsls	r7, r3, #24
 800924c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009250:	d402      	bmi.n	8009258 <_printf_i+0x18c>
 8009252:	065f      	lsls	r7, r3, #25
 8009254:	bf48      	it	mi
 8009256:	b2b6      	uxthmi	r6, r6
 8009258:	07df      	lsls	r7, r3, #31
 800925a:	bf48      	it	mi
 800925c:	f043 0320 	orrmi.w	r3, r3, #32
 8009260:	6029      	str	r1, [r5, #0]
 8009262:	bf48      	it	mi
 8009264:	6023      	strmi	r3, [r4, #0]
 8009266:	b91e      	cbnz	r6, 8009270 <_printf_i+0x1a4>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	f023 0320 	bic.w	r3, r3, #32
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	2310      	movs	r3, #16
 8009272:	e7a7      	b.n	80091c4 <_printf_i+0xf8>
 8009274:	4824      	ldr	r0, [pc, #144]	; (8009308 <_printf_i+0x23c>)
 8009276:	e7e4      	b.n	8009242 <_printf_i+0x176>
 8009278:	4615      	mov	r5, r2
 800927a:	e7bd      	b.n	80091f8 <_printf_i+0x12c>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	6826      	ldr	r6, [r4, #0]
 8009280:	6961      	ldr	r1, [r4, #20]
 8009282:	1d18      	adds	r0, r3, #4
 8009284:	6028      	str	r0, [r5, #0]
 8009286:	0635      	lsls	r5, r6, #24
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	d501      	bpl.n	8009290 <_printf_i+0x1c4>
 800928c:	6019      	str	r1, [r3, #0]
 800928e:	e002      	b.n	8009296 <_printf_i+0x1ca>
 8009290:	0670      	lsls	r0, r6, #25
 8009292:	d5fb      	bpl.n	800928c <_printf_i+0x1c0>
 8009294:	8019      	strh	r1, [r3, #0]
 8009296:	2300      	movs	r3, #0
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	4615      	mov	r5, r2
 800929c:	e7bc      	b.n	8009218 <_printf_i+0x14c>
 800929e:	682b      	ldr	r3, [r5, #0]
 80092a0:	1d1a      	adds	r2, r3, #4
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	681d      	ldr	r5, [r3, #0]
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	2100      	movs	r1, #0
 80092aa:	4628      	mov	r0, r5
 80092ac:	f7f6 ff90 	bl	80001d0 <memchr>
 80092b0:	b108      	cbz	r0, 80092b6 <_printf_i+0x1ea>
 80092b2:	1b40      	subs	r0, r0, r5
 80092b4:	6060      	str	r0, [r4, #4]
 80092b6:	6863      	ldr	r3, [r4, #4]
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	2300      	movs	r3, #0
 80092bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c0:	e7aa      	b.n	8009218 <_printf_i+0x14c>
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	462a      	mov	r2, r5
 80092c6:	4649      	mov	r1, r9
 80092c8:	4640      	mov	r0, r8
 80092ca:	47d0      	blx	sl
 80092cc:	3001      	adds	r0, #1
 80092ce:	d0ad      	beq.n	800922c <_printf_i+0x160>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	079b      	lsls	r3, r3, #30
 80092d4:	d413      	bmi.n	80092fe <_printf_i+0x232>
 80092d6:	68e0      	ldr	r0, [r4, #12]
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	4298      	cmp	r0, r3
 80092dc:	bfb8      	it	lt
 80092de:	4618      	movlt	r0, r3
 80092e0:	e7a6      	b.n	8009230 <_printf_i+0x164>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4632      	mov	r2, r6
 80092e6:	4649      	mov	r1, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	47d0      	blx	sl
 80092ec:	3001      	adds	r0, #1
 80092ee:	d09d      	beq.n	800922c <_printf_i+0x160>
 80092f0:	3501      	adds	r5, #1
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	9903      	ldr	r1, [sp, #12]
 80092f6:	1a5b      	subs	r3, r3, r1
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	dcf2      	bgt.n	80092e2 <_printf_i+0x216>
 80092fc:	e7eb      	b.n	80092d6 <_printf_i+0x20a>
 80092fe:	2500      	movs	r5, #0
 8009300:	f104 0619 	add.w	r6, r4, #25
 8009304:	e7f5      	b.n	80092f2 <_printf_i+0x226>
 8009306:	bf00      	nop
 8009308:	0800c85a 	.word	0x0800c85a
 800930c:	0800c86b 	.word	0x0800c86b

08009310 <_scanf_float>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	b087      	sub	sp, #28
 8009316:	4617      	mov	r7, r2
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	688b      	ldr	r3, [r1, #8]
 800931c:	1e5a      	subs	r2, r3, #1
 800931e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009322:	bf83      	ittte	hi
 8009324:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009328:	195b      	addhi	r3, r3, r5
 800932a:	9302      	strhi	r3, [sp, #8]
 800932c:	2300      	movls	r3, #0
 800932e:	bf86      	itte	hi
 8009330:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009334:	608b      	strhi	r3, [r1, #8]
 8009336:	9302      	strls	r3, [sp, #8]
 8009338:	680b      	ldr	r3, [r1, #0]
 800933a:	468b      	mov	fp, r1
 800933c:	2500      	movs	r5, #0
 800933e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009342:	f84b 3b1c 	str.w	r3, [fp], #28
 8009346:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800934a:	4680      	mov	r8, r0
 800934c:	460c      	mov	r4, r1
 800934e:	465e      	mov	r6, fp
 8009350:	46aa      	mov	sl, r5
 8009352:	46a9      	mov	r9, r5
 8009354:	9501      	str	r5, [sp, #4]
 8009356:	68a2      	ldr	r2, [r4, #8]
 8009358:	b152      	cbz	r2, 8009370 <_scanf_float+0x60>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b4e      	cmp	r3, #78	; 0x4e
 8009360:	d864      	bhi.n	800942c <_scanf_float+0x11c>
 8009362:	2b40      	cmp	r3, #64	; 0x40
 8009364:	d83c      	bhi.n	80093e0 <_scanf_float+0xd0>
 8009366:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800936a:	b2c8      	uxtb	r0, r1
 800936c:	280e      	cmp	r0, #14
 800936e:	d93a      	bls.n	80093e6 <_scanf_float+0xd6>
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	d003      	beq.n	800937e <_scanf_float+0x6e>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009382:	f1ba 0f01 	cmp.w	sl, #1
 8009386:	f200 8113 	bhi.w	80095b0 <_scanf_float+0x2a0>
 800938a:	455e      	cmp	r6, fp
 800938c:	f200 8105 	bhi.w	800959a <_scanf_float+0x28a>
 8009390:	2501      	movs	r5, #1
 8009392:	4628      	mov	r0, r5
 8009394:	b007      	add	sp, #28
 8009396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800939e:	2a0d      	cmp	r2, #13
 80093a0:	d8e6      	bhi.n	8009370 <_scanf_float+0x60>
 80093a2:	a101      	add	r1, pc, #4	; (adr r1, 80093a8 <_scanf_float+0x98>)
 80093a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093a8:	080094e7 	.word	0x080094e7
 80093ac:	08009371 	.word	0x08009371
 80093b0:	08009371 	.word	0x08009371
 80093b4:	08009371 	.word	0x08009371
 80093b8:	08009547 	.word	0x08009547
 80093bc:	0800951f 	.word	0x0800951f
 80093c0:	08009371 	.word	0x08009371
 80093c4:	08009371 	.word	0x08009371
 80093c8:	080094f5 	.word	0x080094f5
 80093cc:	08009371 	.word	0x08009371
 80093d0:	08009371 	.word	0x08009371
 80093d4:	08009371 	.word	0x08009371
 80093d8:	08009371 	.word	0x08009371
 80093dc:	080094ad 	.word	0x080094ad
 80093e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80093e4:	e7db      	b.n	800939e <_scanf_float+0x8e>
 80093e6:	290e      	cmp	r1, #14
 80093e8:	d8c2      	bhi.n	8009370 <_scanf_float+0x60>
 80093ea:	a001      	add	r0, pc, #4	; (adr r0, 80093f0 <_scanf_float+0xe0>)
 80093ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093f0:	0800949f 	.word	0x0800949f
 80093f4:	08009371 	.word	0x08009371
 80093f8:	0800949f 	.word	0x0800949f
 80093fc:	08009533 	.word	0x08009533
 8009400:	08009371 	.word	0x08009371
 8009404:	0800944d 	.word	0x0800944d
 8009408:	08009489 	.word	0x08009489
 800940c:	08009489 	.word	0x08009489
 8009410:	08009489 	.word	0x08009489
 8009414:	08009489 	.word	0x08009489
 8009418:	08009489 	.word	0x08009489
 800941c:	08009489 	.word	0x08009489
 8009420:	08009489 	.word	0x08009489
 8009424:	08009489 	.word	0x08009489
 8009428:	08009489 	.word	0x08009489
 800942c:	2b6e      	cmp	r3, #110	; 0x6e
 800942e:	d809      	bhi.n	8009444 <_scanf_float+0x134>
 8009430:	2b60      	cmp	r3, #96	; 0x60
 8009432:	d8b2      	bhi.n	800939a <_scanf_float+0x8a>
 8009434:	2b54      	cmp	r3, #84	; 0x54
 8009436:	d077      	beq.n	8009528 <_scanf_float+0x218>
 8009438:	2b59      	cmp	r3, #89	; 0x59
 800943a:	d199      	bne.n	8009370 <_scanf_float+0x60>
 800943c:	2d07      	cmp	r5, #7
 800943e:	d197      	bne.n	8009370 <_scanf_float+0x60>
 8009440:	2508      	movs	r5, #8
 8009442:	e029      	b.n	8009498 <_scanf_float+0x188>
 8009444:	2b74      	cmp	r3, #116	; 0x74
 8009446:	d06f      	beq.n	8009528 <_scanf_float+0x218>
 8009448:	2b79      	cmp	r3, #121	; 0x79
 800944a:	e7f6      	b.n	800943a <_scanf_float+0x12a>
 800944c:	6821      	ldr	r1, [r4, #0]
 800944e:	05c8      	lsls	r0, r1, #23
 8009450:	d51a      	bpl.n	8009488 <_scanf_float+0x178>
 8009452:	9b02      	ldr	r3, [sp, #8]
 8009454:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009458:	6021      	str	r1, [r4, #0]
 800945a:	f109 0901 	add.w	r9, r9, #1
 800945e:	b11b      	cbz	r3, 8009468 <_scanf_float+0x158>
 8009460:	3b01      	subs	r3, #1
 8009462:	3201      	adds	r2, #1
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	60a2      	str	r2, [r4, #8]
 8009468:	68a3      	ldr	r3, [r4, #8]
 800946a:	3b01      	subs	r3, #1
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	6923      	ldr	r3, [r4, #16]
 8009470:	3301      	adds	r3, #1
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3b01      	subs	r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	607b      	str	r3, [r7, #4]
 800947c:	f340 8084 	ble.w	8009588 <_scanf_float+0x278>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	e766      	b.n	8009356 <_scanf_float+0x46>
 8009488:	eb1a 0f05 	cmn.w	sl, r5
 800948c:	f47f af70 	bne.w	8009370 <_scanf_float+0x60>
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	f806 3b01 	strb.w	r3, [r6], #1
 800949c:	e7e4      	b.n	8009468 <_scanf_float+0x158>
 800949e:	6822      	ldr	r2, [r4, #0]
 80094a0:	0610      	lsls	r0, r2, #24
 80094a2:	f57f af65 	bpl.w	8009370 <_scanf_float+0x60>
 80094a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094aa:	e7f4      	b.n	8009496 <_scanf_float+0x186>
 80094ac:	f1ba 0f00 	cmp.w	sl, #0
 80094b0:	d10e      	bne.n	80094d0 <_scanf_float+0x1c0>
 80094b2:	f1b9 0f00 	cmp.w	r9, #0
 80094b6:	d10e      	bne.n	80094d6 <_scanf_float+0x1c6>
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094c2:	d108      	bne.n	80094d6 <_scanf_float+0x1c6>
 80094c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094c8:	6022      	str	r2, [r4, #0]
 80094ca:	f04f 0a01 	mov.w	sl, #1
 80094ce:	e7e3      	b.n	8009498 <_scanf_float+0x188>
 80094d0:	f1ba 0f02 	cmp.w	sl, #2
 80094d4:	d055      	beq.n	8009582 <_scanf_float+0x272>
 80094d6:	2d01      	cmp	r5, #1
 80094d8:	d002      	beq.n	80094e0 <_scanf_float+0x1d0>
 80094da:	2d04      	cmp	r5, #4
 80094dc:	f47f af48 	bne.w	8009370 <_scanf_float+0x60>
 80094e0:	3501      	adds	r5, #1
 80094e2:	b2ed      	uxtb	r5, r5
 80094e4:	e7d8      	b.n	8009498 <_scanf_float+0x188>
 80094e6:	f1ba 0f01 	cmp.w	sl, #1
 80094ea:	f47f af41 	bne.w	8009370 <_scanf_float+0x60>
 80094ee:	f04f 0a02 	mov.w	sl, #2
 80094f2:	e7d1      	b.n	8009498 <_scanf_float+0x188>
 80094f4:	b97d      	cbnz	r5, 8009516 <_scanf_float+0x206>
 80094f6:	f1b9 0f00 	cmp.w	r9, #0
 80094fa:	f47f af3c 	bne.w	8009376 <_scanf_float+0x66>
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009504:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009508:	f47f af39 	bne.w	800937e <_scanf_float+0x6e>
 800950c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009510:	6022      	str	r2, [r4, #0]
 8009512:	2501      	movs	r5, #1
 8009514:	e7c0      	b.n	8009498 <_scanf_float+0x188>
 8009516:	2d03      	cmp	r5, #3
 8009518:	d0e2      	beq.n	80094e0 <_scanf_float+0x1d0>
 800951a:	2d05      	cmp	r5, #5
 800951c:	e7de      	b.n	80094dc <_scanf_float+0x1cc>
 800951e:	2d02      	cmp	r5, #2
 8009520:	f47f af26 	bne.w	8009370 <_scanf_float+0x60>
 8009524:	2503      	movs	r5, #3
 8009526:	e7b7      	b.n	8009498 <_scanf_float+0x188>
 8009528:	2d06      	cmp	r5, #6
 800952a:	f47f af21 	bne.w	8009370 <_scanf_float+0x60>
 800952e:	2507      	movs	r5, #7
 8009530:	e7b2      	b.n	8009498 <_scanf_float+0x188>
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	0591      	lsls	r1, r2, #22
 8009536:	f57f af1b 	bpl.w	8009370 <_scanf_float+0x60>
 800953a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800953e:	6022      	str	r2, [r4, #0]
 8009540:	f8cd 9004 	str.w	r9, [sp, #4]
 8009544:	e7a8      	b.n	8009498 <_scanf_float+0x188>
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800954c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009550:	d006      	beq.n	8009560 <_scanf_float+0x250>
 8009552:	0550      	lsls	r0, r2, #21
 8009554:	f57f af0c 	bpl.w	8009370 <_scanf_float+0x60>
 8009558:	f1b9 0f00 	cmp.w	r9, #0
 800955c:	f43f af0f 	beq.w	800937e <_scanf_float+0x6e>
 8009560:	0591      	lsls	r1, r2, #22
 8009562:	bf58      	it	pl
 8009564:	9901      	ldrpl	r1, [sp, #4]
 8009566:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800956a:	bf58      	it	pl
 800956c:	eba9 0101 	subpl.w	r1, r9, r1
 8009570:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009574:	bf58      	it	pl
 8009576:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800957a:	6022      	str	r2, [r4, #0]
 800957c:	f04f 0900 	mov.w	r9, #0
 8009580:	e78a      	b.n	8009498 <_scanf_float+0x188>
 8009582:	f04f 0a03 	mov.w	sl, #3
 8009586:	e787      	b.n	8009498 <_scanf_float+0x188>
 8009588:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800958c:	4639      	mov	r1, r7
 800958e:	4640      	mov	r0, r8
 8009590:	4798      	blx	r3
 8009592:	2800      	cmp	r0, #0
 8009594:	f43f aedf 	beq.w	8009356 <_scanf_float+0x46>
 8009598:	e6ea      	b.n	8009370 <_scanf_float+0x60>
 800959a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800959e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095a2:	463a      	mov	r2, r7
 80095a4:	4640      	mov	r0, r8
 80095a6:	4798      	blx	r3
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	e6ec      	b.n	800938a <_scanf_float+0x7a>
 80095b0:	1e6b      	subs	r3, r5, #1
 80095b2:	2b06      	cmp	r3, #6
 80095b4:	d825      	bhi.n	8009602 <_scanf_float+0x2f2>
 80095b6:	2d02      	cmp	r5, #2
 80095b8:	d836      	bhi.n	8009628 <_scanf_float+0x318>
 80095ba:	455e      	cmp	r6, fp
 80095bc:	f67f aee8 	bls.w	8009390 <_scanf_float+0x80>
 80095c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095c8:	463a      	mov	r2, r7
 80095ca:	4640      	mov	r0, r8
 80095cc:	4798      	blx	r3
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	6123      	str	r3, [r4, #16]
 80095d4:	e7f1      	b.n	80095ba <_scanf_float+0x2aa>
 80095d6:	9802      	ldr	r0, [sp, #8]
 80095d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80095e0:	9002      	str	r0, [sp, #8]
 80095e2:	463a      	mov	r2, r7
 80095e4:	4640      	mov	r0, r8
 80095e6:	4798      	blx	r3
 80095e8:	6923      	ldr	r3, [r4, #16]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095f2:	fa5f fa8a 	uxtb.w	sl, sl
 80095f6:	f1ba 0f02 	cmp.w	sl, #2
 80095fa:	d1ec      	bne.n	80095d6 <_scanf_float+0x2c6>
 80095fc:	3d03      	subs	r5, #3
 80095fe:	b2ed      	uxtb	r5, r5
 8009600:	1b76      	subs	r6, r6, r5
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	05da      	lsls	r2, r3, #23
 8009606:	d52f      	bpl.n	8009668 <_scanf_float+0x358>
 8009608:	055b      	lsls	r3, r3, #21
 800960a:	d510      	bpl.n	800962e <_scanf_float+0x31e>
 800960c:	455e      	cmp	r6, fp
 800960e:	f67f aebf 	bls.w	8009390 <_scanf_float+0x80>
 8009612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800961a:	463a      	mov	r2, r7
 800961c:	4640      	mov	r0, r8
 800961e:	4798      	blx	r3
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	3b01      	subs	r3, #1
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	e7f1      	b.n	800960c <_scanf_float+0x2fc>
 8009628:	46aa      	mov	sl, r5
 800962a:	9602      	str	r6, [sp, #8]
 800962c:	e7df      	b.n	80095ee <_scanf_float+0x2de>
 800962e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	2965      	cmp	r1, #101	; 0x65
 8009636:	f103 33ff 	add.w	r3, r3, #4294967295
 800963a:	f106 35ff 	add.w	r5, r6, #4294967295
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	d00c      	beq.n	800965c <_scanf_float+0x34c>
 8009642:	2945      	cmp	r1, #69	; 0x45
 8009644:	d00a      	beq.n	800965c <_scanf_float+0x34c>
 8009646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800964a:	463a      	mov	r2, r7
 800964c:	4640      	mov	r0, r8
 800964e:	4798      	blx	r3
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009656:	3b01      	subs	r3, #1
 8009658:	1eb5      	subs	r5, r6, #2
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009660:	463a      	mov	r2, r7
 8009662:	4640      	mov	r0, r8
 8009664:	4798      	blx	r3
 8009666:	462e      	mov	r6, r5
 8009668:	6825      	ldr	r5, [r4, #0]
 800966a:	f015 0510 	ands.w	r5, r5, #16
 800966e:	d158      	bne.n	8009722 <_scanf_float+0x412>
 8009670:	7035      	strb	r5, [r6, #0]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800967c:	d11c      	bne.n	80096b8 <_scanf_float+0x3a8>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	454b      	cmp	r3, r9
 8009682:	eba3 0209 	sub.w	r2, r3, r9
 8009686:	d124      	bne.n	80096d2 <_scanf_float+0x3c2>
 8009688:	2200      	movs	r2, #0
 800968a:	4659      	mov	r1, fp
 800968c:	4640      	mov	r0, r8
 800968e:	f7ff f9c7 	bl	8008a20 <_strtod_r>
 8009692:	9b03      	ldr	r3, [sp, #12]
 8009694:	6821      	ldr	r1, [r4, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f011 0f02 	tst.w	r1, #2
 800969c:	ec57 6b10 	vmov	r6, r7, d0
 80096a0:	f103 0204 	add.w	r2, r3, #4
 80096a4:	d020      	beq.n	80096e8 <_scanf_float+0x3d8>
 80096a6:	9903      	ldr	r1, [sp, #12]
 80096a8:	600a      	str	r2, [r1, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	e9c3 6700 	strd	r6, r7, [r3]
 80096b0:	68e3      	ldr	r3, [r4, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60e3      	str	r3, [r4, #12]
 80096b6:	e66c      	b.n	8009392 <_scanf_float+0x82>
 80096b8:	9b04      	ldr	r3, [sp, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0e4      	beq.n	8009688 <_scanf_float+0x378>
 80096be:	9905      	ldr	r1, [sp, #20]
 80096c0:	230a      	movs	r3, #10
 80096c2:	462a      	mov	r2, r5
 80096c4:	3101      	adds	r1, #1
 80096c6:	4640      	mov	r0, r8
 80096c8:	f002 fa16 	bl	800baf8 <_strtol_r>
 80096cc:	9b04      	ldr	r3, [sp, #16]
 80096ce:	9e05      	ldr	r6, [sp, #20]
 80096d0:	1ac2      	subs	r2, r0, r3
 80096d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80096d6:	429e      	cmp	r6, r3
 80096d8:	bf28      	it	cs
 80096da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80096de:	4912      	ldr	r1, [pc, #72]	; (8009728 <_scanf_float+0x418>)
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f8e7 	bl	80098b4 <siprintf>
 80096e6:	e7cf      	b.n	8009688 <_scanf_float+0x378>
 80096e8:	f011 0f04 	tst.w	r1, #4
 80096ec:	9903      	ldr	r1, [sp, #12]
 80096ee:	600a      	str	r2, [r1, #0]
 80096f0:	d1db      	bne.n	80096aa <_scanf_float+0x39a>
 80096f2:	f8d3 8000 	ldr.w	r8, [r3]
 80096f6:	ee10 2a10 	vmov	r2, s0
 80096fa:	ee10 0a10 	vmov	r0, s0
 80096fe:	463b      	mov	r3, r7
 8009700:	4639      	mov	r1, r7
 8009702:	f7f7 fa13 	bl	8000b2c <__aeabi_dcmpun>
 8009706:	b128      	cbz	r0, 8009714 <_scanf_float+0x404>
 8009708:	4808      	ldr	r0, [pc, #32]	; (800972c <_scanf_float+0x41c>)
 800970a:	f000 fa69 	bl	8009be0 <nanf>
 800970e:	ed88 0a00 	vstr	s0, [r8]
 8009712:	e7cd      	b.n	80096b0 <_scanf_float+0x3a0>
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	f7f7 fa66 	bl	8000be8 <__aeabi_d2f>
 800971c:	f8c8 0000 	str.w	r0, [r8]
 8009720:	e7c6      	b.n	80096b0 <_scanf_float+0x3a0>
 8009722:	2500      	movs	r5, #0
 8009724:	e635      	b.n	8009392 <_scanf_float+0x82>
 8009726:	bf00      	nop
 8009728:	0800c87c 	.word	0x0800c87c
 800972c:	0800c935 	.word	0x0800c935

08009730 <std>:
 8009730:	2300      	movs	r3, #0
 8009732:	b510      	push	{r4, lr}
 8009734:	4604      	mov	r4, r0
 8009736:	e9c0 3300 	strd	r3, r3, [r0]
 800973a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800973e:	6083      	str	r3, [r0, #8]
 8009740:	8181      	strh	r1, [r0, #12]
 8009742:	6643      	str	r3, [r0, #100]	; 0x64
 8009744:	81c2      	strh	r2, [r0, #14]
 8009746:	6183      	str	r3, [r0, #24]
 8009748:	4619      	mov	r1, r3
 800974a:	2208      	movs	r2, #8
 800974c:	305c      	adds	r0, #92	; 0x5c
 800974e:	f000 f914 	bl	800997a <memset>
 8009752:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <std+0x58>)
 8009754:	6263      	str	r3, [r4, #36]	; 0x24
 8009756:	4b0d      	ldr	r3, [pc, #52]	; (800978c <std+0x5c>)
 8009758:	62a3      	str	r3, [r4, #40]	; 0x28
 800975a:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <std+0x60>)
 800975c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800975e:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <std+0x64>)
 8009760:	6323      	str	r3, [r4, #48]	; 0x30
 8009762:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <std+0x68>)
 8009764:	6224      	str	r4, [r4, #32]
 8009766:	429c      	cmp	r4, r3
 8009768:	d006      	beq.n	8009778 <std+0x48>
 800976a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800976e:	4294      	cmp	r4, r2
 8009770:	d002      	beq.n	8009778 <std+0x48>
 8009772:	33d0      	adds	r3, #208	; 0xd0
 8009774:	429c      	cmp	r4, r3
 8009776:	d105      	bne.n	8009784 <std+0x54>
 8009778:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009780:	f000 ba14 	b.w	8009bac <__retarget_lock_init_recursive>
 8009784:	bd10      	pop	{r4, pc}
 8009786:	bf00      	nop
 8009788:	080098f5 	.word	0x080098f5
 800978c:	08009917 	.word	0x08009917
 8009790:	0800994f 	.word	0x0800994f
 8009794:	08009973 	.word	0x08009973
 8009798:	20000dc4 	.word	0x20000dc4

0800979c <stdio_exit_handler>:
 800979c:	4a02      	ldr	r2, [pc, #8]	; (80097a8 <stdio_exit_handler+0xc>)
 800979e:	4903      	ldr	r1, [pc, #12]	; (80097ac <stdio_exit_handler+0x10>)
 80097a0:	4803      	ldr	r0, [pc, #12]	; (80097b0 <stdio_exit_handler+0x14>)
 80097a2:	f000 b869 	b.w	8009878 <_fwalk_sglue>
 80097a6:	bf00      	nop
 80097a8:	2000000c 	.word	0x2000000c
 80097ac:	0800bed5 	.word	0x0800bed5
 80097b0:	20000184 	.word	0x20000184

080097b4 <cleanup_stdio>:
 80097b4:	6841      	ldr	r1, [r0, #4]
 80097b6:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <cleanup_stdio+0x34>)
 80097b8:	4299      	cmp	r1, r3
 80097ba:	b510      	push	{r4, lr}
 80097bc:	4604      	mov	r4, r0
 80097be:	d001      	beq.n	80097c4 <cleanup_stdio+0x10>
 80097c0:	f002 fb88 	bl	800bed4 <_fflush_r>
 80097c4:	68a1      	ldr	r1, [r4, #8]
 80097c6:	4b09      	ldr	r3, [pc, #36]	; (80097ec <cleanup_stdio+0x38>)
 80097c8:	4299      	cmp	r1, r3
 80097ca:	d002      	beq.n	80097d2 <cleanup_stdio+0x1e>
 80097cc:	4620      	mov	r0, r4
 80097ce:	f002 fb81 	bl	800bed4 <_fflush_r>
 80097d2:	68e1      	ldr	r1, [r4, #12]
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <cleanup_stdio+0x3c>)
 80097d6:	4299      	cmp	r1, r3
 80097d8:	d004      	beq.n	80097e4 <cleanup_stdio+0x30>
 80097da:	4620      	mov	r0, r4
 80097dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e0:	f002 bb78 	b.w	800bed4 <_fflush_r>
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	bf00      	nop
 80097e8:	20000dc4 	.word	0x20000dc4
 80097ec:	20000e2c 	.word	0x20000e2c
 80097f0:	20000e94 	.word	0x20000e94

080097f4 <global_stdio_init.part.0>:
 80097f4:	b510      	push	{r4, lr}
 80097f6:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <global_stdio_init.part.0+0x30>)
 80097f8:	4c0b      	ldr	r4, [pc, #44]	; (8009828 <global_stdio_init.part.0+0x34>)
 80097fa:	4a0c      	ldr	r2, [pc, #48]	; (800982c <global_stdio_init.part.0+0x38>)
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	4620      	mov	r0, r4
 8009800:	2200      	movs	r2, #0
 8009802:	2104      	movs	r1, #4
 8009804:	f7ff ff94 	bl	8009730 <std>
 8009808:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800980c:	2201      	movs	r2, #1
 800980e:	2109      	movs	r1, #9
 8009810:	f7ff ff8e 	bl	8009730 <std>
 8009814:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009818:	2202      	movs	r2, #2
 800981a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800981e:	2112      	movs	r1, #18
 8009820:	f7ff bf86 	b.w	8009730 <std>
 8009824:	20000efc 	.word	0x20000efc
 8009828:	20000dc4 	.word	0x20000dc4
 800982c:	0800979d 	.word	0x0800979d

08009830 <__sfp_lock_acquire>:
 8009830:	4801      	ldr	r0, [pc, #4]	; (8009838 <__sfp_lock_acquire+0x8>)
 8009832:	f000 b9bc 	b.w	8009bae <__retarget_lock_acquire_recursive>
 8009836:	bf00      	nop
 8009838:	20000f05 	.word	0x20000f05

0800983c <__sfp_lock_release>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__sfp_lock_release+0x8>)
 800983e:	f000 b9b7 	b.w	8009bb0 <__retarget_lock_release_recursive>
 8009842:	bf00      	nop
 8009844:	20000f05 	.word	0x20000f05

08009848 <__sinit>:
 8009848:	b510      	push	{r4, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	f7ff fff0 	bl	8009830 <__sfp_lock_acquire>
 8009850:	6a23      	ldr	r3, [r4, #32]
 8009852:	b11b      	cbz	r3, 800985c <__sinit+0x14>
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	f7ff bff0 	b.w	800983c <__sfp_lock_release>
 800985c:	4b04      	ldr	r3, [pc, #16]	; (8009870 <__sinit+0x28>)
 800985e:	6223      	str	r3, [r4, #32]
 8009860:	4b04      	ldr	r3, [pc, #16]	; (8009874 <__sinit+0x2c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1f5      	bne.n	8009854 <__sinit+0xc>
 8009868:	f7ff ffc4 	bl	80097f4 <global_stdio_init.part.0>
 800986c:	e7f2      	b.n	8009854 <__sinit+0xc>
 800986e:	bf00      	nop
 8009870:	080097b5 	.word	0x080097b5
 8009874:	20000efc 	.word	0x20000efc

08009878 <_fwalk_sglue>:
 8009878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800987c:	4607      	mov	r7, r0
 800987e:	4688      	mov	r8, r1
 8009880:	4614      	mov	r4, r2
 8009882:	2600      	movs	r6, #0
 8009884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009888:	f1b9 0901 	subs.w	r9, r9, #1
 800988c:	d505      	bpl.n	800989a <_fwalk_sglue+0x22>
 800988e:	6824      	ldr	r4, [r4, #0]
 8009890:	2c00      	cmp	r4, #0
 8009892:	d1f7      	bne.n	8009884 <_fwalk_sglue+0xc>
 8009894:	4630      	mov	r0, r6
 8009896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d907      	bls.n	80098b0 <_fwalk_sglue+0x38>
 80098a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098a4:	3301      	adds	r3, #1
 80098a6:	d003      	beq.n	80098b0 <_fwalk_sglue+0x38>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4638      	mov	r0, r7
 80098ac:	47c0      	blx	r8
 80098ae:	4306      	orrs	r6, r0
 80098b0:	3568      	adds	r5, #104	; 0x68
 80098b2:	e7e9      	b.n	8009888 <_fwalk_sglue+0x10>

080098b4 <siprintf>:
 80098b4:	b40e      	push	{r1, r2, r3}
 80098b6:	b500      	push	{lr}
 80098b8:	b09c      	sub	sp, #112	; 0x70
 80098ba:	ab1d      	add	r3, sp, #116	; 0x74
 80098bc:	9002      	str	r0, [sp, #8]
 80098be:	9006      	str	r0, [sp, #24]
 80098c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098c4:	4809      	ldr	r0, [pc, #36]	; (80098ec <siprintf+0x38>)
 80098c6:	9107      	str	r1, [sp, #28]
 80098c8:	9104      	str	r1, [sp, #16]
 80098ca:	4909      	ldr	r1, [pc, #36]	; (80098f0 <siprintf+0x3c>)
 80098cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d0:	9105      	str	r1, [sp, #20]
 80098d2:	6800      	ldr	r0, [r0, #0]
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	a902      	add	r1, sp, #8
 80098d8:	f002 f978 	bl	800bbcc <_svfiprintf_r>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	b01c      	add	sp, #112	; 0x70
 80098e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e8:	b003      	add	sp, #12
 80098ea:	4770      	bx	lr
 80098ec:	200001d0 	.word	0x200001d0
 80098f0:	ffff0208 	.word	0xffff0208

080098f4 <__sread>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	460c      	mov	r4, r1
 80098f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fc:	f000 f8f8 	bl	8009af0 <_read_r>
 8009900:	2800      	cmp	r0, #0
 8009902:	bfab      	itete	ge
 8009904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009906:	89a3      	ldrhlt	r3, [r4, #12]
 8009908:	181b      	addge	r3, r3, r0
 800990a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800990e:	bfac      	ite	ge
 8009910:	6563      	strge	r3, [r4, #84]	; 0x54
 8009912:	81a3      	strhlt	r3, [r4, #12]
 8009914:	bd10      	pop	{r4, pc}

08009916 <__swrite>:
 8009916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	461f      	mov	r7, r3
 800991c:	898b      	ldrh	r3, [r1, #12]
 800991e:	05db      	lsls	r3, r3, #23
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	4616      	mov	r6, r2
 8009926:	d505      	bpl.n	8009934 <__swrite+0x1e>
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	2302      	movs	r3, #2
 800992e:	2200      	movs	r2, #0
 8009930:	f000 f8cc 	bl	8009acc <_lseek_r>
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800993a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	4632      	mov	r2, r6
 8009942:	463b      	mov	r3, r7
 8009944:	4628      	mov	r0, r5
 8009946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	f000 b8f3 	b.w	8009b34 <_write_r>

0800994e <__sseek>:
 800994e:	b510      	push	{r4, lr}
 8009950:	460c      	mov	r4, r1
 8009952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009956:	f000 f8b9 	bl	8009acc <_lseek_r>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	bf15      	itete	ne
 8009960:	6560      	strne	r0, [r4, #84]	; 0x54
 8009962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800996a:	81a3      	strheq	r3, [r4, #12]
 800996c:	bf18      	it	ne
 800996e:	81a3      	strhne	r3, [r4, #12]
 8009970:	bd10      	pop	{r4, pc}

08009972 <__sclose>:
 8009972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009976:	f000 b899 	b.w	8009aac <_close_r>

0800997a <memset>:
 800997a:	4402      	add	r2, r0
 800997c:	4603      	mov	r3, r0
 800997e:	4293      	cmp	r3, r2
 8009980:	d100      	bne.n	8009984 <memset+0xa>
 8009982:	4770      	bx	lr
 8009984:	f803 1b01 	strb.w	r1, [r3], #1
 8009988:	e7f9      	b.n	800997e <memset+0x4>
	...

0800998c <strdup>:
 800998c:	4b02      	ldr	r3, [pc, #8]	; (8009998 <strdup+0xc>)
 800998e:	4601      	mov	r1, r0
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f000 b803 	b.w	800999c <_strdup_r>
 8009996:	bf00      	nop
 8009998:	200001d0 	.word	0x200001d0

0800999c <_strdup_r>:
 800999c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	460d      	mov	r5, r1
 80099a4:	f7f6 fc64 	bl	8000270 <strlen>
 80099a8:	1c42      	adds	r2, r0, #1
 80099aa:	4611      	mov	r1, r2
 80099ac:	4620      	mov	r0, r4
 80099ae:	9201      	str	r2, [sp, #4]
 80099b0:	f7fe f964 	bl	8007c7c <_malloc_r>
 80099b4:	4604      	mov	r4, r0
 80099b6:	b118      	cbz	r0, 80099c0 <_strdup_r+0x24>
 80099b8:	9a01      	ldr	r2, [sp, #4]
 80099ba:	4629      	mov	r1, r5
 80099bc:	f000 f8f9 	bl	8009bb2 <memcpy>
 80099c0:	4620      	mov	r0, r4
 80099c2:	b003      	add	sp, #12
 80099c4:	bd30      	pop	{r4, r5, pc}

080099c6 <strncmp>:
 80099c6:	b510      	push	{r4, lr}
 80099c8:	b16a      	cbz	r2, 80099e6 <strncmp+0x20>
 80099ca:	3901      	subs	r1, #1
 80099cc:	1884      	adds	r4, r0, r2
 80099ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d103      	bne.n	80099e2 <strncmp+0x1c>
 80099da:	42a0      	cmp	r0, r4
 80099dc:	d001      	beq.n	80099e2 <strncmp+0x1c>
 80099de:	2a00      	cmp	r2, #0
 80099e0:	d1f5      	bne.n	80099ce <strncmp+0x8>
 80099e2:	1ad0      	subs	r0, r2, r3
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	4610      	mov	r0, r2
 80099e8:	e7fc      	b.n	80099e4 <strncmp+0x1e>
	...

080099ec <strtok>:
 80099ec:	4b16      	ldr	r3, [pc, #88]	; (8009a48 <strtok+0x5c>)
 80099ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099f0:	681e      	ldr	r6, [r3, #0]
 80099f2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80099f4:	4605      	mov	r5, r0
 80099f6:	b9fc      	cbnz	r4, 8009a38 <strtok+0x4c>
 80099f8:	2050      	movs	r0, #80	; 0x50
 80099fa:	9101      	str	r1, [sp, #4]
 80099fc:	f7fe f90e 	bl	8007c1c <malloc>
 8009a00:	9901      	ldr	r1, [sp, #4]
 8009a02:	6470      	str	r0, [r6, #68]	; 0x44
 8009a04:	4602      	mov	r2, r0
 8009a06:	b920      	cbnz	r0, 8009a12 <strtok+0x26>
 8009a08:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <strtok+0x60>)
 8009a0a:	4811      	ldr	r0, [pc, #68]	; (8009a50 <strtok+0x64>)
 8009a0c:	215b      	movs	r1, #91	; 0x5b
 8009a0e:	f000 f8ed 	bl	8009bec <__assert_func>
 8009a12:	e9c0 4400 	strd	r4, r4, [r0]
 8009a16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009a1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009a22:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009a26:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009a2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009a2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009a32:	6184      	str	r4, [r0, #24]
 8009a34:	7704      	strb	r4, [r0, #28]
 8009a36:	6244      	str	r4, [r0, #36]	; 0x24
 8009a38:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	b002      	add	sp, #8
 8009a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a44:	f000 b806 	b.w	8009a54 <__strtok_r>
 8009a48:	200001d0 	.word	0x200001d0
 8009a4c:	0800c881 	.word	0x0800c881
 8009a50:	0800c898 	.word	0x0800c898

08009a54 <__strtok_r>:
 8009a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a56:	b908      	cbnz	r0, 8009a5c <__strtok_r+0x8>
 8009a58:	6810      	ldr	r0, [r2, #0]
 8009a5a:	b188      	cbz	r0, 8009a80 <__strtok_r+0x2c>
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a64:	460f      	mov	r7, r1
 8009a66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a6a:	b91e      	cbnz	r6, 8009a74 <__strtok_r+0x20>
 8009a6c:	b965      	cbnz	r5, 8009a88 <__strtok_r+0x34>
 8009a6e:	6015      	str	r5, [r2, #0]
 8009a70:	4628      	mov	r0, r5
 8009a72:	e005      	b.n	8009a80 <__strtok_r+0x2c>
 8009a74:	42b5      	cmp	r5, r6
 8009a76:	d1f6      	bne.n	8009a66 <__strtok_r+0x12>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1f0      	bne.n	8009a5e <__strtok_r+0xa>
 8009a7c:	6014      	str	r4, [r2, #0]
 8009a7e:	7003      	strb	r3, [r0, #0]
 8009a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a82:	461c      	mov	r4, r3
 8009a84:	e00c      	b.n	8009aa0 <__strtok_r+0x4c>
 8009a86:	b915      	cbnz	r5, 8009a8e <__strtok_r+0x3a>
 8009a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a8c:	460e      	mov	r6, r1
 8009a8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009a92:	42ab      	cmp	r3, r5
 8009a94:	d1f7      	bne.n	8009a86 <__strtok_r+0x32>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0f3      	beq.n	8009a82 <__strtok_r+0x2e>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009aa0:	6014      	str	r4, [r2, #0]
 8009aa2:	e7ed      	b.n	8009a80 <__strtok_r+0x2c>

08009aa4 <_localeconv_r>:
 8009aa4:	4800      	ldr	r0, [pc, #0]	; (8009aa8 <_localeconv_r+0x4>)
 8009aa6:	4770      	bx	lr
 8009aa8:	20000108 	.word	0x20000108

08009aac <_close_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d06      	ldr	r5, [pc, #24]	; (8009ac8 <_close_r+0x1c>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7f9 fe0b 	bl	80036d2 <_close>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_close_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_close_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	20000f00 	.word	0x20000f00

08009acc <_lseek_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d07      	ldr	r5, [pc, #28]	; (8009aec <_lseek_r+0x20>)
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	602a      	str	r2, [r5, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	f7f9 fe20 	bl	8003720 <_lseek>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_lseek_r+0x1e>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_lseek_r+0x1e>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20000f00 	.word	0x20000f00

08009af0 <_read_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	; (8009b10 <_read_r+0x20>)
 8009af4:	4604      	mov	r4, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7f9 fdae 	bl	8003660 <_read>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_read_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_read_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000f00 	.word	0x20000f00

08009b14 <_sbrk_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d06      	ldr	r5, [pc, #24]	; (8009b30 <_sbrk_r+0x1c>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7f9 fe0c 	bl	800373c <_sbrk>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_sbrk_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_sbrk_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	20000f00 	.word	0x20000f00

08009b34 <_write_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	; (8009b54 <_write_r+0x20>)
 8009b38:	4604      	mov	r4, r0
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f7f9 fda9 	bl	800369a <_write>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_write_r+0x1e>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_write_r+0x1e>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000f00 	.word	0x20000f00

08009b58 <__errno>:
 8009b58:	4b01      	ldr	r3, [pc, #4]	; (8009b60 <__errno+0x8>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	200001d0 	.word	0x200001d0

08009b64 <__libc_init_array>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4d0d      	ldr	r5, [pc, #52]	; (8009b9c <__libc_init_array+0x38>)
 8009b68:	4c0d      	ldr	r4, [pc, #52]	; (8009ba0 <__libc_init_array+0x3c>)
 8009b6a:	1b64      	subs	r4, r4, r5
 8009b6c:	10a4      	asrs	r4, r4, #2
 8009b6e:	2600      	movs	r6, #0
 8009b70:	42a6      	cmp	r6, r4
 8009b72:	d109      	bne.n	8009b88 <__libc_init_array+0x24>
 8009b74:	4d0b      	ldr	r5, [pc, #44]	; (8009ba4 <__libc_init_array+0x40>)
 8009b76:	4c0c      	ldr	r4, [pc, #48]	; (8009ba8 <__libc_init_array+0x44>)
 8009b78:	f002 fcbe 	bl	800c4f8 <_init>
 8009b7c:	1b64      	subs	r4, r4, r5
 8009b7e:	10a4      	asrs	r4, r4, #2
 8009b80:	2600      	movs	r6, #0
 8009b82:	42a6      	cmp	r6, r4
 8009b84:	d105      	bne.n	8009b92 <__libc_init_array+0x2e>
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8c:	4798      	blx	r3
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7ee      	b.n	8009b70 <__libc_init_array+0xc>
 8009b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b96:	4798      	blx	r3
 8009b98:	3601      	adds	r6, #1
 8009b9a:	e7f2      	b.n	8009b82 <__libc_init_array+0x1e>
 8009b9c:	0800cc80 	.word	0x0800cc80
 8009ba0:	0800cc80 	.word	0x0800cc80
 8009ba4:	0800cc80 	.word	0x0800cc80
 8009ba8:	0800cc8c 	.word	0x0800cc8c

08009bac <__retarget_lock_init_recursive>:
 8009bac:	4770      	bx	lr

08009bae <__retarget_lock_acquire_recursive>:
 8009bae:	4770      	bx	lr

08009bb0 <__retarget_lock_release_recursive>:
 8009bb0:	4770      	bx	lr

08009bb2 <memcpy>:
 8009bb2:	440a      	add	r2, r1
 8009bb4:	4291      	cmp	r1, r2
 8009bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bba:	d100      	bne.n	8009bbe <memcpy+0xc>
 8009bbc:	4770      	bx	lr
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bc8:	4291      	cmp	r1, r2
 8009bca:	d1f9      	bne.n	8009bc0 <memcpy+0xe>
 8009bcc:	bd10      	pop	{r4, pc}
	...

08009bd0 <nan>:
 8009bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009bd8 <nan+0x8>
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	7ff80000 	.word	0x7ff80000

08009be0 <nanf>:
 8009be0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009be8 <nanf+0x8>
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	7fc00000 	.word	0x7fc00000

08009bec <__assert_func>:
 8009bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bee:	4614      	mov	r4, r2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <__assert_func+0x2c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	68d8      	ldr	r0, [r3, #12]
 8009bfa:	b14c      	cbz	r4, 8009c10 <__assert_func+0x24>
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <__assert_func+0x30>)
 8009bfe:	9100      	str	r1, [sp, #0]
 8009c00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c04:	4906      	ldr	r1, [pc, #24]	; (8009c20 <__assert_func+0x34>)
 8009c06:	462b      	mov	r3, r5
 8009c08:	f002 f98c 	bl	800bf24 <fiprintf>
 8009c0c:	f002 f9b6 	bl	800bf7c <abort>
 8009c10:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <__assert_func+0x38>)
 8009c12:	461c      	mov	r4, r3
 8009c14:	e7f3      	b.n	8009bfe <__assert_func+0x12>
 8009c16:	bf00      	nop
 8009c18:	200001d0 	.word	0x200001d0
 8009c1c:	0800c8fa 	.word	0x0800c8fa
 8009c20:	0800c907 	.word	0x0800c907
 8009c24:	0800c935 	.word	0x0800c935

08009c28 <quorem>:
 8009c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	6903      	ldr	r3, [r0, #16]
 8009c2e:	690c      	ldr	r4, [r1, #16]
 8009c30:	42a3      	cmp	r3, r4
 8009c32:	4607      	mov	r7, r0
 8009c34:	db7e      	blt.n	8009d34 <quorem+0x10c>
 8009c36:	3c01      	subs	r4, #1
 8009c38:	f101 0814 	add.w	r8, r1, #20
 8009c3c:	f100 0514 	add.w	r5, r0, #20
 8009c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	429a      	cmp	r2, r3
 8009c52:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c5a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c5e:	d331      	bcc.n	8009cc4 <quorem+0x9c>
 8009c60:	f04f 0e00 	mov.w	lr, #0
 8009c64:	4640      	mov	r0, r8
 8009c66:	46ac      	mov	ip, r5
 8009c68:	46f2      	mov	sl, lr
 8009c6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c6e:	b293      	uxth	r3, r2
 8009c70:	fb06 e303 	mla	r3, r6, r3, lr
 8009c74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c78:	0c1a      	lsrs	r2, r3, #16
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c80:	f8dc a000 	ldr.w	sl, [ip]
 8009c84:	fa13 f38a 	uxtah	r3, r3, sl
 8009c88:	fb06 220e 	mla	r2, r6, lr, r2
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	9b00      	ldr	r3, [sp, #0]
 8009c90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c94:	b292      	uxth	r2, r2
 8009c96:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c9e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ca2:	4581      	cmp	r9, r0
 8009ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ca8:	f84c 3b04 	str.w	r3, [ip], #4
 8009cac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cb0:	d2db      	bcs.n	8009c6a <quorem+0x42>
 8009cb2:	f855 300b 	ldr.w	r3, [r5, fp]
 8009cb6:	b92b      	cbnz	r3, 8009cc4 <quorem+0x9c>
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	3b04      	subs	r3, #4
 8009cbc:	429d      	cmp	r5, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	d32c      	bcc.n	8009d1c <quorem+0xf4>
 8009cc2:	613c      	str	r4, [r7, #16]
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f001 fca5 	bl	800b614 <__mcmp>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	db22      	blt.n	8009d14 <quorem+0xec>
 8009cce:	3601      	adds	r6, #1
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cd8:	f8d1 c000 	ldr.w	ip, [r1]
 8009cdc:	b293      	uxth	r3, r2
 8009cde:	1ac3      	subs	r3, r0, r3
 8009ce0:	0c12      	lsrs	r2, r2, #16
 8009ce2:	fa13 f38c 	uxtah	r3, r3, ip
 8009ce6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cf4:	45c1      	cmp	r9, r8
 8009cf6:	f841 3b04 	str.w	r3, [r1], #4
 8009cfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009cfe:	d2e9      	bcs.n	8009cd4 <quorem+0xac>
 8009d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d08:	b922      	cbnz	r2, 8009d14 <quorem+0xec>
 8009d0a:	3b04      	subs	r3, #4
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	d30a      	bcc.n	8009d28 <quorem+0x100>
 8009d12:	613c      	str	r4, [r7, #16]
 8009d14:	4630      	mov	r0, r6
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	3b04      	subs	r3, #4
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d1ce      	bne.n	8009cc2 <quorem+0x9a>
 8009d24:	3c01      	subs	r4, #1
 8009d26:	e7c9      	b.n	8009cbc <quorem+0x94>
 8009d28:	6812      	ldr	r2, [r2, #0]
 8009d2a:	3b04      	subs	r3, #4
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	d1f0      	bne.n	8009d12 <quorem+0xea>
 8009d30:	3c01      	subs	r4, #1
 8009d32:	e7eb      	b.n	8009d0c <quorem+0xe4>
 8009d34:	2000      	movs	r0, #0
 8009d36:	e7ee      	b.n	8009d16 <quorem+0xee>

08009d38 <_dtoa_r>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	ed2d 8b04 	vpush	{d8-d9}
 8009d40:	69c5      	ldr	r5, [r0, #28]
 8009d42:	b093      	sub	sp, #76	; 0x4c
 8009d44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d48:	ec57 6b10 	vmov	r6, r7, d0
 8009d4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d50:	9107      	str	r1, [sp, #28]
 8009d52:	4604      	mov	r4, r0
 8009d54:	920a      	str	r2, [sp, #40]	; 0x28
 8009d56:	930d      	str	r3, [sp, #52]	; 0x34
 8009d58:	b975      	cbnz	r5, 8009d78 <_dtoa_r+0x40>
 8009d5a:	2010      	movs	r0, #16
 8009d5c:	f7fd ff5e 	bl	8007c1c <malloc>
 8009d60:	4602      	mov	r2, r0
 8009d62:	61e0      	str	r0, [r4, #28]
 8009d64:	b920      	cbnz	r0, 8009d70 <_dtoa_r+0x38>
 8009d66:	4bae      	ldr	r3, [pc, #696]	; (800a020 <_dtoa_r+0x2e8>)
 8009d68:	21ef      	movs	r1, #239	; 0xef
 8009d6a:	48ae      	ldr	r0, [pc, #696]	; (800a024 <_dtoa_r+0x2ec>)
 8009d6c:	f7ff ff3e 	bl	8009bec <__assert_func>
 8009d70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d74:	6005      	str	r5, [r0, #0]
 8009d76:	60c5      	str	r5, [r0, #12]
 8009d78:	69e3      	ldr	r3, [r4, #28]
 8009d7a:	6819      	ldr	r1, [r3, #0]
 8009d7c:	b151      	cbz	r1, 8009d94 <_dtoa_r+0x5c>
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	604a      	str	r2, [r1, #4]
 8009d82:	2301      	movs	r3, #1
 8009d84:	4093      	lsls	r3, r2
 8009d86:	608b      	str	r3, [r1, #8]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f001 f9bd 	bl	800b108 <_Bfree>
 8009d8e:	69e3      	ldr	r3, [r4, #28]
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	1e3b      	subs	r3, r7, #0
 8009d96:	bfbb      	ittet	lt
 8009d98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d9c:	9303      	strlt	r3, [sp, #12]
 8009d9e:	2300      	movge	r3, #0
 8009da0:	2201      	movlt	r2, #1
 8009da2:	bfac      	ite	ge
 8009da4:	f8c8 3000 	strge.w	r3, [r8]
 8009da8:	f8c8 2000 	strlt.w	r2, [r8]
 8009dac:	4b9e      	ldr	r3, [pc, #632]	; (800a028 <_dtoa_r+0x2f0>)
 8009dae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009db2:	ea33 0308 	bics.w	r3, r3, r8
 8009db6:	d11b      	bne.n	8009df0 <_dtoa_r+0xb8>
 8009db8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dba:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009dc4:	4333      	orrs	r3, r6
 8009dc6:	f000 8593 	beq.w	800a8f0 <_dtoa_r+0xbb8>
 8009dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dcc:	b963      	cbnz	r3, 8009de8 <_dtoa_r+0xb0>
 8009dce:	4b97      	ldr	r3, [pc, #604]	; (800a02c <_dtoa_r+0x2f4>)
 8009dd0:	e027      	b.n	8009e22 <_dtoa_r+0xea>
 8009dd2:	4b97      	ldr	r3, [pc, #604]	; (800a030 <_dtoa_r+0x2f8>)
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	9800      	ldr	r0, [sp, #0]
 8009dde:	b013      	add	sp, #76	; 0x4c
 8009de0:	ecbd 8b04 	vpop	{d8-d9}
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de8:	4b90      	ldr	r3, [pc, #576]	; (800a02c <_dtoa_r+0x2f4>)
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	3303      	adds	r3, #3
 8009dee:	e7f3      	b.n	8009dd8 <_dtoa_r+0xa0>
 8009df0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	ec51 0b17 	vmov	r0, r1, d7
 8009dfa:	eeb0 8a47 	vmov.f32	s16, s14
 8009dfe:	eef0 8a67 	vmov.f32	s17, s15
 8009e02:	2300      	movs	r3, #0
 8009e04:	f7f6 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e08:	4681      	mov	r9, r0
 8009e0a:	b160      	cbz	r0, 8009e26 <_dtoa_r+0xee>
 8009e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e0e:	2301      	movs	r3, #1
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8568 	beq.w	800a8ea <_dtoa_r+0xbb2>
 8009e1a:	4b86      	ldr	r3, [pc, #536]	; (800a034 <_dtoa_r+0x2fc>)
 8009e1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	e7da      	b.n	8009ddc <_dtoa_r+0xa4>
 8009e26:	aa10      	add	r2, sp, #64	; 0x40
 8009e28:	a911      	add	r1, sp, #68	; 0x44
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e30:	eef0 0a68 	vmov.f32	s1, s17
 8009e34:	f001 fd04 	bl	800b840 <__d2b>
 8009e38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	2d00      	cmp	r5, #0
 8009e40:	d07f      	beq.n	8009f42 <_dtoa_r+0x20a>
 8009e42:	ee18 3a90 	vmov	r3, s17
 8009e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e4e:	ec51 0b18 	vmov	r0, r1, d8
 8009e52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e5e:	4619      	mov	r1, r3
 8009e60:	2200      	movs	r2, #0
 8009e62:	4b75      	ldr	r3, [pc, #468]	; (800a038 <_dtoa_r+0x300>)
 8009e64:	f7f6 fa10 	bl	8000288 <__aeabi_dsub>
 8009e68:	a367      	add	r3, pc, #412	; (adr r3, 800a008 <_dtoa_r+0x2d0>)
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	f7f6 fbc3 	bl	80005f8 <__aeabi_dmul>
 8009e72:	a367      	add	r3, pc, #412	; (adr r3, 800a010 <_dtoa_r+0x2d8>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fa08 	bl	800028c <__adddf3>
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	4628      	mov	r0, r5
 8009e80:	460f      	mov	r7, r1
 8009e82:	f7f6 fb4f 	bl	8000524 <__aeabi_i2d>
 8009e86:	a364      	add	r3, pc, #400	; (adr r3, 800a018 <_dtoa_r+0x2e0>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fbb4 	bl	80005f8 <__aeabi_dmul>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 f9f8 	bl	800028c <__adddf3>
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	460f      	mov	r7, r1
 8009ea0:	f7f6 fe5a 	bl	8000b58 <__aeabi_d2iz>
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4683      	mov	fp, r0
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 fe15 	bl	8000adc <__aeabi_dcmplt>
 8009eb2:	b148      	cbz	r0, 8009ec8 <_dtoa_r+0x190>
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	f7f6 fb35 	bl	8000524 <__aeabi_i2d>
 8009eba:	4632      	mov	r2, r6
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	f7f6 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ec2:	b908      	cbnz	r0, 8009ec8 <_dtoa_r+0x190>
 8009ec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ec8:	f1bb 0f16 	cmp.w	fp, #22
 8009ecc:	d857      	bhi.n	8009f7e <_dtoa_r+0x246>
 8009ece:	4b5b      	ldr	r3, [pc, #364]	; (800a03c <_dtoa_r+0x304>)
 8009ed0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	ec51 0b18 	vmov	r0, r1, d8
 8009edc:	f7f6 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d04e      	beq.n	8009f82 <_dtoa_r+0x24a>
 8009ee4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ee8:	2300      	movs	r3, #0
 8009eea:	930c      	str	r3, [sp, #48]	; 0x30
 8009eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eee:	1b5b      	subs	r3, r3, r5
 8009ef0:	1e5a      	subs	r2, r3, #1
 8009ef2:	bf45      	ittet	mi
 8009ef4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ef8:	9305      	strmi	r3, [sp, #20]
 8009efa:	2300      	movpl	r3, #0
 8009efc:	2300      	movmi	r3, #0
 8009efe:	9206      	str	r2, [sp, #24]
 8009f00:	bf54      	ite	pl
 8009f02:	9305      	strpl	r3, [sp, #20]
 8009f04:	9306      	strmi	r3, [sp, #24]
 8009f06:	f1bb 0f00 	cmp.w	fp, #0
 8009f0a:	db3c      	blt.n	8009f86 <_dtoa_r+0x24e>
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009f12:	445b      	add	r3, fp
 8009f14:	9306      	str	r3, [sp, #24]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9308      	str	r3, [sp, #32]
 8009f1a:	9b07      	ldr	r3, [sp, #28]
 8009f1c:	2b09      	cmp	r3, #9
 8009f1e:	d868      	bhi.n	8009ff2 <_dtoa_r+0x2ba>
 8009f20:	2b05      	cmp	r3, #5
 8009f22:	bfc4      	itt	gt
 8009f24:	3b04      	subgt	r3, #4
 8009f26:	9307      	strgt	r3, [sp, #28]
 8009f28:	9b07      	ldr	r3, [sp, #28]
 8009f2a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f2e:	bfcc      	ite	gt
 8009f30:	2500      	movgt	r5, #0
 8009f32:	2501      	movle	r5, #1
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	f200 8085 	bhi.w	800a044 <_dtoa_r+0x30c>
 8009f3a:	e8df f003 	tbb	[pc, r3]
 8009f3e:	3b2e      	.short	0x3b2e
 8009f40:	5839      	.short	0x5839
 8009f42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f46:	441d      	add	r5, r3
 8009f48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f4c:	2b20      	cmp	r3, #32
 8009f4e:	bfc1      	itttt	gt
 8009f50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f54:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f60:	bfd6      	itet	le
 8009f62:	f1c3 0320 	rsble	r3, r3, #32
 8009f66:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f6a:	fa06 f003 	lslle.w	r0, r6, r3
 8009f6e:	f7f6 fac9 	bl	8000504 <__aeabi_ui2d>
 8009f72:	2201      	movs	r2, #1
 8009f74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f78:	3d01      	subs	r5, #1
 8009f7a:	920e      	str	r2, [sp, #56]	; 0x38
 8009f7c:	e76f      	b.n	8009e5e <_dtoa_r+0x126>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e7b3      	b.n	8009eea <_dtoa_r+0x1b2>
 8009f82:	900c      	str	r0, [sp, #48]	; 0x30
 8009f84:	e7b2      	b.n	8009eec <_dtoa_r+0x1b4>
 8009f86:	9b05      	ldr	r3, [sp, #20]
 8009f88:	eba3 030b 	sub.w	r3, r3, fp
 8009f8c:	9305      	str	r3, [sp, #20]
 8009f8e:	f1cb 0300 	rsb	r3, fp, #0
 8009f92:	9308      	str	r3, [sp, #32]
 8009f94:	2300      	movs	r3, #0
 8009f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f98:	e7bf      	b.n	8009f1a <_dtoa_r+0x1e2>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dc52      	bgt.n	800a04a <_dtoa_r+0x312>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	461a      	mov	r2, r3
 8009fac:	920a      	str	r2, [sp, #40]	; 0x28
 8009fae:	e00b      	b.n	8009fc8 <_dtoa_r+0x290>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7f3      	b.n	8009f9c <_dtoa_r+0x264>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fba:	445b      	add	r3, fp
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	bfb8      	it	lt
 8009fc6:	2301      	movlt	r3, #1
 8009fc8:	69e0      	ldr	r0, [r4, #28]
 8009fca:	2100      	movs	r1, #0
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f102 0614 	add.w	r6, r2, #20
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	d93d      	bls.n	800a052 <_dtoa_r+0x31a>
 8009fd6:	6041      	str	r1, [r0, #4]
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f001 f855 	bl	800b088 <_Balloc>
 8009fde:	9000      	str	r0, [sp, #0]
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d139      	bne.n	800a058 <_dtoa_r+0x320>
 8009fe4:	4b16      	ldr	r3, [pc, #88]	; (800a040 <_dtoa_r+0x308>)
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	f240 11af 	movw	r1, #431	; 0x1af
 8009fec:	e6bd      	b.n	8009d6a <_dtoa_r+0x32>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e7e1      	b.n	8009fb6 <_dtoa_r+0x27e>
 8009ff2:	2501      	movs	r5, #1
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	9509      	str	r5, [sp, #36]	; 0x24
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	2200      	movs	r2, #0
 800a004:	2312      	movs	r3, #18
 800a006:	e7d1      	b.n	8009fac <_dtoa_r+0x274>
 800a008:	636f4361 	.word	0x636f4361
 800a00c:	3fd287a7 	.word	0x3fd287a7
 800a010:	8b60c8b3 	.word	0x8b60c8b3
 800a014:	3fc68a28 	.word	0x3fc68a28
 800a018:	509f79fb 	.word	0x509f79fb
 800a01c:	3fd34413 	.word	0x3fd34413
 800a020:	0800c881 	.word	0x0800c881
 800a024:	0800c943 	.word	0x0800c943
 800a028:	7ff00000 	.word	0x7ff00000
 800a02c:	0800c93f 	.word	0x0800c93f
 800a030:	0800c936 	.word	0x0800c936
 800a034:	0800c859 	.word	0x0800c859
 800a038:	3ff80000 	.word	0x3ff80000
 800a03c:	0800ca90 	.word	0x0800ca90
 800a040:	0800c99b 	.word	0x0800c99b
 800a044:	2301      	movs	r3, #1
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	e7d7      	b.n	8009ffa <_dtoa_r+0x2c2>
 800a04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	9304      	str	r3, [sp, #16]
 800a050:	e7ba      	b.n	8009fc8 <_dtoa_r+0x290>
 800a052:	3101      	adds	r1, #1
 800a054:	0052      	lsls	r2, r2, #1
 800a056:	e7ba      	b.n	8009fce <_dtoa_r+0x296>
 800a058:	69e3      	ldr	r3, [r4, #28]
 800a05a:	9a00      	ldr	r2, [sp, #0]
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	2b0e      	cmp	r3, #14
 800a062:	f200 80a8 	bhi.w	800a1b6 <_dtoa_r+0x47e>
 800a066:	2d00      	cmp	r5, #0
 800a068:	f000 80a5 	beq.w	800a1b6 <_dtoa_r+0x47e>
 800a06c:	f1bb 0f00 	cmp.w	fp, #0
 800a070:	dd38      	ble.n	800a0e4 <_dtoa_r+0x3ac>
 800a072:	4bc0      	ldr	r3, [pc, #768]	; (800a374 <_dtoa_r+0x63c>)
 800a074:	f00b 020f 	and.w	r2, fp, #15
 800a078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a080:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a084:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a088:	d019      	beq.n	800a0be <_dtoa_r+0x386>
 800a08a:	4bbb      	ldr	r3, [pc, #748]	; (800a378 <_dtoa_r+0x640>)
 800a08c:	ec51 0b18 	vmov	r0, r1, d8
 800a090:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a094:	f7f6 fbda 	bl	800084c <__aeabi_ddiv>
 800a098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a09c:	f008 080f 	and.w	r8, r8, #15
 800a0a0:	2503      	movs	r5, #3
 800a0a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a378 <_dtoa_r+0x640>
 800a0a6:	f1b8 0f00 	cmp.w	r8, #0
 800a0aa:	d10a      	bne.n	800a0c2 <_dtoa_r+0x38a>
 800a0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b0:	4632      	mov	r2, r6
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	f7f6 fbca 	bl	800084c <__aeabi_ddiv>
 800a0b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0bc:	e02b      	b.n	800a116 <_dtoa_r+0x3de>
 800a0be:	2502      	movs	r5, #2
 800a0c0:	e7ef      	b.n	800a0a2 <_dtoa_r+0x36a>
 800a0c2:	f018 0f01 	tst.w	r8, #1
 800a0c6:	d008      	beq.n	800a0da <_dtoa_r+0x3a2>
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a0d0:	f7f6 fa92 	bl	80005f8 <__aeabi_dmul>
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0de:	f109 0908 	add.w	r9, r9, #8
 800a0e2:	e7e0      	b.n	800a0a6 <_dtoa_r+0x36e>
 800a0e4:	f000 809f 	beq.w	800a226 <_dtoa_r+0x4ee>
 800a0e8:	f1cb 0600 	rsb	r6, fp, #0
 800a0ec:	4ba1      	ldr	r3, [pc, #644]	; (800a374 <_dtoa_r+0x63c>)
 800a0ee:	4fa2      	ldr	r7, [pc, #648]	; (800a378 <_dtoa_r+0x640>)
 800a0f0:	f006 020f 	and.w	r2, r6, #15
 800a0f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	ec51 0b18 	vmov	r0, r1, d8
 800a100:	f7f6 fa7a 	bl	80005f8 <__aeabi_dmul>
 800a104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a108:	1136      	asrs	r6, r6, #4
 800a10a:	2300      	movs	r3, #0
 800a10c:	2502      	movs	r5, #2
 800a10e:	2e00      	cmp	r6, #0
 800a110:	d17e      	bne.n	800a210 <_dtoa_r+0x4d8>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1d0      	bne.n	800a0b8 <_dtoa_r+0x380>
 800a116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a118:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8084 	beq.w	800a22a <_dtoa_r+0x4f2>
 800a122:	4b96      	ldr	r3, [pc, #600]	; (800a37c <_dtoa_r+0x644>)
 800a124:	2200      	movs	r2, #0
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d07b      	beq.n	800a22a <_dtoa_r+0x4f2>
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d078      	beq.n	800a22a <_dtoa_r+0x4f2>
 800a138:	9b01      	ldr	r3, [sp, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dd39      	ble.n	800a1b2 <_dtoa_r+0x47a>
 800a13e:	4b90      	ldr	r3, [pc, #576]	; (800a380 <_dtoa_r+0x648>)
 800a140:	2200      	movs	r2, #0
 800a142:	4640      	mov	r0, r8
 800a144:	4649      	mov	r1, r9
 800a146:	f7f6 fa57 	bl	80005f8 <__aeabi_dmul>
 800a14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a14e:	9e01      	ldr	r6, [sp, #4]
 800a150:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a154:	3501      	adds	r5, #1
 800a156:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7f6 f9e2 	bl	8000524 <__aeabi_i2d>
 800a160:	4642      	mov	r2, r8
 800a162:	464b      	mov	r3, r9
 800a164:	f7f6 fa48 	bl	80005f8 <__aeabi_dmul>
 800a168:	4b86      	ldr	r3, [pc, #536]	; (800a384 <_dtoa_r+0x64c>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	f7f6 f88e 	bl	800028c <__adddf3>
 800a170:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a178:	9303      	str	r3, [sp, #12]
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	d158      	bne.n	800a230 <_dtoa_r+0x4f8>
 800a17e:	4b82      	ldr	r3, [pc, #520]	; (800a388 <_dtoa_r+0x650>)
 800a180:	2200      	movs	r2, #0
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 f87f 	bl	8000288 <__aeabi_dsub>
 800a18a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a18e:	4680      	mov	r8, r0
 800a190:	4689      	mov	r9, r1
 800a192:	f7f6 fcc1 	bl	8000b18 <__aeabi_dcmpgt>
 800a196:	2800      	cmp	r0, #0
 800a198:	f040 8296 	bne.w	800a6c8 <_dtoa_r+0x990>
 800a19c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	f7f6 fc98 	bl	8000adc <__aeabi_dcmplt>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f040 8289 	bne.w	800a6c4 <_dtoa_r+0x98c>
 800a1b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a1b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f2c0 814e 	blt.w	800a45a <_dtoa_r+0x722>
 800a1be:	f1bb 0f0e 	cmp.w	fp, #14
 800a1c2:	f300 814a 	bgt.w	800a45a <_dtoa_r+0x722>
 800a1c6:	4b6b      	ldr	r3, [pc, #428]	; (800a374 <_dtoa_r+0x63c>)
 800a1c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f280 80dc 	bge.w	800a390 <_dtoa_r+0x658>
 800a1d8:	9b04      	ldr	r3, [sp, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f300 80d8 	bgt.w	800a390 <_dtoa_r+0x658>
 800a1e0:	f040 826f 	bne.w	800a6c2 <_dtoa_r+0x98a>
 800a1e4:	4b68      	ldr	r3, [pc, #416]	; (800a388 <_dtoa_r+0x650>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1f4:	f7f6 fc86 	bl	8000b04 <__aeabi_dcmpge>
 800a1f8:	9e04      	ldr	r6, [sp, #16]
 800a1fa:	4637      	mov	r7, r6
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f040 8245 	bne.w	800a68c <_dtoa_r+0x954>
 800a202:	9d00      	ldr	r5, [sp, #0]
 800a204:	2331      	movs	r3, #49	; 0x31
 800a206:	f805 3b01 	strb.w	r3, [r5], #1
 800a20a:	f10b 0b01 	add.w	fp, fp, #1
 800a20e:	e241      	b.n	800a694 <_dtoa_r+0x95c>
 800a210:	07f2      	lsls	r2, r6, #31
 800a212:	d505      	bpl.n	800a220 <_dtoa_r+0x4e8>
 800a214:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	3501      	adds	r5, #1
 800a21e:	2301      	movs	r3, #1
 800a220:	1076      	asrs	r6, r6, #1
 800a222:	3708      	adds	r7, #8
 800a224:	e773      	b.n	800a10e <_dtoa_r+0x3d6>
 800a226:	2502      	movs	r5, #2
 800a228:	e775      	b.n	800a116 <_dtoa_r+0x3de>
 800a22a:	9e04      	ldr	r6, [sp, #16]
 800a22c:	465f      	mov	r7, fp
 800a22e:	e792      	b.n	800a156 <_dtoa_r+0x41e>
 800a230:	9900      	ldr	r1, [sp, #0]
 800a232:	4b50      	ldr	r3, [pc, #320]	; (800a374 <_dtoa_r+0x63c>)
 800a234:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a238:	4431      	add	r1, r6
 800a23a:	9102      	str	r1, [sp, #8]
 800a23c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a23e:	eeb0 9a47 	vmov.f32	s18, s14
 800a242:	eef0 9a67 	vmov.f32	s19, s15
 800a246:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a24a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a24e:	2900      	cmp	r1, #0
 800a250:	d044      	beq.n	800a2dc <_dtoa_r+0x5a4>
 800a252:	494e      	ldr	r1, [pc, #312]	; (800a38c <_dtoa_r+0x654>)
 800a254:	2000      	movs	r0, #0
 800a256:	f7f6 faf9 	bl	800084c <__aeabi_ddiv>
 800a25a:	ec53 2b19 	vmov	r2, r3, d9
 800a25e:	f7f6 f813 	bl	8000288 <__aeabi_dsub>
 800a262:	9d00      	ldr	r5, [sp, #0]
 800a264:	ec41 0b19 	vmov	d9, r0, r1
 800a268:	4649      	mov	r1, r9
 800a26a:	4640      	mov	r0, r8
 800a26c:	f7f6 fc74 	bl	8000b58 <__aeabi_d2iz>
 800a270:	4606      	mov	r6, r0
 800a272:	f7f6 f957 	bl	8000524 <__aeabi_i2d>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4640      	mov	r0, r8
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7f6 f803 	bl	8000288 <__aeabi_dsub>
 800a282:	3630      	adds	r6, #48	; 0x30
 800a284:	f805 6b01 	strb.w	r6, [r5], #1
 800a288:	ec53 2b19 	vmov	r2, r3, d9
 800a28c:	4680      	mov	r8, r0
 800a28e:	4689      	mov	r9, r1
 800a290:	f7f6 fc24 	bl	8000adc <__aeabi_dcmplt>
 800a294:	2800      	cmp	r0, #0
 800a296:	d164      	bne.n	800a362 <_dtoa_r+0x62a>
 800a298:	4642      	mov	r2, r8
 800a29a:	464b      	mov	r3, r9
 800a29c:	4937      	ldr	r1, [pc, #220]	; (800a37c <_dtoa_r+0x644>)
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f7f5 fff2 	bl	8000288 <__aeabi_dsub>
 800a2a4:	ec53 2b19 	vmov	r2, r3, d9
 800a2a8:	f7f6 fc18 	bl	8000adc <__aeabi_dcmplt>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	f040 80b6 	bne.w	800a41e <_dtoa_r+0x6e6>
 800a2b2:	9b02      	ldr	r3, [sp, #8]
 800a2b4:	429d      	cmp	r5, r3
 800a2b6:	f43f af7c 	beq.w	800a1b2 <_dtoa_r+0x47a>
 800a2ba:	4b31      	ldr	r3, [pc, #196]	; (800a380 <_dtoa_r+0x648>)
 800a2bc:	ec51 0b19 	vmov	r0, r1, d9
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f7f6 f999 	bl	80005f8 <__aeabi_dmul>
 800a2c6:	4b2e      	ldr	r3, [pc, #184]	; (800a380 <_dtoa_r+0x648>)
 800a2c8:	ec41 0b19 	vmov	d9, r0, r1
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	4689      	mov	r9, r1
 800a2da:	e7c5      	b.n	800a268 <_dtoa_r+0x530>
 800a2dc:	ec51 0b17 	vmov	r0, r1, d7
 800a2e0:	f7f6 f98a 	bl	80005f8 <__aeabi_dmul>
 800a2e4:	9b02      	ldr	r3, [sp, #8]
 800a2e6:	9d00      	ldr	r5, [sp, #0]
 800a2e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ea:	ec41 0b19 	vmov	d9, r0, r1
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	f7f6 fc31 	bl	8000b58 <__aeabi_d2iz>
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	f7f6 f914 	bl	8000524 <__aeabi_i2d>
 800a2fc:	3630      	adds	r6, #48	; 0x30
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4640      	mov	r0, r8
 800a304:	4649      	mov	r1, r9
 800a306:	f7f5 ffbf 	bl	8000288 <__aeabi_dsub>
 800a30a:	f805 6b01 	strb.w	r6, [r5], #1
 800a30e:	9b02      	ldr	r3, [sp, #8]
 800a310:	429d      	cmp	r5, r3
 800a312:	4680      	mov	r8, r0
 800a314:	4689      	mov	r9, r1
 800a316:	f04f 0200 	mov.w	r2, #0
 800a31a:	d124      	bne.n	800a366 <_dtoa_r+0x62e>
 800a31c:	4b1b      	ldr	r3, [pc, #108]	; (800a38c <_dtoa_r+0x654>)
 800a31e:	ec51 0b19 	vmov	r0, r1, d9
 800a322:	f7f5 ffb3 	bl	800028c <__adddf3>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4640      	mov	r0, r8
 800a32c:	4649      	mov	r1, r9
 800a32e:	f7f6 fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 800a332:	2800      	cmp	r0, #0
 800a334:	d173      	bne.n	800a41e <_dtoa_r+0x6e6>
 800a336:	ec53 2b19 	vmov	r2, r3, d9
 800a33a:	4914      	ldr	r1, [pc, #80]	; (800a38c <_dtoa_r+0x654>)
 800a33c:	2000      	movs	r0, #0
 800a33e:	f7f5 ffa3 	bl	8000288 <__aeabi_dsub>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4640      	mov	r0, r8
 800a348:	4649      	mov	r1, r9
 800a34a:	f7f6 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800a34e:	2800      	cmp	r0, #0
 800a350:	f43f af2f 	beq.w	800a1b2 <_dtoa_r+0x47a>
 800a354:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a356:	1e6b      	subs	r3, r5, #1
 800a358:	930f      	str	r3, [sp, #60]	; 0x3c
 800a35a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a35e:	2b30      	cmp	r3, #48	; 0x30
 800a360:	d0f8      	beq.n	800a354 <_dtoa_r+0x61c>
 800a362:	46bb      	mov	fp, r7
 800a364:	e04a      	b.n	800a3fc <_dtoa_r+0x6c4>
 800a366:	4b06      	ldr	r3, [pc, #24]	; (800a380 <_dtoa_r+0x648>)
 800a368:	f7f6 f946 	bl	80005f8 <__aeabi_dmul>
 800a36c:	4680      	mov	r8, r0
 800a36e:	4689      	mov	r9, r1
 800a370:	e7bd      	b.n	800a2ee <_dtoa_r+0x5b6>
 800a372:	bf00      	nop
 800a374:	0800ca90 	.word	0x0800ca90
 800a378:	0800ca68 	.word	0x0800ca68
 800a37c:	3ff00000 	.word	0x3ff00000
 800a380:	40240000 	.word	0x40240000
 800a384:	401c0000 	.word	0x401c0000
 800a388:	40140000 	.word	0x40140000
 800a38c:	3fe00000 	.word	0x3fe00000
 800a390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a394:	9d00      	ldr	r5, [sp, #0]
 800a396:	4642      	mov	r2, r8
 800a398:	464b      	mov	r3, r9
 800a39a:	4630      	mov	r0, r6
 800a39c:	4639      	mov	r1, r7
 800a39e:	f7f6 fa55 	bl	800084c <__aeabi_ddiv>
 800a3a2:	f7f6 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800a3a6:	9001      	str	r0, [sp, #4]
 800a3a8:	f7f6 f8bc 	bl	8000524 <__aeabi_i2d>
 800a3ac:	4642      	mov	r2, r8
 800a3ae:	464b      	mov	r3, r9
 800a3b0:	f7f6 f922 	bl	80005f8 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	f7f5 ff64 	bl	8000288 <__aeabi_dsub>
 800a3c0:	9e01      	ldr	r6, [sp, #4]
 800a3c2:	9f04      	ldr	r7, [sp, #16]
 800a3c4:	3630      	adds	r6, #48	; 0x30
 800a3c6:	f805 6b01 	strb.w	r6, [r5], #1
 800a3ca:	9e00      	ldr	r6, [sp, #0]
 800a3cc:	1bae      	subs	r6, r5, r6
 800a3ce:	42b7      	cmp	r7, r6
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	d134      	bne.n	800a440 <_dtoa_r+0x708>
 800a3d6:	f7f5 ff59 	bl	800028c <__adddf3>
 800a3da:	4642      	mov	r2, r8
 800a3dc:	464b      	mov	r3, r9
 800a3de:	4606      	mov	r6, r0
 800a3e0:	460f      	mov	r7, r1
 800a3e2:	f7f6 fb99 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e6:	b9c8      	cbnz	r0, 800a41c <_dtoa_r+0x6e4>
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f6 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f4:	b110      	cbz	r0, 800a3fc <_dtoa_r+0x6c4>
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	07db      	lsls	r3, r3, #31
 800a3fa:	d40f      	bmi.n	800a41c <_dtoa_r+0x6e4>
 800a3fc:	4651      	mov	r1, sl
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 fe82 	bl	800b108 <_Bfree>
 800a404:	2300      	movs	r3, #0
 800a406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a408:	702b      	strb	r3, [r5, #0]
 800a40a:	f10b 0301 	add.w	r3, fp, #1
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a412:	2b00      	cmp	r3, #0
 800a414:	f43f ace2 	beq.w	8009ddc <_dtoa_r+0xa4>
 800a418:	601d      	str	r5, [r3, #0]
 800a41a:	e4df      	b.n	8009ddc <_dtoa_r+0xa4>
 800a41c:	465f      	mov	r7, fp
 800a41e:	462b      	mov	r3, r5
 800a420:	461d      	mov	r5, r3
 800a422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a426:	2a39      	cmp	r2, #57	; 0x39
 800a428:	d106      	bne.n	800a438 <_dtoa_r+0x700>
 800a42a:	9a00      	ldr	r2, [sp, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d1f7      	bne.n	800a420 <_dtoa_r+0x6e8>
 800a430:	9900      	ldr	r1, [sp, #0]
 800a432:	2230      	movs	r2, #48	; 0x30
 800a434:	3701      	adds	r7, #1
 800a436:	700a      	strb	r2, [r1, #0]
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	3201      	adds	r2, #1
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	e790      	b.n	800a362 <_dtoa_r+0x62a>
 800a440:	4ba3      	ldr	r3, [pc, #652]	; (800a6d0 <_dtoa_r+0x998>)
 800a442:	2200      	movs	r2, #0
 800a444:	f7f6 f8d8 	bl	80005f8 <__aeabi_dmul>
 800a448:	2200      	movs	r2, #0
 800a44a:	2300      	movs	r3, #0
 800a44c:	4606      	mov	r6, r0
 800a44e:	460f      	mov	r7, r1
 800a450:	f7f6 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a454:	2800      	cmp	r0, #0
 800a456:	d09e      	beq.n	800a396 <_dtoa_r+0x65e>
 800a458:	e7d0      	b.n	800a3fc <_dtoa_r+0x6c4>
 800a45a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	f000 80ca 	beq.w	800a5f6 <_dtoa_r+0x8be>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	2a01      	cmp	r2, #1
 800a466:	f300 80ad 	bgt.w	800a5c4 <_dtoa_r+0x88c>
 800a46a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	f000 80a5 	beq.w	800a5bc <_dtoa_r+0x884>
 800a472:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a476:	9e08      	ldr	r6, [sp, #32]
 800a478:	9d05      	ldr	r5, [sp, #20]
 800a47a:	9a05      	ldr	r2, [sp, #20]
 800a47c:	441a      	add	r2, r3
 800a47e:	9205      	str	r2, [sp, #20]
 800a480:	9a06      	ldr	r2, [sp, #24]
 800a482:	2101      	movs	r1, #1
 800a484:	441a      	add	r2, r3
 800a486:	4620      	mov	r0, r4
 800a488:	9206      	str	r2, [sp, #24]
 800a48a:	f000 ff3d 	bl	800b308 <__i2b>
 800a48e:	4607      	mov	r7, r0
 800a490:	b165      	cbz	r5, 800a4ac <_dtoa_r+0x774>
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	2b00      	cmp	r3, #0
 800a496:	dd09      	ble.n	800a4ac <_dtoa_r+0x774>
 800a498:	42ab      	cmp	r3, r5
 800a49a:	9a05      	ldr	r2, [sp, #20]
 800a49c:	bfa8      	it	ge
 800a49e:	462b      	movge	r3, r5
 800a4a0:	1ad2      	subs	r2, r2, r3
 800a4a2:	9205      	str	r2, [sp, #20]
 800a4a4:	9a06      	ldr	r2, [sp, #24]
 800a4a6:	1aed      	subs	r5, r5, r3
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	9306      	str	r3, [sp, #24]
 800a4ac:	9b08      	ldr	r3, [sp, #32]
 800a4ae:	b1f3      	cbz	r3, 800a4ee <_dtoa_r+0x7b6>
 800a4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 80a3 	beq.w	800a5fe <_dtoa_r+0x8c6>
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	dd10      	ble.n	800a4de <_dtoa_r+0x7a6>
 800a4bc:	4639      	mov	r1, r7
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 ffe1 	bl	800b488 <__pow5mult>
 800a4c6:	4652      	mov	r2, sl
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	4607      	mov	r7, r0
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f000 ff31 	bl	800b334 <__multiply>
 800a4d2:	4651      	mov	r1, sl
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fe16 	bl	800b108 <_Bfree>
 800a4dc:	46c2      	mov	sl, r8
 800a4de:	9b08      	ldr	r3, [sp, #32]
 800a4e0:	1b9a      	subs	r2, r3, r6
 800a4e2:	d004      	beq.n	800a4ee <_dtoa_r+0x7b6>
 800a4e4:	4651      	mov	r1, sl
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 ffce 	bl	800b488 <__pow5mult>
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 ff09 	bl	800b308 <__i2b>
 800a4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	f340 8081 	ble.w	800a602 <_dtoa_r+0x8ca>
 800a500:	461a      	mov	r2, r3
 800a502:	4601      	mov	r1, r0
 800a504:	4620      	mov	r0, r4
 800a506:	f000 ffbf 	bl	800b488 <__pow5mult>
 800a50a:	9b07      	ldr	r3, [sp, #28]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	4606      	mov	r6, r0
 800a510:	dd7a      	ble.n	800a608 <_dtoa_r+0x8d0>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	6933      	ldr	r3, [r6, #16]
 800a518:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a51c:	6918      	ldr	r0, [r3, #16]
 800a51e:	f000 fea5 	bl	800b26c <__hi0bits>
 800a522:	f1c0 0020 	rsb	r0, r0, #32
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	4418      	add	r0, r3
 800a52a:	f010 001f 	ands.w	r0, r0, #31
 800a52e:	f000 8094 	beq.w	800a65a <_dtoa_r+0x922>
 800a532:	f1c0 0320 	rsb	r3, r0, #32
 800a536:	2b04      	cmp	r3, #4
 800a538:	f340 8085 	ble.w	800a646 <_dtoa_r+0x90e>
 800a53c:	9b05      	ldr	r3, [sp, #20]
 800a53e:	f1c0 001c 	rsb	r0, r0, #28
 800a542:	4403      	add	r3, r0
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	9b06      	ldr	r3, [sp, #24]
 800a548:	4403      	add	r3, r0
 800a54a:	4405      	add	r5, r0
 800a54c:	9306      	str	r3, [sp, #24]
 800a54e:	9b05      	ldr	r3, [sp, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	dd05      	ble.n	800a560 <_dtoa_r+0x828>
 800a554:	4651      	mov	r1, sl
 800a556:	461a      	mov	r2, r3
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 ffef 	bl	800b53c <__lshift>
 800a55e:	4682      	mov	sl, r0
 800a560:	9b06      	ldr	r3, [sp, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	dd05      	ble.n	800a572 <_dtoa_r+0x83a>
 800a566:	4631      	mov	r1, r6
 800a568:	461a      	mov	r2, r3
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 ffe6 	bl	800b53c <__lshift>
 800a570:	4606      	mov	r6, r0
 800a572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a574:	2b00      	cmp	r3, #0
 800a576:	d072      	beq.n	800a65e <_dtoa_r+0x926>
 800a578:	4631      	mov	r1, r6
 800a57a:	4650      	mov	r0, sl
 800a57c:	f001 f84a 	bl	800b614 <__mcmp>
 800a580:	2800      	cmp	r0, #0
 800a582:	da6c      	bge.n	800a65e <_dtoa_r+0x926>
 800a584:	2300      	movs	r3, #0
 800a586:	4651      	mov	r1, sl
 800a588:	220a      	movs	r2, #10
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fdde 	bl	800b14c <__multadd>
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a596:	4682      	mov	sl, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 81b0 	beq.w	800a8fe <_dtoa_r+0xbc6>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	220a      	movs	r2, #10
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 fdd1 	bl	800b14c <__multadd>
 800a5aa:	9b01      	ldr	r3, [sp, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	f300 8096 	bgt.w	800a6e0 <_dtoa_r+0x9a8>
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	dc59      	bgt.n	800a66e <_dtoa_r+0x936>
 800a5ba:	e091      	b.n	800a6e0 <_dtoa_r+0x9a8>
 800a5bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5c2:	e758      	b.n	800a476 <_dtoa_r+0x73e>
 800a5c4:	9b04      	ldr	r3, [sp, #16]
 800a5c6:	1e5e      	subs	r6, r3, #1
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	42b3      	cmp	r3, r6
 800a5cc:	bfbf      	itttt	lt
 800a5ce:	9b08      	ldrlt	r3, [sp, #32]
 800a5d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a5d2:	9608      	strlt	r6, [sp, #32]
 800a5d4:	1af3      	sublt	r3, r6, r3
 800a5d6:	bfb4      	ite	lt
 800a5d8:	18d2      	addlt	r2, r2, r3
 800a5da:	1b9e      	subge	r6, r3, r6
 800a5dc:	9b04      	ldr	r3, [sp, #16]
 800a5de:	bfbc      	itt	lt
 800a5e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a5e2:	2600      	movlt	r6, #0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bfb7      	itett	lt
 800a5e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a5ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a5f0:	1a9d      	sublt	r5, r3, r2
 800a5f2:	2300      	movlt	r3, #0
 800a5f4:	e741      	b.n	800a47a <_dtoa_r+0x742>
 800a5f6:	9e08      	ldr	r6, [sp, #32]
 800a5f8:	9d05      	ldr	r5, [sp, #20]
 800a5fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5fc:	e748      	b.n	800a490 <_dtoa_r+0x758>
 800a5fe:	9a08      	ldr	r2, [sp, #32]
 800a600:	e770      	b.n	800a4e4 <_dtoa_r+0x7ac>
 800a602:	9b07      	ldr	r3, [sp, #28]
 800a604:	2b01      	cmp	r3, #1
 800a606:	dc19      	bgt.n	800a63c <_dtoa_r+0x904>
 800a608:	9b02      	ldr	r3, [sp, #8]
 800a60a:	b9bb      	cbnz	r3, 800a63c <_dtoa_r+0x904>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a612:	b99b      	cbnz	r3, 800a63c <_dtoa_r+0x904>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a61a:	0d1b      	lsrs	r3, r3, #20
 800a61c:	051b      	lsls	r3, r3, #20
 800a61e:	b183      	cbz	r3, 800a642 <_dtoa_r+0x90a>
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	3301      	adds	r3, #1
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	3301      	adds	r3, #1
 800a62a:	9306      	str	r3, [sp, #24]
 800a62c:	f04f 0801 	mov.w	r8, #1
 800a630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a632:	2b00      	cmp	r3, #0
 800a634:	f47f af6f 	bne.w	800a516 <_dtoa_r+0x7de>
 800a638:	2001      	movs	r0, #1
 800a63a:	e774      	b.n	800a526 <_dtoa_r+0x7ee>
 800a63c:	f04f 0800 	mov.w	r8, #0
 800a640:	e7f6      	b.n	800a630 <_dtoa_r+0x8f8>
 800a642:	4698      	mov	r8, r3
 800a644:	e7f4      	b.n	800a630 <_dtoa_r+0x8f8>
 800a646:	d082      	beq.n	800a54e <_dtoa_r+0x816>
 800a648:	9a05      	ldr	r2, [sp, #20]
 800a64a:	331c      	adds	r3, #28
 800a64c:	441a      	add	r2, r3
 800a64e:	9205      	str	r2, [sp, #20]
 800a650:	9a06      	ldr	r2, [sp, #24]
 800a652:	441a      	add	r2, r3
 800a654:	441d      	add	r5, r3
 800a656:	9206      	str	r2, [sp, #24]
 800a658:	e779      	b.n	800a54e <_dtoa_r+0x816>
 800a65a:	4603      	mov	r3, r0
 800a65c:	e7f4      	b.n	800a648 <_dtoa_r+0x910>
 800a65e:	9b04      	ldr	r3, [sp, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	dc37      	bgt.n	800a6d4 <_dtoa_r+0x99c>
 800a664:	9b07      	ldr	r3, [sp, #28]
 800a666:	2b02      	cmp	r3, #2
 800a668:	dd34      	ble.n	800a6d4 <_dtoa_r+0x99c>
 800a66a:	9b04      	ldr	r3, [sp, #16]
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	9b01      	ldr	r3, [sp, #4]
 800a670:	b963      	cbnz	r3, 800a68c <_dtoa_r+0x954>
 800a672:	4631      	mov	r1, r6
 800a674:	2205      	movs	r2, #5
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fd68 	bl	800b14c <__multadd>
 800a67c:	4601      	mov	r1, r0
 800a67e:	4606      	mov	r6, r0
 800a680:	4650      	mov	r0, sl
 800a682:	f000 ffc7 	bl	800b614 <__mcmp>
 800a686:	2800      	cmp	r0, #0
 800a688:	f73f adbb 	bgt.w	800a202 <_dtoa_r+0x4ca>
 800a68c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a68e:	9d00      	ldr	r5, [sp, #0]
 800a690:	ea6f 0b03 	mvn.w	fp, r3
 800a694:	f04f 0800 	mov.w	r8, #0
 800a698:	4631      	mov	r1, r6
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fd34 	bl	800b108 <_Bfree>
 800a6a0:	2f00      	cmp	r7, #0
 800a6a2:	f43f aeab 	beq.w	800a3fc <_dtoa_r+0x6c4>
 800a6a6:	f1b8 0f00 	cmp.w	r8, #0
 800a6aa:	d005      	beq.n	800a6b8 <_dtoa_r+0x980>
 800a6ac:	45b8      	cmp	r8, r7
 800a6ae:	d003      	beq.n	800a6b8 <_dtoa_r+0x980>
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fd28 	bl	800b108 <_Bfree>
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 fd24 	bl	800b108 <_Bfree>
 800a6c0:	e69c      	b.n	800a3fc <_dtoa_r+0x6c4>
 800a6c2:	2600      	movs	r6, #0
 800a6c4:	4637      	mov	r7, r6
 800a6c6:	e7e1      	b.n	800a68c <_dtoa_r+0x954>
 800a6c8:	46bb      	mov	fp, r7
 800a6ca:	4637      	mov	r7, r6
 800a6cc:	e599      	b.n	800a202 <_dtoa_r+0x4ca>
 800a6ce:	bf00      	nop
 800a6d0:	40240000 	.word	0x40240000
 800a6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 80c8 	beq.w	800a86c <_dtoa_r+0xb34>
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	dd05      	ble.n	800a6f0 <_dtoa_r+0x9b8>
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 ff27 	bl	800b53c <__lshift>
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	f1b8 0f00 	cmp.w	r8, #0
 800a6f4:	d05b      	beq.n	800a7ae <_dtoa_r+0xa76>
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fcc5 	bl	800b088 <_Balloc>
 800a6fe:	4605      	mov	r5, r0
 800a700:	b928      	cbnz	r0, 800a70e <_dtoa_r+0x9d6>
 800a702:	4b83      	ldr	r3, [pc, #524]	; (800a910 <_dtoa_r+0xbd8>)
 800a704:	4602      	mov	r2, r0
 800a706:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a70a:	f7ff bb2e 	b.w	8009d6a <_dtoa_r+0x32>
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	3202      	adds	r2, #2
 800a712:	0092      	lsls	r2, r2, #2
 800a714:	f107 010c 	add.w	r1, r7, #12
 800a718:	300c      	adds	r0, #12
 800a71a:	f7ff fa4a 	bl	8009bb2 <memcpy>
 800a71e:	2201      	movs	r2, #1
 800a720:	4629      	mov	r1, r5
 800a722:	4620      	mov	r0, r4
 800a724:	f000 ff0a 	bl	800b53c <__lshift>
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	3301      	adds	r3, #1
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a732:	4413      	add	r3, r2
 800a734:	9308      	str	r3, [sp, #32]
 800a736:	9b02      	ldr	r3, [sp, #8]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	46b8      	mov	r8, r7
 800a73e:	9306      	str	r3, [sp, #24]
 800a740:	4607      	mov	r7, r0
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	4631      	mov	r1, r6
 800a746:	3b01      	subs	r3, #1
 800a748:	4650      	mov	r0, sl
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	f7ff fa6c 	bl	8009c28 <quorem>
 800a750:	4641      	mov	r1, r8
 800a752:	9002      	str	r0, [sp, #8]
 800a754:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a758:	4650      	mov	r0, sl
 800a75a:	f000 ff5b 	bl	800b614 <__mcmp>
 800a75e:	463a      	mov	r2, r7
 800a760:	9005      	str	r0, [sp, #20]
 800a762:	4631      	mov	r1, r6
 800a764:	4620      	mov	r0, r4
 800a766:	f000 ff71 	bl	800b64c <__mdiff>
 800a76a:	68c2      	ldr	r2, [r0, #12]
 800a76c:	4605      	mov	r5, r0
 800a76e:	bb02      	cbnz	r2, 800a7b2 <_dtoa_r+0xa7a>
 800a770:	4601      	mov	r1, r0
 800a772:	4650      	mov	r0, sl
 800a774:	f000 ff4e 	bl	800b614 <__mcmp>
 800a778:	4602      	mov	r2, r0
 800a77a:	4629      	mov	r1, r5
 800a77c:	4620      	mov	r0, r4
 800a77e:	9209      	str	r2, [sp, #36]	; 0x24
 800a780:	f000 fcc2 	bl	800b108 <_Bfree>
 800a784:	9b07      	ldr	r3, [sp, #28]
 800a786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a788:	9d04      	ldr	r5, [sp, #16]
 800a78a:	ea43 0102 	orr.w	r1, r3, r2
 800a78e:	9b06      	ldr	r3, [sp, #24]
 800a790:	4319      	orrs	r1, r3
 800a792:	d110      	bne.n	800a7b6 <_dtoa_r+0xa7e>
 800a794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a798:	d029      	beq.n	800a7ee <_dtoa_r+0xab6>
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd02      	ble.n	800a7a6 <_dtoa_r+0xa6e>
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	f883 9000 	strb.w	r9, [r3]
 800a7ac:	e774      	b.n	800a698 <_dtoa_r+0x960>
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	e7ba      	b.n	800a728 <_dtoa_r+0x9f0>
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	e7e1      	b.n	800a77a <_dtoa_r+0xa42>
 800a7b6:	9b05      	ldr	r3, [sp, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	db04      	blt.n	800a7c6 <_dtoa_r+0xa8e>
 800a7bc:	9907      	ldr	r1, [sp, #28]
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	9906      	ldr	r1, [sp, #24]
 800a7c2:	430b      	orrs	r3, r1
 800a7c4:	d120      	bne.n	800a808 <_dtoa_r+0xad0>
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	dded      	ble.n	800a7a6 <_dtoa_r+0xa6e>
 800a7ca:	4651      	mov	r1, sl
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 feb4 	bl	800b53c <__lshift>
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4682      	mov	sl, r0
 800a7d8:	f000 ff1c 	bl	800b614 <__mcmp>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	dc03      	bgt.n	800a7e8 <_dtoa_r+0xab0>
 800a7e0:	d1e1      	bne.n	800a7a6 <_dtoa_r+0xa6e>
 800a7e2:	f019 0f01 	tst.w	r9, #1
 800a7e6:	d0de      	beq.n	800a7a6 <_dtoa_r+0xa6e>
 800a7e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7ec:	d1d8      	bne.n	800a7a0 <_dtoa_r+0xa68>
 800a7ee:	9a01      	ldr	r2, [sp, #4]
 800a7f0:	2339      	movs	r3, #57	; 0x39
 800a7f2:	7013      	strb	r3, [r2, #0]
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	461d      	mov	r5, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7fe:	2a39      	cmp	r2, #57	; 0x39
 800a800:	d06c      	beq.n	800a8dc <_dtoa_r+0xba4>
 800a802:	3201      	adds	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
 800a806:	e747      	b.n	800a698 <_dtoa_r+0x960>
 800a808:	2a00      	cmp	r2, #0
 800a80a:	dd07      	ble.n	800a81c <_dtoa_r+0xae4>
 800a80c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a810:	d0ed      	beq.n	800a7ee <_dtoa_r+0xab6>
 800a812:	9a01      	ldr	r2, [sp, #4]
 800a814:	f109 0301 	add.w	r3, r9, #1
 800a818:	7013      	strb	r3, [r2, #0]
 800a81a:	e73d      	b.n	800a698 <_dtoa_r+0x960>
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	9a08      	ldr	r2, [sp, #32]
 800a820:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a824:	4293      	cmp	r3, r2
 800a826:	d043      	beq.n	800a8b0 <_dtoa_r+0xb78>
 800a828:	4651      	mov	r1, sl
 800a82a:	2300      	movs	r3, #0
 800a82c:	220a      	movs	r2, #10
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 fc8c 	bl	800b14c <__multadd>
 800a834:	45b8      	cmp	r8, r7
 800a836:	4682      	mov	sl, r0
 800a838:	f04f 0300 	mov.w	r3, #0
 800a83c:	f04f 020a 	mov.w	r2, #10
 800a840:	4641      	mov	r1, r8
 800a842:	4620      	mov	r0, r4
 800a844:	d107      	bne.n	800a856 <_dtoa_r+0xb1e>
 800a846:	f000 fc81 	bl	800b14c <__multadd>
 800a84a:	4680      	mov	r8, r0
 800a84c:	4607      	mov	r7, r0
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	3301      	adds	r3, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	e775      	b.n	800a742 <_dtoa_r+0xa0a>
 800a856:	f000 fc79 	bl	800b14c <__multadd>
 800a85a:	4639      	mov	r1, r7
 800a85c:	4680      	mov	r8, r0
 800a85e:	2300      	movs	r3, #0
 800a860:	220a      	movs	r2, #10
 800a862:	4620      	mov	r0, r4
 800a864:	f000 fc72 	bl	800b14c <__multadd>
 800a868:	4607      	mov	r7, r0
 800a86a:	e7f0      	b.n	800a84e <_dtoa_r+0xb16>
 800a86c:	9b04      	ldr	r3, [sp, #16]
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	9d00      	ldr	r5, [sp, #0]
 800a872:	4631      	mov	r1, r6
 800a874:	4650      	mov	r0, sl
 800a876:	f7ff f9d7 	bl	8009c28 <quorem>
 800a87a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	f805 9b01 	strb.w	r9, [r5], #1
 800a884:	1aea      	subs	r2, r5, r3
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	4293      	cmp	r3, r2
 800a88a:	dd07      	ble.n	800a89c <_dtoa_r+0xb64>
 800a88c:	4651      	mov	r1, sl
 800a88e:	2300      	movs	r3, #0
 800a890:	220a      	movs	r2, #10
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fc5a 	bl	800b14c <__multadd>
 800a898:	4682      	mov	sl, r0
 800a89a:	e7ea      	b.n	800a872 <_dtoa_r+0xb3a>
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfc8      	it	gt
 800a8a2:	461d      	movgt	r5, r3
 800a8a4:	9b00      	ldr	r3, [sp, #0]
 800a8a6:	bfd8      	it	le
 800a8a8:	2501      	movle	r5, #1
 800a8aa:	441d      	add	r5, r3
 800a8ac:	f04f 0800 	mov.w	r8, #0
 800a8b0:	4651      	mov	r1, sl
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fe41 	bl	800b53c <__lshift>
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4682      	mov	sl, r0
 800a8be:	f000 fea9 	bl	800b614 <__mcmp>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	dc96      	bgt.n	800a7f4 <_dtoa_r+0xabc>
 800a8c6:	d102      	bne.n	800a8ce <_dtoa_r+0xb96>
 800a8c8:	f019 0f01 	tst.w	r9, #1
 800a8cc:	d192      	bne.n	800a7f4 <_dtoa_r+0xabc>
 800a8ce:	462b      	mov	r3, r5
 800a8d0:	461d      	mov	r5, r3
 800a8d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8d6:	2a30      	cmp	r2, #48	; 0x30
 800a8d8:	d0fa      	beq.n	800a8d0 <_dtoa_r+0xb98>
 800a8da:	e6dd      	b.n	800a698 <_dtoa_r+0x960>
 800a8dc:	9a00      	ldr	r2, [sp, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d189      	bne.n	800a7f6 <_dtoa_r+0xabe>
 800a8e2:	f10b 0b01 	add.w	fp, fp, #1
 800a8e6:	2331      	movs	r3, #49	; 0x31
 800a8e8:	e796      	b.n	800a818 <_dtoa_r+0xae0>
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <_dtoa_r+0xbdc>)
 800a8ec:	f7ff ba99 	b.w	8009e22 <_dtoa_r+0xea>
 800a8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f47f aa6d 	bne.w	8009dd2 <_dtoa_r+0x9a>
 800a8f8:	4b07      	ldr	r3, [pc, #28]	; (800a918 <_dtoa_r+0xbe0>)
 800a8fa:	f7ff ba92 	b.w	8009e22 <_dtoa_r+0xea>
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dcb5      	bgt.n	800a870 <_dtoa_r+0xb38>
 800a904:	9b07      	ldr	r3, [sp, #28]
 800a906:	2b02      	cmp	r3, #2
 800a908:	f73f aeb1 	bgt.w	800a66e <_dtoa_r+0x936>
 800a90c:	e7b0      	b.n	800a870 <_dtoa_r+0xb38>
 800a90e:	bf00      	nop
 800a910:	0800c99b 	.word	0x0800c99b
 800a914:	0800c858 	.word	0x0800c858
 800a918:	0800c936 	.word	0x0800c936

0800a91c <_free_r>:
 800a91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91e:	2900      	cmp	r1, #0
 800a920:	d044      	beq.n	800a9ac <_free_r+0x90>
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	9001      	str	r0, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f1a1 0404 	sub.w	r4, r1, #4
 800a92e:	bfb8      	it	lt
 800a930:	18e4      	addlt	r4, r4, r3
 800a932:	f7fd fa23 	bl	8007d7c <__malloc_lock>
 800a936:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <_free_r+0x94>)
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	b933      	cbnz	r3, 800a94c <_free_r+0x30>
 800a93e:	6063      	str	r3, [r4, #4]
 800a940:	6014      	str	r4, [r2, #0]
 800a942:	b003      	add	sp, #12
 800a944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a948:	f7fd ba1e 	b.w	8007d88 <__malloc_unlock>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d908      	bls.n	800a962 <_free_r+0x46>
 800a950:	6825      	ldr	r5, [r4, #0]
 800a952:	1961      	adds	r1, r4, r5
 800a954:	428b      	cmp	r3, r1
 800a956:	bf01      	itttt	eq
 800a958:	6819      	ldreq	r1, [r3, #0]
 800a95a:	685b      	ldreq	r3, [r3, #4]
 800a95c:	1949      	addeq	r1, r1, r5
 800a95e:	6021      	streq	r1, [r4, #0]
 800a960:	e7ed      	b.n	800a93e <_free_r+0x22>
 800a962:	461a      	mov	r2, r3
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b10b      	cbz	r3, 800a96c <_free_r+0x50>
 800a968:	42a3      	cmp	r3, r4
 800a96a:	d9fa      	bls.n	800a962 <_free_r+0x46>
 800a96c:	6811      	ldr	r1, [r2, #0]
 800a96e:	1855      	adds	r5, r2, r1
 800a970:	42a5      	cmp	r5, r4
 800a972:	d10b      	bne.n	800a98c <_free_r+0x70>
 800a974:	6824      	ldr	r4, [r4, #0]
 800a976:	4421      	add	r1, r4
 800a978:	1854      	adds	r4, r2, r1
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	6011      	str	r1, [r2, #0]
 800a97e:	d1e0      	bne.n	800a942 <_free_r+0x26>
 800a980:	681c      	ldr	r4, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	6053      	str	r3, [r2, #4]
 800a986:	440c      	add	r4, r1
 800a988:	6014      	str	r4, [r2, #0]
 800a98a:	e7da      	b.n	800a942 <_free_r+0x26>
 800a98c:	d902      	bls.n	800a994 <_free_r+0x78>
 800a98e:	230c      	movs	r3, #12
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	e7d6      	b.n	800a942 <_free_r+0x26>
 800a994:	6825      	ldr	r5, [r4, #0]
 800a996:	1961      	adds	r1, r4, r5
 800a998:	428b      	cmp	r3, r1
 800a99a:	bf04      	itt	eq
 800a99c:	6819      	ldreq	r1, [r3, #0]
 800a99e:	685b      	ldreq	r3, [r3, #4]
 800a9a0:	6063      	str	r3, [r4, #4]
 800a9a2:	bf04      	itt	eq
 800a9a4:	1949      	addeq	r1, r1, r5
 800a9a6:	6021      	streq	r1, [r4, #0]
 800a9a8:	6054      	str	r4, [r2, #4]
 800a9aa:	e7ca      	b.n	800a942 <_free_r+0x26>
 800a9ac:	b003      	add	sp, #12
 800a9ae:	bd30      	pop	{r4, r5, pc}
 800a9b0:	20000dbc 	.word	0x20000dbc

0800a9b4 <rshift>:
 800a9b4:	6903      	ldr	r3, [r0, #16]
 800a9b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9c2:	f100 0414 	add.w	r4, r0, #20
 800a9c6:	dd45      	ble.n	800aa54 <rshift+0xa0>
 800a9c8:	f011 011f 	ands.w	r1, r1, #31
 800a9cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9d4:	d10c      	bne.n	800a9f0 <rshift+0x3c>
 800a9d6:	f100 0710 	add.w	r7, r0, #16
 800a9da:	4629      	mov	r1, r5
 800a9dc:	42b1      	cmp	r1, r6
 800a9de:	d334      	bcc.n	800aa4a <rshift+0x96>
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	1eea      	subs	r2, r5, #3
 800a9e6:	4296      	cmp	r6, r2
 800a9e8:	bf38      	it	cc
 800a9ea:	2300      	movcc	r3, #0
 800a9ec:	4423      	add	r3, r4
 800a9ee:	e015      	b.n	800aa1c <rshift+0x68>
 800a9f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9f4:	f1c1 0820 	rsb	r8, r1, #32
 800a9f8:	40cf      	lsrs	r7, r1
 800a9fa:	f105 0e04 	add.w	lr, r5, #4
 800a9fe:	46a1      	mov	r9, r4
 800aa00:	4576      	cmp	r6, lr
 800aa02:	46f4      	mov	ip, lr
 800aa04:	d815      	bhi.n	800aa32 <rshift+0x7e>
 800aa06:	1a9a      	subs	r2, r3, r2
 800aa08:	0092      	lsls	r2, r2, #2
 800aa0a:	3a04      	subs	r2, #4
 800aa0c:	3501      	adds	r5, #1
 800aa0e:	42ae      	cmp	r6, r5
 800aa10:	bf38      	it	cc
 800aa12:	2200      	movcc	r2, #0
 800aa14:	18a3      	adds	r3, r4, r2
 800aa16:	50a7      	str	r7, [r4, r2]
 800aa18:	b107      	cbz	r7, 800aa1c <rshift+0x68>
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	1b1a      	subs	r2, r3, r4
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa24:	bf08      	it	eq
 800aa26:	2300      	moveq	r3, #0
 800aa28:	6102      	str	r2, [r0, #16]
 800aa2a:	bf08      	it	eq
 800aa2c:	6143      	streq	r3, [r0, #20]
 800aa2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa32:	f8dc c000 	ldr.w	ip, [ip]
 800aa36:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa3a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa3e:	f849 7b04 	str.w	r7, [r9], #4
 800aa42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa46:	40cf      	lsrs	r7, r1
 800aa48:	e7da      	b.n	800aa00 <rshift+0x4c>
 800aa4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa52:	e7c3      	b.n	800a9dc <rshift+0x28>
 800aa54:	4623      	mov	r3, r4
 800aa56:	e7e1      	b.n	800aa1c <rshift+0x68>

0800aa58 <__hexdig_fun>:
 800aa58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa5c:	2b09      	cmp	r3, #9
 800aa5e:	d802      	bhi.n	800aa66 <__hexdig_fun+0xe>
 800aa60:	3820      	subs	r0, #32
 800aa62:	b2c0      	uxtb	r0, r0
 800aa64:	4770      	bx	lr
 800aa66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa6a:	2b05      	cmp	r3, #5
 800aa6c:	d801      	bhi.n	800aa72 <__hexdig_fun+0x1a>
 800aa6e:	3847      	subs	r0, #71	; 0x47
 800aa70:	e7f7      	b.n	800aa62 <__hexdig_fun+0xa>
 800aa72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	d801      	bhi.n	800aa7e <__hexdig_fun+0x26>
 800aa7a:	3827      	subs	r0, #39	; 0x27
 800aa7c:	e7f1      	b.n	800aa62 <__hexdig_fun+0xa>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	4770      	bx	lr
	...

0800aa84 <__gethex>:
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	4617      	mov	r7, r2
 800aa8a:	680a      	ldr	r2, [r1, #0]
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	f102 0b02 	add.w	fp, r2, #2
 800aa92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa9a:	4681      	mov	r9, r0
 800aa9c:	468a      	mov	sl, r1
 800aa9e:	9302      	str	r3, [sp, #8]
 800aaa0:	32fe      	adds	r2, #254	; 0xfe
 800aaa2:	eb02 030b 	add.w	r3, r2, fp
 800aaa6:	46d8      	mov	r8, fp
 800aaa8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	2830      	cmp	r0, #48	; 0x30
 800aab0:	d0f7      	beq.n	800aaa2 <__gethex+0x1e>
 800aab2:	f7ff ffd1 	bl	800aa58 <__hexdig_fun>
 800aab6:	4604      	mov	r4, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d138      	bne.n	800ab2e <__gethex+0xaa>
 800aabc:	49a7      	ldr	r1, [pc, #668]	; (800ad5c <__gethex+0x2d8>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	4640      	mov	r0, r8
 800aac2:	f7fe ff80 	bl	80099c6 <strncmp>
 800aac6:	4606      	mov	r6, r0
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d169      	bne.n	800aba0 <__gethex+0x11c>
 800aacc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800aad0:	465d      	mov	r5, fp
 800aad2:	f7ff ffc1 	bl	800aa58 <__hexdig_fun>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d064      	beq.n	800aba4 <__gethex+0x120>
 800aada:	465a      	mov	r2, fp
 800aadc:	7810      	ldrb	r0, [r2, #0]
 800aade:	2830      	cmp	r0, #48	; 0x30
 800aae0:	4690      	mov	r8, r2
 800aae2:	f102 0201 	add.w	r2, r2, #1
 800aae6:	d0f9      	beq.n	800aadc <__gethex+0x58>
 800aae8:	f7ff ffb6 	bl	800aa58 <__hexdig_fun>
 800aaec:	2301      	movs	r3, #1
 800aaee:	fab0 f480 	clz	r4, r0
 800aaf2:	0964      	lsrs	r4, r4, #5
 800aaf4:	465e      	mov	r6, fp
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	4642      	mov	r2, r8
 800aafa:	4615      	mov	r5, r2
 800aafc:	3201      	adds	r2, #1
 800aafe:	7828      	ldrb	r0, [r5, #0]
 800ab00:	f7ff ffaa 	bl	800aa58 <__hexdig_fun>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d1f8      	bne.n	800aafa <__gethex+0x76>
 800ab08:	4994      	ldr	r1, [pc, #592]	; (800ad5c <__gethex+0x2d8>)
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f7fe ff5a 	bl	80099c6 <strncmp>
 800ab12:	b978      	cbnz	r0, 800ab34 <__gethex+0xb0>
 800ab14:	b946      	cbnz	r6, 800ab28 <__gethex+0xa4>
 800ab16:	1c6e      	adds	r6, r5, #1
 800ab18:	4632      	mov	r2, r6
 800ab1a:	4615      	mov	r5, r2
 800ab1c:	3201      	adds	r2, #1
 800ab1e:	7828      	ldrb	r0, [r5, #0]
 800ab20:	f7ff ff9a 	bl	800aa58 <__hexdig_fun>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d1f8      	bne.n	800ab1a <__gethex+0x96>
 800ab28:	1b73      	subs	r3, r6, r5
 800ab2a:	009e      	lsls	r6, r3, #2
 800ab2c:	e004      	b.n	800ab38 <__gethex+0xb4>
 800ab2e:	2400      	movs	r4, #0
 800ab30:	4626      	mov	r6, r4
 800ab32:	e7e1      	b.n	800aaf8 <__gethex+0x74>
 800ab34:	2e00      	cmp	r6, #0
 800ab36:	d1f7      	bne.n	800ab28 <__gethex+0xa4>
 800ab38:	782b      	ldrb	r3, [r5, #0]
 800ab3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab3e:	2b50      	cmp	r3, #80	; 0x50
 800ab40:	d13d      	bne.n	800abbe <__gethex+0x13a>
 800ab42:	786b      	ldrb	r3, [r5, #1]
 800ab44:	2b2b      	cmp	r3, #43	; 0x2b
 800ab46:	d02f      	beq.n	800aba8 <__gethex+0x124>
 800ab48:	2b2d      	cmp	r3, #45	; 0x2d
 800ab4a:	d031      	beq.n	800abb0 <__gethex+0x12c>
 800ab4c:	1c69      	adds	r1, r5, #1
 800ab4e:	f04f 0b00 	mov.w	fp, #0
 800ab52:	7808      	ldrb	r0, [r1, #0]
 800ab54:	f7ff ff80 	bl	800aa58 <__hexdig_fun>
 800ab58:	1e42      	subs	r2, r0, #1
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	2a18      	cmp	r2, #24
 800ab5e:	d82e      	bhi.n	800abbe <__gethex+0x13a>
 800ab60:	f1a0 0210 	sub.w	r2, r0, #16
 800ab64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab68:	f7ff ff76 	bl	800aa58 <__hexdig_fun>
 800ab6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab70:	fa5f fc8c 	uxtb.w	ip, ip
 800ab74:	f1bc 0f18 	cmp.w	ip, #24
 800ab78:	d91d      	bls.n	800abb6 <__gethex+0x132>
 800ab7a:	f1bb 0f00 	cmp.w	fp, #0
 800ab7e:	d000      	beq.n	800ab82 <__gethex+0xfe>
 800ab80:	4252      	negs	r2, r2
 800ab82:	4416      	add	r6, r2
 800ab84:	f8ca 1000 	str.w	r1, [sl]
 800ab88:	b1dc      	cbz	r4, 800abc2 <__gethex+0x13e>
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf14      	ite	ne
 800ab90:	f04f 0800 	movne.w	r8, #0
 800ab94:	f04f 0806 	moveq.w	r8, #6
 800ab98:	4640      	mov	r0, r8
 800ab9a:	b005      	add	sp, #20
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba0:	4645      	mov	r5, r8
 800aba2:	4626      	mov	r6, r4
 800aba4:	2401      	movs	r4, #1
 800aba6:	e7c7      	b.n	800ab38 <__gethex+0xb4>
 800aba8:	f04f 0b00 	mov.w	fp, #0
 800abac:	1ca9      	adds	r1, r5, #2
 800abae:	e7d0      	b.n	800ab52 <__gethex+0xce>
 800abb0:	f04f 0b01 	mov.w	fp, #1
 800abb4:	e7fa      	b.n	800abac <__gethex+0x128>
 800abb6:	230a      	movs	r3, #10
 800abb8:	fb03 0002 	mla	r0, r3, r2, r0
 800abbc:	e7d0      	b.n	800ab60 <__gethex+0xdc>
 800abbe:	4629      	mov	r1, r5
 800abc0:	e7e0      	b.n	800ab84 <__gethex+0x100>
 800abc2:	eba5 0308 	sub.w	r3, r5, r8
 800abc6:	3b01      	subs	r3, #1
 800abc8:	4621      	mov	r1, r4
 800abca:	2b07      	cmp	r3, #7
 800abcc:	dc0a      	bgt.n	800abe4 <__gethex+0x160>
 800abce:	4648      	mov	r0, r9
 800abd0:	f000 fa5a 	bl	800b088 <_Balloc>
 800abd4:	4604      	mov	r4, r0
 800abd6:	b940      	cbnz	r0, 800abea <__gethex+0x166>
 800abd8:	4b61      	ldr	r3, [pc, #388]	; (800ad60 <__gethex+0x2dc>)
 800abda:	4602      	mov	r2, r0
 800abdc:	21e4      	movs	r1, #228	; 0xe4
 800abde:	4861      	ldr	r0, [pc, #388]	; (800ad64 <__gethex+0x2e0>)
 800abe0:	f7ff f804 	bl	8009bec <__assert_func>
 800abe4:	3101      	adds	r1, #1
 800abe6:	105b      	asrs	r3, r3, #1
 800abe8:	e7ef      	b.n	800abca <__gethex+0x146>
 800abea:	f100 0a14 	add.w	sl, r0, #20
 800abee:	2300      	movs	r3, #0
 800abf0:	495a      	ldr	r1, [pc, #360]	; (800ad5c <__gethex+0x2d8>)
 800abf2:	f8cd a004 	str.w	sl, [sp, #4]
 800abf6:	469b      	mov	fp, r3
 800abf8:	45a8      	cmp	r8, r5
 800abfa:	d342      	bcc.n	800ac82 <__gethex+0x1fe>
 800abfc:	9801      	ldr	r0, [sp, #4]
 800abfe:	f840 bb04 	str.w	fp, [r0], #4
 800ac02:	eba0 000a 	sub.w	r0, r0, sl
 800ac06:	1080      	asrs	r0, r0, #2
 800ac08:	6120      	str	r0, [r4, #16]
 800ac0a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ac0e:	4658      	mov	r0, fp
 800ac10:	f000 fb2c 	bl	800b26c <__hi0bits>
 800ac14:	683d      	ldr	r5, [r7, #0]
 800ac16:	eba8 0000 	sub.w	r0, r8, r0
 800ac1a:	42a8      	cmp	r0, r5
 800ac1c:	dd59      	ble.n	800acd2 <__gethex+0x24e>
 800ac1e:	eba0 0805 	sub.w	r8, r0, r5
 800ac22:	4641      	mov	r1, r8
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 febb 	bl	800b9a0 <__any_on>
 800ac2a:	4683      	mov	fp, r0
 800ac2c:	b1b8      	cbz	r0, 800ac5e <__gethex+0x1da>
 800ac2e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac32:	1159      	asrs	r1, r3, #5
 800ac34:	f003 021f 	and.w	r2, r3, #31
 800ac38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac3c:	f04f 0b01 	mov.w	fp, #1
 800ac40:	fa0b f202 	lsl.w	r2, fp, r2
 800ac44:	420a      	tst	r2, r1
 800ac46:	d00a      	beq.n	800ac5e <__gethex+0x1da>
 800ac48:	455b      	cmp	r3, fp
 800ac4a:	dd06      	ble.n	800ac5a <__gethex+0x1d6>
 800ac4c:	f1a8 0102 	sub.w	r1, r8, #2
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fea5 	bl	800b9a0 <__any_on>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d138      	bne.n	800accc <__gethex+0x248>
 800ac5a:	f04f 0b02 	mov.w	fp, #2
 800ac5e:	4641      	mov	r1, r8
 800ac60:	4620      	mov	r0, r4
 800ac62:	f7ff fea7 	bl	800a9b4 <rshift>
 800ac66:	4446      	add	r6, r8
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	42b3      	cmp	r3, r6
 800ac6c:	da41      	bge.n	800acf2 <__gethex+0x26e>
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4648      	mov	r0, r9
 800ac72:	f000 fa49 	bl	800b108 <_Bfree>
 800ac76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac78:	2300      	movs	r3, #0
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ac80:	e78a      	b.n	800ab98 <__gethex+0x114>
 800ac82:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ac86:	2a2e      	cmp	r2, #46	; 0x2e
 800ac88:	d014      	beq.n	800acb4 <__gethex+0x230>
 800ac8a:	2b20      	cmp	r3, #32
 800ac8c:	d106      	bne.n	800ac9c <__gethex+0x218>
 800ac8e:	9b01      	ldr	r3, [sp, #4]
 800ac90:	f843 bb04 	str.w	fp, [r3], #4
 800ac94:	f04f 0b00 	mov.w	fp, #0
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	465b      	mov	r3, fp
 800ac9c:	7828      	ldrb	r0, [r5, #0]
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	f7ff feda 	bl	800aa58 <__hexdig_fun>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	f000 000f 	and.w	r0, r0, #15
 800acaa:	4098      	lsls	r0, r3
 800acac:	ea4b 0b00 	orr.w	fp, fp, r0
 800acb0:	3304      	adds	r3, #4
 800acb2:	e7a1      	b.n	800abf8 <__gethex+0x174>
 800acb4:	45a8      	cmp	r8, r5
 800acb6:	d8e8      	bhi.n	800ac8a <__gethex+0x206>
 800acb8:	2201      	movs	r2, #1
 800acba:	4628      	mov	r0, r5
 800acbc:	9303      	str	r3, [sp, #12]
 800acbe:	f7fe fe82 	bl	80099c6 <strncmp>
 800acc2:	4926      	ldr	r1, [pc, #152]	; (800ad5c <__gethex+0x2d8>)
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d1df      	bne.n	800ac8a <__gethex+0x206>
 800acca:	e795      	b.n	800abf8 <__gethex+0x174>
 800accc:	f04f 0b03 	mov.w	fp, #3
 800acd0:	e7c5      	b.n	800ac5e <__gethex+0x1da>
 800acd2:	da0b      	bge.n	800acec <__gethex+0x268>
 800acd4:	eba5 0800 	sub.w	r8, r5, r0
 800acd8:	4621      	mov	r1, r4
 800acda:	4642      	mov	r2, r8
 800acdc:	4648      	mov	r0, r9
 800acde:	f000 fc2d 	bl	800b53c <__lshift>
 800ace2:	eba6 0608 	sub.w	r6, r6, r8
 800ace6:	4604      	mov	r4, r0
 800ace8:	f100 0a14 	add.w	sl, r0, #20
 800acec:	f04f 0b00 	mov.w	fp, #0
 800acf0:	e7ba      	b.n	800ac68 <__gethex+0x1e4>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	42b3      	cmp	r3, r6
 800acf6:	dd73      	ble.n	800ade0 <__gethex+0x35c>
 800acf8:	1b9e      	subs	r6, r3, r6
 800acfa:	42b5      	cmp	r5, r6
 800acfc:	dc34      	bgt.n	800ad68 <__gethex+0x2e4>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d023      	beq.n	800ad4c <__gethex+0x2c8>
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d025      	beq.n	800ad54 <__gethex+0x2d0>
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d115      	bne.n	800ad38 <__gethex+0x2b4>
 800ad0c:	42b5      	cmp	r5, r6
 800ad0e:	d113      	bne.n	800ad38 <__gethex+0x2b4>
 800ad10:	2d01      	cmp	r5, #1
 800ad12:	d10b      	bne.n	800ad2c <__gethex+0x2a8>
 800ad14:	9a02      	ldr	r2, [sp, #8]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	6123      	str	r3, [r4, #16]
 800ad1e:	f8ca 3000 	str.w	r3, [sl]
 800ad22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad24:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad28:	601c      	str	r4, [r3, #0]
 800ad2a:	e735      	b.n	800ab98 <__gethex+0x114>
 800ad2c:	1e69      	subs	r1, r5, #1
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 fe36 	bl	800b9a0 <__any_on>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1ed      	bne.n	800ad14 <__gethex+0x290>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4648      	mov	r0, r9
 800ad3c:	f000 f9e4 	bl	800b108 <_Bfree>
 800ad40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad42:	2300      	movs	r3, #0
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ad4a:	e725      	b.n	800ab98 <__gethex+0x114>
 800ad4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f2      	bne.n	800ad38 <__gethex+0x2b4>
 800ad52:	e7df      	b.n	800ad14 <__gethex+0x290>
 800ad54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1dc      	bne.n	800ad14 <__gethex+0x290>
 800ad5a:	e7ed      	b.n	800ad38 <__gethex+0x2b4>
 800ad5c:	0800c7f4 	.word	0x0800c7f4
 800ad60:	0800c99b 	.word	0x0800c99b
 800ad64:	0800c9ac 	.word	0x0800c9ac
 800ad68:	f106 38ff 	add.w	r8, r6, #4294967295
 800ad6c:	f1bb 0f00 	cmp.w	fp, #0
 800ad70:	d133      	bne.n	800adda <__gethex+0x356>
 800ad72:	f1b8 0f00 	cmp.w	r8, #0
 800ad76:	d004      	beq.n	800ad82 <__gethex+0x2fe>
 800ad78:	4641      	mov	r1, r8
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 fe10 	bl	800b9a0 <__any_on>
 800ad80:	4683      	mov	fp, r0
 800ad82:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ad86:	2301      	movs	r3, #1
 800ad88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad8c:	f008 081f 	and.w	r8, r8, #31
 800ad90:	fa03 f308 	lsl.w	r3, r3, r8
 800ad94:	4213      	tst	r3, r2
 800ad96:	4631      	mov	r1, r6
 800ad98:	4620      	mov	r0, r4
 800ad9a:	bf18      	it	ne
 800ad9c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ada0:	1bad      	subs	r5, r5, r6
 800ada2:	f7ff fe07 	bl	800a9b4 <rshift>
 800ada6:	687e      	ldr	r6, [r7, #4]
 800ada8:	f04f 0802 	mov.w	r8, #2
 800adac:	f1bb 0f00 	cmp.w	fp, #0
 800adb0:	d04a      	beq.n	800ae48 <__gethex+0x3c4>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d016      	beq.n	800ade6 <__gethex+0x362>
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d018      	beq.n	800adee <__gethex+0x36a>
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d109      	bne.n	800add4 <__gethex+0x350>
 800adc0:	f01b 0f02 	tst.w	fp, #2
 800adc4:	d006      	beq.n	800add4 <__gethex+0x350>
 800adc6:	f8da 3000 	ldr.w	r3, [sl]
 800adca:	ea4b 0b03 	orr.w	fp, fp, r3
 800adce:	f01b 0f01 	tst.w	fp, #1
 800add2:	d10f      	bne.n	800adf4 <__gethex+0x370>
 800add4:	f048 0810 	orr.w	r8, r8, #16
 800add8:	e036      	b.n	800ae48 <__gethex+0x3c4>
 800adda:	f04f 0b01 	mov.w	fp, #1
 800adde:	e7d0      	b.n	800ad82 <__gethex+0x2fe>
 800ade0:	f04f 0801 	mov.w	r8, #1
 800ade4:	e7e2      	b.n	800adac <__gethex+0x328>
 800ade6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ade8:	f1c3 0301 	rsb	r3, r3, #1
 800adec:	930f      	str	r3, [sp, #60]	; 0x3c
 800adee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0ef      	beq.n	800add4 <__gethex+0x350>
 800adf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adf8:	f104 0214 	add.w	r2, r4, #20
 800adfc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae06:	2300      	movs	r3, #0
 800ae08:	4694      	mov	ip, r2
 800ae0a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae0e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae12:	d01e      	beq.n	800ae52 <__gethex+0x3ce>
 800ae14:	3101      	adds	r1, #1
 800ae16:	f8cc 1000 	str.w	r1, [ip]
 800ae1a:	f1b8 0f02 	cmp.w	r8, #2
 800ae1e:	f104 0214 	add.w	r2, r4, #20
 800ae22:	d13d      	bne.n	800aea0 <__gethex+0x41c>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	42ab      	cmp	r3, r5
 800ae2a:	d10b      	bne.n	800ae44 <__gethex+0x3c0>
 800ae2c:	1169      	asrs	r1, r5, #5
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f005 051f 	and.w	r5, r5, #31
 800ae34:	fa03 f505 	lsl.w	r5, r3, r5
 800ae38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae3c:	421d      	tst	r5, r3
 800ae3e:	bf18      	it	ne
 800ae40:	f04f 0801 	movne.w	r8, #1
 800ae44:	f048 0820 	orr.w	r8, r8, #32
 800ae48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae4a:	601c      	str	r4, [r3, #0]
 800ae4c:	9b02      	ldr	r3, [sp, #8]
 800ae4e:	601e      	str	r6, [r3, #0]
 800ae50:	e6a2      	b.n	800ab98 <__gethex+0x114>
 800ae52:	4290      	cmp	r0, r2
 800ae54:	f842 3c04 	str.w	r3, [r2, #-4]
 800ae58:	d8d6      	bhi.n	800ae08 <__gethex+0x384>
 800ae5a:	68a2      	ldr	r2, [r4, #8]
 800ae5c:	4593      	cmp	fp, r2
 800ae5e:	db17      	blt.n	800ae90 <__gethex+0x40c>
 800ae60:	6861      	ldr	r1, [r4, #4]
 800ae62:	4648      	mov	r0, r9
 800ae64:	3101      	adds	r1, #1
 800ae66:	f000 f90f 	bl	800b088 <_Balloc>
 800ae6a:	4682      	mov	sl, r0
 800ae6c:	b918      	cbnz	r0, 800ae76 <__gethex+0x3f2>
 800ae6e:	4b1b      	ldr	r3, [pc, #108]	; (800aedc <__gethex+0x458>)
 800ae70:	4602      	mov	r2, r0
 800ae72:	2184      	movs	r1, #132	; 0x84
 800ae74:	e6b3      	b.n	800abde <__gethex+0x15a>
 800ae76:	6922      	ldr	r2, [r4, #16]
 800ae78:	3202      	adds	r2, #2
 800ae7a:	f104 010c 	add.w	r1, r4, #12
 800ae7e:	0092      	lsls	r2, r2, #2
 800ae80:	300c      	adds	r0, #12
 800ae82:	f7fe fe96 	bl	8009bb2 <memcpy>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4648      	mov	r0, r9
 800ae8a:	f000 f93d 	bl	800b108 <_Bfree>
 800ae8e:	4654      	mov	r4, sl
 800ae90:	6922      	ldr	r2, [r4, #16]
 800ae92:	1c51      	adds	r1, r2, #1
 800ae94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ae98:	6121      	str	r1, [r4, #16]
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	6151      	str	r1, [r2, #20]
 800ae9e:	e7bc      	b.n	800ae1a <__gethex+0x396>
 800aea0:	6921      	ldr	r1, [r4, #16]
 800aea2:	4559      	cmp	r1, fp
 800aea4:	dd0b      	ble.n	800aebe <__gethex+0x43a>
 800aea6:	2101      	movs	r1, #1
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff fd83 	bl	800a9b4 <rshift>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3601      	adds	r6, #1
 800aeb2:	42b3      	cmp	r3, r6
 800aeb4:	f6ff aedb 	blt.w	800ac6e <__gethex+0x1ea>
 800aeb8:	f04f 0801 	mov.w	r8, #1
 800aebc:	e7c2      	b.n	800ae44 <__gethex+0x3c0>
 800aebe:	f015 051f 	ands.w	r5, r5, #31
 800aec2:	d0f9      	beq.n	800aeb8 <__gethex+0x434>
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	441a      	add	r2, r3
 800aec8:	f1c5 0520 	rsb	r5, r5, #32
 800aecc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aed0:	f000 f9cc 	bl	800b26c <__hi0bits>
 800aed4:	42a8      	cmp	r0, r5
 800aed6:	dbe6      	blt.n	800aea6 <__gethex+0x422>
 800aed8:	e7ee      	b.n	800aeb8 <__gethex+0x434>
 800aeda:	bf00      	nop
 800aedc:	0800c99b 	.word	0x0800c99b

0800aee0 <L_shift>:
 800aee0:	f1c2 0208 	rsb	r2, r2, #8
 800aee4:	0092      	lsls	r2, r2, #2
 800aee6:	b570      	push	{r4, r5, r6, lr}
 800aee8:	f1c2 0620 	rsb	r6, r2, #32
 800aeec:	6843      	ldr	r3, [r0, #4]
 800aeee:	6804      	ldr	r4, [r0, #0]
 800aef0:	fa03 f506 	lsl.w	r5, r3, r6
 800aef4:	432c      	orrs	r4, r5
 800aef6:	40d3      	lsrs	r3, r2
 800aef8:	6004      	str	r4, [r0, #0]
 800aefa:	f840 3f04 	str.w	r3, [r0, #4]!
 800aefe:	4288      	cmp	r0, r1
 800af00:	d3f4      	bcc.n	800aeec <L_shift+0xc>
 800af02:	bd70      	pop	{r4, r5, r6, pc}

0800af04 <__match>:
 800af04:	b530      	push	{r4, r5, lr}
 800af06:	6803      	ldr	r3, [r0, #0]
 800af08:	3301      	adds	r3, #1
 800af0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af0e:	b914      	cbnz	r4, 800af16 <__match+0x12>
 800af10:	6003      	str	r3, [r0, #0]
 800af12:	2001      	movs	r0, #1
 800af14:	bd30      	pop	{r4, r5, pc}
 800af16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af1e:	2d19      	cmp	r5, #25
 800af20:	bf98      	it	ls
 800af22:	3220      	addls	r2, #32
 800af24:	42a2      	cmp	r2, r4
 800af26:	d0f0      	beq.n	800af0a <__match+0x6>
 800af28:	2000      	movs	r0, #0
 800af2a:	e7f3      	b.n	800af14 <__match+0x10>

0800af2c <__hexnan>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	680b      	ldr	r3, [r1, #0]
 800af32:	6801      	ldr	r1, [r0, #0]
 800af34:	115e      	asrs	r6, r3, #5
 800af36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af3a:	f013 031f 	ands.w	r3, r3, #31
 800af3e:	b087      	sub	sp, #28
 800af40:	bf18      	it	ne
 800af42:	3604      	addne	r6, #4
 800af44:	2500      	movs	r5, #0
 800af46:	1f37      	subs	r7, r6, #4
 800af48:	4682      	mov	sl, r0
 800af4a:	4690      	mov	r8, r2
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	f846 5c04 	str.w	r5, [r6, #-4]
 800af52:	46b9      	mov	r9, r7
 800af54:	463c      	mov	r4, r7
 800af56:	9502      	str	r5, [sp, #8]
 800af58:	46ab      	mov	fp, r5
 800af5a:	784a      	ldrb	r2, [r1, #1]
 800af5c:	1c4b      	adds	r3, r1, #1
 800af5e:	9303      	str	r3, [sp, #12]
 800af60:	b342      	cbz	r2, 800afb4 <__hexnan+0x88>
 800af62:	4610      	mov	r0, r2
 800af64:	9105      	str	r1, [sp, #20]
 800af66:	9204      	str	r2, [sp, #16]
 800af68:	f7ff fd76 	bl	800aa58 <__hexdig_fun>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d14f      	bne.n	800b010 <__hexnan+0xe4>
 800af70:	9a04      	ldr	r2, [sp, #16]
 800af72:	9905      	ldr	r1, [sp, #20]
 800af74:	2a20      	cmp	r2, #32
 800af76:	d818      	bhi.n	800afaa <__hexnan+0x7e>
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	459b      	cmp	fp, r3
 800af7c:	dd13      	ble.n	800afa6 <__hexnan+0x7a>
 800af7e:	454c      	cmp	r4, r9
 800af80:	d206      	bcs.n	800af90 <__hexnan+0x64>
 800af82:	2d07      	cmp	r5, #7
 800af84:	dc04      	bgt.n	800af90 <__hexnan+0x64>
 800af86:	462a      	mov	r2, r5
 800af88:	4649      	mov	r1, r9
 800af8a:	4620      	mov	r0, r4
 800af8c:	f7ff ffa8 	bl	800aee0 <L_shift>
 800af90:	4544      	cmp	r4, r8
 800af92:	d950      	bls.n	800b036 <__hexnan+0x10a>
 800af94:	2300      	movs	r3, #0
 800af96:	f1a4 0904 	sub.w	r9, r4, #4
 800af9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af9e:	f8cd b008 	str.w	fp, [sp, #8]
 800afa2:	464c      	mov	r4, r9
 800afa4:	461d      	mov	r5, r3
 800afa6:	9903      	ldr	r1, [sp, #12]
 800afa8:	e7d7      	b.n	800af5a <__hexnan+0x2e>
 800afaa:	2a29      	cmp	r2, #41	; 0x29
 800afac:	d155      	bne.n	800b05a <__hexnan+0x12e>
 800afae:	3102      	adds	r1, #2
 800afb0:	f8ca 1000 	str.w	r1, [sl]
 800afb4:	f1bb 0f00 	cmp.w	fp, #0
 800afb8:	d04f      	beq.n	800b05a <__hexnan+0x12e>
 800afba:	454c      	cmp	r4, r9
 800afbc:	d206      	bcs.n	800afcc <__hexnan+0xa0>
 800afbe:	2d07      	cmp	r5, #7
 800afc0:	dc04      	bgt.n	800afcc <__hexnan+0xa0>
 800afc2:	462a      	mov	r2, r5
 800afc4:	4649      	mov	r1, r9
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7ff ff8a 	bl	800aee0 <L_shift>
 800afcc:	4544      	cmp	r4, r8
 800afce:	d934      	bls.n	800b03a <__hexnan+0x10e>
 800afd0:	f1a8 0204 	sub.w	r2, r8, #4
 800afd4:	4623      	mov	r3, r4
 800afd6:	f853 1b04 	ldr.w	r1, [r3], #4
 800afda:	f842 1f04 	str.w	r1, [r2, #4]!
 800afde:	429f      	cmp	r7, r3
 800afe0:	d2f9      	bcs.n	800afd6 <__hexnan+0xaa>
 800afe2:	1b3b      	subs	r3, r7, r4
 800afe4:	f023 0303 	bic.w	r3, r3, #3
 800afe8:	3304      	adds	r3, #4
 800afea:	3e03      	subs	r6, #3
 800afec:	3401      	adds	r4, #1
 800afee:	42a6      	cmp	r6, r4
 800aff0:	bf38      	it	cc
 800aff2:	2304      	movcc	r3, #4
 800aff4:	4443      	add	r3, r8
 800aff6:	2200      	movs	r2, #0
 800aff8:	f843 2b04 	str.w	r2, [r3], #4
 800affc:	429f      	cmp	r7, r3
 800affe:	d2fb      	bcs.n	800aff8 <__hexnan+0xcc>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	b91b      	cbnz	r3, 800b00c <__hexnan+0xe0>
 800b004:	4547      	cmp	r7, r8
 800b006:	d126      	bne.n	800b056 <__hexnan+0x12a>
 800b008:	2301      	movs	r3, #1
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	2005      	movs	r0, #5
 800b00e:	e025      	b.n	800b05c <__hexnan+0x130>
 800b010:	3501      	adds	r5, #1
 800b012:	2d08      	cmp	r5, #8
 800b014:	f10b 0b01 	add.w	fp, fp, #1
 800b018:	dd06      	ble.n	800b028 <__hexnan+0xfc>
 800b01a:	4544      	cmp	r4, r8
 800b01c:	d9c3      	bls.n	800afa6 <__hexnan+0x7a>
 800b01e:	2300      	movs	r3, #0
 800b020:	f844 3c04 	str.w	r3, [r4, #-4]
 800b024:	2501      	movs	r5, #1
 800b026:	3c04      	subs	r4, #4
 800b028:	6822      	ldr	r2, [r4, #0]
 800b02a:	f000 000f 	and.w	r0, r0, #15
 800b02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b032:	6020      	str	r0, [r4, #0]
 800b034:	e7b7      	b.n	800afa6 <__hexnan+0x7a>
 800b036:	2508      	movs	r5, #8
 800b038:	e7b5      	b.n	800afa6 <__hexnan+0x7a>
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0df      	beq.n	800b000 <__hexnan+0xd4>
 800b040:	f1c3 0320 	rsb	r3, r3, #32
 800b044:	f04f 32ff 	mov.w	r2, #4294967295
 800b048:	40da      	lsrs	r2, r3
 800b04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b04e:	4013      	ands	r3, r2
 800b050:	f846 3c04 	str.w	r3, [r6, #-4]
 800b054:	e7d4      	b.n	800b000 <__hexnan+0xd4>
 800b056:	3f04      	subs	r7, #4
 800b058:	e7d2      	b.n	800b000 <__hexnan+0xd4>
 800b05a:	2004      	movs	r0, #4
 800b05c:	b007      	add	sp, #28
 800b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b062 <__ascii_mbtowc>:
 800b062:	b082      	sub	sp, #8
 800b064:	b901      	cbnz	r1, 800b068 <__ascii_mbtowc+0x6>
 800b066:	a901      	add	r1, sp, #4
 800b068:	b142      	cbz	r2, 800b07c <__ascii_mbtowc+0x1a>
 800b06a:	b14b      	cbz	r3, 800b080 <__ascii_mbtowc+0x1e>
 800b06c:	7813      	ldrb	r3, [r2, #0]
 800b06e:	600b      	str	r3, [r1, #0]
 800b070:	7812      	ldrb	r2, [r2, #0]
 800b072:	1e10      	subs	r0, r2, #0
 800b074:	bf18      	it	ne
 800b076:	2001      	movne	r0, #1
 800b078:	b002      	add	sp, #8
 800b07a:	4770      	bx	lr
 800b07c:	4610      	mov	r0, r2
 800b07e:	e7fb      	b.n	800b078 <__ascii_mbtowc+0x16>
 800b080:	f06f 0001 	mvn.w	r0, #1
 800b084:	e7f8      	b.n	800b078 <__ascii_mbtowc+0x16>
	...

0800b088 <_Balloc>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	69c6      	ldr	r6, [r0, #28]
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	b976      	cbnz	r6, 800b0b0 <_Balloc+0x28>
 800b092:	2010      	movs	r0, #16
 800b094:	f7fc fdc2 	bl	8007c1c <malloc>
 800b098:	4602      	mov	r2, r0
 800b09a:	61e0      	str	r0, [r4, #28]
 800b09c:	b920      	cbnz	r0, 800b0a8 <_Balloc+0x20>
 800b09e:	4b18      	ldr	r3, [pc, #96]	; (800b100 <_Balloc+0x78>)
 800b0a0:	4818      	ldr	r0, [pc, #96]	; (800b104 <_Balloc+0x7c>)
 800b0a2:	216b      	movs	r1, #107	; 0x6b
 800b0a4:	f7fe fda2 	bl	8009bec <__assert_func>
 800b0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0ac:	6006      	str	r6, [r0, #0]
 800b0ae:	60c6      	str	r6, [r0, #12]
 800b0b0:	69e6      	ldr	r6, [r4, #28]
 800b0b2:	68f3      	ldr	r3, [r6, #12]
 800b0b4:	b183      	cbz	r3, 800b0d8 <_Balloc+0x50>
 800b0b6:	69e3      	ldr	r3, [r4, #28]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0be:	b9b8      	cbnz	r0, 800b0f0 <_Balloc+0x68>
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b0c6:	1d72      	adds	r2, r6, #5
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 ff5d 	bl	800bf8a <_calloc_r>
 800b0d0:	b160      	cbz	r0, 800b0ec <_Balloc+0x64>
 800b0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0d6:	e00e      	b.n	800b0f6 <_Balloc+0x6e>
 800b0d8:	2221      	movs	r2, #33	; 0x21
 800b0da:	2104      	movs	r1, #4
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 ff54 	bl	800bf8a <_calloc_r>
 800b0e2:	69e3      	ldr	r3, [r4, #28]
 800b0e4:	60f0      	str	r0, [r6, #12]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e4      	bne.n	800b0b6 <_Balloc+0x2e>
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	6802      	ldr	r2, [r0, #0]
 800b0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0fc:	e7f7      	b.n	800b0ee <_Balloc+0x66>
 800b0fe:	bf00      	nop
 800b100:	0800c881 	.word	0x0800c881
 800b104:	0800ca0c 	.word	0x0800ca0c

0800b108 <_Bfree>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	69c6      	ldr	r6, [r0, #28]
 800b10c:	4605      	mov	r5, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	b976      	cbnz	r6, 800b130 <_Bfree+0x28>
 800b112:	2010      	movs	r0, #16
 800b114:	f7fc fd82 	bl	8007c1c <malloc>
 800b118:	4602      	mov	r2, r0
 800b11a:	61e8      	str	r0, [r5, #28]
 800b11c:	b920      	cbnz	r0, 800b128 <_Bfree+0x20>
 800b11e:	4b09      	ldr	r3, [pc, #36]	; (800b144 <_Bfree+0x3c>)
 800b120:	4809      	ldr	r0, [pc, #36]	; (800b148 <_Bfree+0x40>)
 800b122:	218f      	movs	r1, #143	; 0x8f
 800b124:	f7fe fd62 	bl	8009bec <__assert_func>
 800b128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b12c:	6006      	str	r6, [r0, #0]
 800b12e:	60c6      	str	r6, [r0, #12]
 800b130:	b13c      	cbz	r4, 800b142 <_Bfree+0x3a>
 800b132:	69eb      	ldr	r3, [r5, #28]
 800b134:	6862      	ldr	r2, [r4, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b13c:	6021      	str	r1, [r4, #0]
 800b13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	0800c881 	.word	0x0800c881
 800b148:	0800ca0c 	.word	0x0800ca0c

0800b14c <__multadd>:
 800b14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	690d      	ldr	r5, [r1, #16]
 800b152:	4607      	mov	r7, r0
 800b154:	460c      	mov	r4, r1
 800b156:	461e      	mov	r6, r3
 800b158:	f101 0c14 	add.w	ip, r1, #20
 800b15c:	2000      	movs	r0, #0
 800b15e:	f8dc 3000 	ldr.w	r3, [ip]
 800b162:	b299      	uxth	r1, r3
 800b164:	fb02 6101 	mla	r1, r2, r1, r6
 800b168:	0c1e      	lsrs	r6, r3, #16
 800b16a:	0c0b      	lsrs	r3, r1, #16
 800b16c:	fb02 3306 	mla	r3, r2, r6, r3
 800b170:	b289      	uxth	r1, r1
 800b172:	3001      	adds	r0, #1
 800b174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b178:	4285      	cmp	r5, r0
 800b17a:	f84c 1b04 	str.w	r1, [ip], #4
 800b17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b182:	dcec      	bgt.n	800b15e <__multadd+0x12>
 800b184:	b30e      	cbz	r6, 800b1ca <__multadd+0x7e>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc19      	bgt.n	800b1c0 <__multadd+0x74>
 800b18c:	6861      	ldr	r1, [r4, #4]
 800b18e:	4638      	mov	r0, r7
 800b190:	3101      	adds	r1, #1
 800b192:	f7ff ff79 	bl	800b088 <_Balloc>
 800b196:	4680      	mov	r8, r0
 800b198:	b928      	cbnz	r0, 800b1a6 <__multadd+0x5a>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <__multadd+0x84>)
 800b19e:	480d      	ldr	r0, [pc, #52]	; (800b1d4 <__multadd+0x88>)
 800b1a0:	21ba      	movs	r1, #186	; 0xba
 800b1a2:	f7fe fd23 	bl	8009bec <__assert_func>
 800b1a6:	6922      	ldr	r2, [r4, #16]
 800b1a8:	3202      	adds	r2, #2
 800b1aa:	f104 010c 	add.w	r1, r4, #12
 800b1ae:	0092      	lsls	r2, r2, #2
 800b1b0:	300c      	adds	r0, #12
 800b1b2:	f7fe fcfe 	bl	8009bb2 <memcpy>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff ffa5 	bl	800b108 <_Bfree>
 800b1be:	4644      	mov	r4, r8
 800b1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1c4:	3501      	adds	r5, #1
 800b1c6:	615e      	str	r6, [r3, #20]
 800b1c8:	6125      	str	r5, [r4, #16]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d0:	0800c99b 	.word	0x0800c99b
 800b1d4:	0800ca0c 	.word	0x0800ca0c

0800b1d8 <__s2b>:
 800b1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	4615      	mov	r5, r2
 800b1e0:	461f      	mov	r7, r3
 800b1e2:	2209      	movs	r2, #9
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	db09      	blt.n	800b208 <__s2b+0x30>
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff ff47 	bl	800b088 <_Balloc>
 800b1fa:	b940      	cbnz	r0, 800b20e <__s2b+0x36>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	4b19      	ldr	r3, [pc, #100]	; (800b264 <__s2b+0x8c>)
 800b200:	4819      	ldr	r0, [pc, #100]	; (800b268 <__s2b+0x90>)
 800b202:	21d3      	movs	r1, #211	; 0xd3
 800b204:	f7fe fcf2 	bl	8009bec <__assert_func>
 800b208:	0052      	lsls	r2, r2, #1
 800b20a:	3101      	adds	r1, #1
 800b20c:	e7f0      	b.n	800b1f0 <__s2b+0x18>
 800b20e:	9b08      	ldr	r3, [sp, #32]
 800b210:	6143      	str	r3, [r0, #20]
 800b212:	2d09      	cmp	r5, #9
 800b214:	f04f 0301 	mov.w	r3, #1
 800b218:	6103      	str	r3, [r0, #16]
 800b21a:	dd16      	ble.n	800b24a <__s2b+0x72>
 800b21c:	f104 0909 	add.w	r9, r4, #9
 800b220:	46c8      	mov	r8, r9
 800b222:	442c      	add	r4, r5
 800b224:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b228:	4601      	mov	r1, r0
 800b22a:	3b30      	subs	r3, #48	; 0x30
 800b22c:	220a      	movs	r2, #10
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ff8c 	bl	800b14c <__multadd>
 800b234:	45a0      	cmp	r8, r4
 800b236:	d1f5      	bne.n	800b224 <__s2b+0x4c>
 800b238:	f1a5 0408 	sub.w	r4, r5, #8
 800b23c:	444c      	add	r4, r9
 800b23e:	1b2d      	subs	r5, r5, r4
 800b240:	1963      	adds	r3, r4, r5
 800b242:	42bb      	cmp	r3, r7
 800b244:	db04      	blt.n	800b250 <__s2b+0x78>
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	340a      	adds	r4, #10
 800b24c:	2509      	movs	r5, #9
 800b24e:	e7f6      	b.n	800b23e <__s2b+0x66>
 800b250:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b254:	4601      	mov	r1, r0
 800b256:	3b30      	subs	r3, #48	; 0x30
 800b258:	220a      	movs	r2, #10
 800b25a:	4630      	mov	r0, r6
 800b25c:	f7ff ff76 	bl	800b14c <__multadd>
 800b260:	e7ee      	b.n	800b240 <__s2b+0x68>
 800b262:	bf00      	nop
 800b264:	0800c99b 	.word	0x0800c99b
 800b268:	0800ca0c 	.word	0x0800ca0c

0800b26c <__hi0bits>:
 800b26c:	0c03      	lsrs	r3, r0, #16
 800b26e:	041b      	lsls	r3, r3, #16
 800b270:	b9d3      	cbnz	r3, 800b2a8 <__hi0bits+0x3c>
 800b272:	0400      	lsls	r0, r0, #16
 800b274:	2310      	movs	r3, #16
 800b276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b27a:	bf04      	itt	eq
 800b27c:	0200      	lsleq	r0, r0, #8
 800b27e:	3308      	addeq	r3, #8
 800b280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b284:	bf04      	itt	eq
 800b286:	0100      	lsleq	r0, r0, #4
 800b288:	3304      	addeq	r3, #4
 800b28a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b28e:	bf04      	itt	eq
 800b290:	0080      	lsleq	r0, r0, #2
 800b292:	3302      	addeq	r3, #2
 800b294:	2800      	cmp	r0, #0
 800b296:	db05      	blt.n	800b2a4 <__hi0bits+0x38>
 800b298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b29c:	f103 0301 	add.w	r3, r3, #1
 800b2a0:	bf08      	it	eq
 800b2a2:	2320      	moveq	r3, #32
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	4770      	bx	lr
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e7e4      	b.n	800b276 <__hi0bits+0xa>

0800b2ac <__lo0bits>:
 800b2ac:	6803      	ldr	r3, [r0, #0]
 800b2ae:	f013 0207 	ands.w	r2, r3, #7
 800b2b2:	d00c      	beq.n	800b2ce <__lo0bits+0x22>
 800b2b4:	07d9      	lsls	r1, r3, #31
 800b2b6:	d422      	bmi.n	800b2fe <__lo0bits+0x52>
 800b2b8:	079a      	lsls	r2, r3, #30
 800b2ba:	bf49      	itett	mi
 800b2bc:	085b      	lsrmi	r3, r3, #1
 800b2be:	089b      	lsrpl	r3, r3, #2
 800b2c0:	6003      	strmi	r3, [r0, #0]
 800b2c2:	2201      	movmi	r2, #1
 800b2c4:	bf5c      	itt	pl
 800b2c6:	6003      	strpl	r3, [r0, #0]
 800b2c8:	2202      	movpl	r2, #2
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4770      	bx	lr
 800b2ce:	b299      	uxth	r1, r3
 800b2d0:	b909      	cbnz	r1, 800b2d6 <__lo0bits+0x2a>
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	2210      	movs	r2, #16
 800b2d6:	b2d9      	uxtb	r1, r3
 800b2d8:	b909      	cbnz	r1, 800b2de <__lo0bits+0x32>
 800b2da:	3208      	adds	r2, #8
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	0719      	lsls	r1, r3, #28
 800b2e0:	bf04      	itt	eq
 800b2e2:	091b      	lsreq	r3, r3, #4
 800b2e4:	3204      	addeq	r2, #4
 800b2e6:	0799      	lsls	r1, r3, #30
 800b2e8:	bf04      	itt	eq
 800b2ea:	089b      	lsreq	r3, r3, #2
 800b2ec:	3202      	addeq	r2, #2
 800b2ee:	07d9      	lsls	r1, r3, #31
 800b2f0:	d403      	bmi.n	800b2fa <__lo0bits+0x4e>
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	f102 0201 	add.w	r2, r2, #1
 800b2f8:	d003      	beq.n	800b302 <__lo0bits+0x56>
 800b2fa:	6003      	str	r3, [r0, #0]
 800b2fc:	e7e5      	b.n	800b2ca <__lo0bits+0x1e>
 800b2fe:	2200      	movs	r2, #0
 800b300:	e7e3      	b.n	800b2ca <__lo0bits+0x1e>
 800b302:	2220      	movs	r2, #32
 800b304:	e7e1      	b.n	800b2ca <__lo0bits+0x1e>
	...

0800b308 <__i2b>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	460c      	mov	r4, r1
 800b30c:	2101      	movs	r1, #1
 800b30e:	f7ff febb 	bl	800b088 <_Balloc>
 800b312:	4602      	mov	r2, r0
 800b314:	b928      	cbnz	r0, 800b322 <__i2b+0x1a>
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <__i2b+0x24>)
 800b318:	4805      	ldr	r0, [pc, #20]	; (800b330 <__i2b+0x28>)
 800b31a:	f240 1145 	movw	r1, #325	; 0x145
 800b31e:	f7fe fc65 	bl	8009bec <__assert_func>
 800b322:	2301      	movs	r3, #1
 800b324:	6144      	str	r4, [r0, #20]
 800b326:	6103      	str	r3, [r0, #16]
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	bf00      	nop
 800b32c:	0800c99b 	.word	0x0800c99b
 800b330:	0800ca0c 	.word	0x0800ca0c

0800b334 <__multiply>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4691      	mov	r9, r2
 800b33a:	690a      	ldr	r2, [r1, #16]
 800b33c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b340:	429a      	cmp	r2, r3
 800b342:	bfb8      	it	lt
 800b344:	460b      	movlt	r3, r1
 800b346:	460c      	mov	r4, r1
 800b348:	bfbc      	itt	lt
 800b34a:	464c      	movlt	r4, r9
 800b34c:	4699      	movlt	r9, r3
 800b34e:	6927      	ldr	r7, [r4, #16]
 800b350:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b354:	68a3      	ldr	r3, [r4, #8]
 800b356:	6861      	ldr	r1, [r4, #4]
 800b358:	eb07 060a 	add.w	r6, r7, sl
 800b35c:	42b3      	cmp	r3, r6
 800b35e:	b085      	sub	sp, #20
 800b360:	bfb8      	it	lt
 800b362:	3101      	addlt	r1, #1
 800b364:	f7ff fe90 	bl	800b088 <_Balloc>
 800b368:	b930      	cbnz	r0, 800b378 <__multiply+0x44>
 800b36a:	4602      	mov	r2, r0
 800b36c:	4b44      	ldr	r3, [pc, #272]	; (800b480 <__multiply+0x14c>)
 800b36e:	4845      	ldr	r0, [pc, #276]	; (800b484 <__multiply+0x150>)
 800b370:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b374:	f7fe fc3a 	bl	8009bec <__assert_func>
 800b378:	f100 0514 	add.w	r5, r0, #20
 800b37c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b380:	462b      	mov	r3, r5
 800b382:	2200      	movs	r2, #0
 800b384:	4543      	cmp	r3, r8
 800b386:	d321      	bcc.n	800b3cc <__multiply+0x98>
 800b388:	f104 0314 	add.w	r3, r4, #20
 800b38c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b390:	f109 0314 	add.w	r3, r9, #20
 800b394:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b398:	9202      	str	r2, [sp, #8]
 800b39a:	1b3a      	subs	r2, r7, r4
 800b39c:	3a15      	subs	r2, #21
 800b39e:	f022 0203 	bic.w	r2, r2, #3
 800b3a2:	3204      	adds	r2, #4
 800b3a4:	f104 0115 	add.w	r1, r4, #21
 800b3a8:	428f      	cmp	r7, r1
 800b3aa:	bf38      	it	cc
 800b3ac:	2204      	movcc	r2, #4
 800b3ae:	9201      	str	r2, [sp, #4]
 800b3b0:	9a02      	ldr	r2, [sp, #8]
 800b3b2:	9303      	str	r3, [sp, #12]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d80c      	bhi.n	800b3d2 <__multiply+0x9e>
 800b3b8:	2e00      	cmp	r6, #0
 800b3ba:	dd03      	ble.n	800b3c4 <__multiply+0x90>
 800b3bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05b      	beq.n	800b47c <__multiply+0x148>
 800b3c4:	6106      	str	r6, [r0, #16]
 800b3c6:	b005      	add	sp, #20
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	f843 2b04 	str.w	r2, [r3], #4
 800b3d0:	e7d8      	b.n	800b384 <__multiply+0x50>
 800b3d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3d6:	f1ba 0f00 	cmp.w	sl, #0
 800b3da:	d024      	beq.n	800b426 <__multiply+0xf2>
 800b3dc:	f104 0e14 	add.w	lr, r4, #20
 800b3e0:	46a9      	mov	r9, r5
 800b3e2:	f04f 0c00 	mov.w	ip, #0
 800b3e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3ea:	f8d9 1000 	ldr.w	r1, [r9]
 800b3ee:	fa1f fb82 	uxth.w	fp, r2
 800b3f2:	b289      	uxth	r1, r1
 800b3f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b400:	4461      	add	r1, ip
 800b402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b406:	fb0a c20b 	mla	r2, sl, fp, ip
 800b40a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b40e:	b289      	uxth	r1, r1
 800b410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b414:	4577      	cmp	r7, lr
 800b416:	f849 1b04 	str.w	r1, [r9], #4
 800b41a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b41e:	d8e2      	bhi.n	800b3e6 <__multiply+0xb2>
 800b420:	9a01      	ldr	r2, [sp, #4]
 800b422:	f845 c002 	str.w	ip, [r5, r2]
 800b426:	9a03      	ldr	r2, [sp, #12]
 800b428:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b42c:	3304      	adds	r3, #4
 800b42e:	f1b9 0f00 	cmp.w	r9, #0
 800b432:	d021      	beq.n	800b478 <__multiply+0x144>
 800b434:	6829      	ldr	r1, [r5, #0]
 800b436:	f104 0c14 	add.w	ip, r4, #20
 800b43a:	46ae      	mov	lr, r5
 800b43c:	f04f 0a00 	mov.w	sl, #0
 800b440:	f8bc b000 	ldrh.w	fp, [ip]
 800b444:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b448:	fb09 220b 	mla	r2, r9, fp, r2
 800b44c:	4452      	add	r2, sl
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b454:	f84e 1b04 	str.w	r1, [lr], #4
 800b458:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b45c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b460:	f8be 1000 	ldrh.w	r1, [lr]
 800b464:	fb09 110a 	mla	r1, r9, sl, r1
 800b468:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b46c:	4567      	cmp	r7, ip
 800b46e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b472:	d8e5      	bhi.n	800b440 <__multiply+0x10c>
 800b474:	9a01      	ldr	r2, [sp, #4]
 800b476:	50a9      	str	r1, [r5, r2]
 800b478:	3504      	adds	r5, #4
 800b47a:	e799      	b.n	800b3b0 <__multiply+0x7c>
 800b47c:	3e01      	subs	r6, #1
 800b47e:	e79b      	b.n	800b3b8 <__multiply+0x84>
 800b480:	0800c99b 	.word	0x0800c99b
 800b484:	0800ca0c 	.word	0x0800ca0c

0800b488 <__pow5mult>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4615      	mov	r5, r2
 800b48e:	f012 0203 	ands.w	r2, r2, #3
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	d007      	beq.n	800b4a8 <__pow5mult+0x20>
 800b498:	4c25      	ldr	r4, [pc, #148]	; (800b530 <__pow5mult+0xa8>)
 800b49a:	3a01      	subs	r2, #1
 800b49c:	2300      	movs	r3, #0
 800b49e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4a2:	f7ff fe53 	bl	800b14c <__multadd>
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	10ad      	asrs	r5, r5, #2
 800b4aa:	d03d      	beq.n	800b528 <__pow5mult+0xa0>
 800b4ac:	69f4      	ldr	r4, [r6, #28]
 800b4ae:	b97c      	cbnz	r4, 800b4d0 <__pow5mult+0x48>
 800b4b0:	2010      	movs	r0, #16
 800b4b2:	f7fc fbb3 	bl	8007c1c <malloc>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	61f0      	str	r0, [r6, #28]
 800b4ba:	b928      	cbnz	r0, 800b4c8 <__pow5mult+0x40>
 800b4bc:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <__pow5mult+0xac>)
 800b4be:	481e      	ldr	r0, [pc, #120]	; (800b538 <__pow5mult+0xb0>)
 800b4c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b4c4:	f7fe fb92 	bl	8009bec <__assert_func>
 800b4c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4cc:	6004      	str	r4, [r0, #0]
 800b4ce:	60c4      	str	r4, [r0, #12]
 800b4d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b4d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4d8:	b94c      	cbnz	r4, 800b4ee <__pow5mult+0x66>
 800b4da:	f240 2171 	movw	r1, #625	; 0x271
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ff12 	bl	800b308 <__i2b>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	f04f 0900 	mov.w	r9, #0
 800b4f2:	07eb      	lsls	r3, r5, #31
 800b4f4:	d50a      	bpl.n	800b50c <__pow5mult+0x84>
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7ff ff1a 	bl	800b334 <__multiply>
 800b500:	4639      	mov	r1, r7
 800b502:	4680      	mov	r8, r0
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff fdff 	bl	800b108 <_Bfree>
 800b50a:	4647      	mov	r7, r8
 800b50c:	106d      	asrs	r5, r5, #1
 800b50e:	d00b      	beq.n	800b528 <__pow5mult+0xa0>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	b938      	cbnz	r0, 800b524 <__pow5mult+0x9c>
 800b514:	4622      	mov	r2, r4
 800b516:	4621      	mov	r1, r4
 800b518:	4630      	mov	r0, r6
 800b51a:	f7ff ff0b 	bl	800b334 <__multiply>
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	f8c0 9000 	str.w	r9, [r0]
 800b524:	4604      	mov	r4, r0
 800b526:	e7e4      	b.n	800b4f2 <__pow5mult+0x6a>
 800b528:	4638      	mov	r0, r7
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	bf00      	nop
 800b530:	0800cb58 	.word	0x0800cb58
 800b534:	0800c881 	.word	0x0800c881
 800b538:	0800ca0c 	.word	0x0800ca0c

0800b53c <__lshift>:
 800b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	460c      	mov	r4, r1
 800b542:	6849      	ldr	r1, [r1, #4]
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	4607      	mov	r7, r0
 800b54e:	4691      	mov	r9, r2
 800b550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b554:	f108 0601 	add.w	r6, r8, #1
 800b558:	42b3      	cmp	r3, r6
 800b55a:	db0b      	blt.n	800b574 <__lshift+0x38>
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7ff fd93 	bl	800b088 <_Balloc>
 800b562:	4605      	mov	r5, r0
 800b564:	b948      	cbnz	r0, 800b57a <__lshift+0x3e>
 800b566:	4602      	mov	r2, r0
 800b568:	4b28      	ldr	r3, [pc, #160]	; (800b60c <__lshift+0xd0>)
 800b56a:	4829      	ldr	r0, [pc, #164]	; (800b610 <__lshift+0xd4>)
 800b56c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b570:	f7fe fb3c 	bl	8009bec <__assert_func>
 800b574:	3101      	adds	r1, #1
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	e7ee      	b.n	800b558 <__lshift+0x1c>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f100 0114 	add.w	r1, r0, #20
 800b580:	f100 0210 	add.w	r2, r0, #16
 800b584:	4618      	mov	r0, r3
 800b586:	4553      	cmp	r3, sl
 800b588:	db33      	blt.n	800b5f2 <__lshift+0xb6>
 800b58a:	6920      	ldr	r0, [r4, #16]
 800b58c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b590:	f104 0314 	add.w	r3, r4, #20
 800b594:	f019 091f 	ands.w	r9, r9, #31
 800b598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b59c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5a0:	d02b      	beq.n	800b5fa <__lshift+0xbe>
 800b5a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b5a6:	468a      	mov	sl, r1
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b5b0:	4310      	orrs	r0, r2
 800b5b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ba:	459c      	cmp	ip, r3
 800b5bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5c0:	d8f3      	bhi.n	800b5aa <__lshift+0x6e>
 800b5c2:	ebac 0304 	sub.w	r3, ip, r4
 800b5c6:	3b15      	subs	r3, #21
 800b5c8:	f023 0303 	bic.w	r3, r3, #3
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	f104 0015 	add.w	r0, r4, #21
 800b5d2:	4584      	cmp	ip, r0
 800b5d4:	bf38      	it	cc
 800b5d6:	2304      	movcc	r3, #4
 800b5d8:	50ca      	str	r2, [r1, r3]
 800b5da:	b10a      	cbz	r2, 800b5e0 <__lshift+0xa4>
 800b5dc:	f108 0602 	add.w	r6, r8, #2
 800b5e0:	3e01      	subs	r6, #1
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	612e      	str	r6, [r5, #16]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f7ff fd8e 	bl	800b108 <_Bfree>
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	e7c5      	b.n	800b586 <__lshift+0x4a>
 800b5fa:	3904      	subs	r1, #4
 800b5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b600:	f841 2f04 	str.w	r2, [r1, #4]!
 800b604:	459c      	cmp	ip, r3
 800b606:	d8f9      	bhi.n	800b5fc <__lshift+0xc0>
 800b608:	e7ea      	b.n	800b5e0 <__lshift+0xa4>
 800b60a:	bf00      	nop
 800b60c:	0800c99b 	.word	0x0800c99b
 800b610:	0800ca0c 	.word	0x0800ca0c

0800b614 <__mcmp>:
 800b614:	b530      	push	{r4, r5, lr}
 800b616:	6902      	ldr	r2, [r0, #16]
 800b618:	690c      	ldr	r4, [r1, #16]
 800b61a:	1b12      	subs	r2, r2, r4
 800b61c:	d10e      	bne.n	800b63c <__mcmp+0x28>
 800b61e:	f100 0314 	add.w	r3, r0, #20
 800b622:	3114      	adds	r1, #20
 800b624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b62c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b634:	42a5      	cmp	r5, r4
 800b636:	d003      	beq.n	800b640 <__mcmp+0x2c>
 800b638:	d305      	bcc.n	800b646 <__mcmp+0x32>
 800b63a:	2201      	movs	r2, #1
 800b63c:	4610      	mov	r0, r2
 800b63e:	bd30      	pop	{r4, r5, pc}
 800b640:	4283      	cmp	r3, r0
 800b642:	d3f3      	bcc.n	800b62c <__mcmp+0x18>
 800b644:	e7fa      	b.n	800b63c <__mcmp+0x28>
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	e7f7      	b.n	800b63c <__mcmp+0x28>

0800b64c <__mdiff>:
 800b64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	460c      	mov	r4, r1
 800b652:	4606      	mov	r6, r0
 800b654:	4611      	mov	r1, r2
 800b656:	4620      	mov	r0, r4
 800b658:	4690      	mov	r8, r2
 800b65a:	f7ff ffdb 	bl	800b614 <__mcmp>
 800b65e:	1e05      	subs	r5, r0, #0
 800b660:	d110      	bne.n	800b684 <__mdiff+0x38>
 800b662:	4629      	mov	r1, r5
 800b664:	4630      	mov	r0, r6
 800b666:	f7ff fd0f 	bl	800b088 <_Balloc>
 800b66a:	b930      	cbnz	r0, 800b67a <__mdiff+0x2e>
 800b66c:	4b3a      	ldr	r3, [pc, #232]	; (800b758 <__mdiff+0x10c>)
 800b66e:	4602      	mov	r2, r0
 800b670:	f240 2137 	movw	r1, #567	; 0x237
 800b674:	4839      	ldr	r0, [pc, #228]	; (800b75c <__mdiff+0x110>)
 800b676:	f7fe fab9 	bl	8009bec <__assert_func>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	bfa4      	itt	ge
 800b686:	4643      	movge	r3, r8
 800b688:	46a0      	movge	r8, r4
 800b68a:	4630      	mov	r0, r6
 800b68c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b690:	bfa6      	itte	ge
 800b692:	461c      	movge	r4, r3
 800b694:	2500      	movge	r5, #0
 800b696:	2501      	movlt	r5, #1
 800b698:	f7ff fcf6 	bl	800b088 <_Balloc>
 800b69c:	b920      	cbnz	r0, 800b6a8 <__mdiff+0x5c>
 800b69e:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <__mdiff+0x10c>)
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	f240 2145 	movw	r1, #581	; 0x245
 800b6a6:	e7e5      	b.n	800b674 <__mdiff+0x28>
 800b6a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6ac:	6926      	ldr	r6, [r4, #16]
 800b6ae:	60c5      	str	r5, [r0, #12]
 800b6b0:	f104 0914 	add.w	r9, r4, #20
 800b6b4:	f108 0514 	add.w	r5, r8, #20
 800b6b8:	f100 0e14 	add.w	lr, r0, #20
 800b6bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6c4:	f108 0210 	add.w	r2, r8, #16
 800b6c8:	46f2      	mov	sl, lr
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6d4:	fa11 f88b 	uxtah	r8, r1, fp
 800b6d8:	b299      	uxth	r1, r3
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	eba8 0801 	sub.w	r8, r8, r1
 800b6e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6e8:	fa1f f888 	uxth.w	r8, r8
 800b6ec:	1419      	asrs	r1, r3, #16
 800b6ee:	454e      	cmp	r6, r9
 800b6f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6f4:	f84a 3b04 	str.w	r3, [sl], #4
 800b6f8:	d8e8      	bhi.n	800b6cc <__mdiff+0x80>
 800b6fa:	1b33      	subs	r3, r6, r4
 800b6fc:	3b15      	subs	r3, #21
 800b6fe:	f023 0303 	bic.w	r3, r3, #3
 800b702:	3304      	adds	r3, #4
 800b704:	3415      	adds	r4, #21
 800b706:	42a6      	cmp	r6, r4
 800b708:	bf38      	it	cc
 800b70a:	2304      	movcc	r3, #4
 800b70c:	441d      	add	r5, r3
 800b70e:	4473      	add	r3, lr
 800b710:	469e      	mov	lr, r3
 800b712:	462e      	mov	r6, r5
 800b714:	4566      	cmp	r6, ip
 800b716:	d30e      	bcc.n	800b736 <__mdiff+0xea>
 800b718:	f10c 0203 	add.w	r2, ip, #3
 800b71c:	1b52      	subs	r2, r2, r5
 800b71e:	f022 0203 	bic.w	r2, r2, #3
 800b722:	3d03      	subs	r5, #3
 800b724:	45ac      	cmp	ip, r5
 800b726:	bf38      	it	cc
 800b728:	2200      	movcc	r2, #0
 800b72a:	4413      	add	r3, r2
 800b72c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b730:	b17a      	cbz	r2, 800b752 <__mdiff+0x106>
 800b732:	6107      	str	r7, [r0, #16]
 800b734:	e7a4      	b.n	800b680 <__mdiff+0x34>
 800b736:	f856 8b04 	ldr.w	r8, [r6], #4
 800b73a:	fa11 f288 	uxtah	r2, r1, r8
 800b73e:	1414      	asrs	r4, r2, #16
 800b740:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b744:	b292      	uxth	r2, r2
 800b746:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b74a:	f84e 2b04 	str.w	r2, [lr], #4
 800b74e:	1421      	asrs	r1, r4, #16
 800b750:	e7e0      	b.n	800b714 <__mdiff+0xc8>
 800b752:	3f01      	subs	r7, #1
 800b754:	e7ea      	b.n	800b72c <__mdiff+0xe0>
 800b756:	bf00      	nop
 800b758:	0800c99b 	.word	0x0800c99b
 800b75c:	0800ca0c 	.word	0x0800ca0c

0800b760 <__ulp>:
 800b760:	b082      	sub	sp, #8
 800b762:	ed8d 0b00 	vstr	d0, [sp]
 800b766:	9a01      	ldr	r2, [sp, #4]
 800b768:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <__ulp+0x48>)
 800b76a:	4013      	ands	r3, r2
 800b76c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b770:	2b00      	cmp	r3, #0
 800b772:	dc08      	bgt.n	800b786 <__ulp+0x26>
 800b774:	425b      	negs	r3, r3
 800b776:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b77a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b77e:	da04      	bge.n	800b78a <__ulp+0x2a>
 800b780:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b784:	4113      	asrs	r3, r2
 800b786:	2200      	movs	r2, #0
 800b788:	e008      	b.n	800b79c <__ulp+0x3c>
 800b78a:	f1a2 0314 	sub.w	r3, r2, #20
 800b78e:	2b1e      	cmp	r3, #30
 800b790:	bfda      	itte	le
 800b792:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b796:	40da      	lsrle	r2, r3
 800b798:	2201      	movgt	r2, #1
 800b79a:	2300      	movs	r3, #0
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	ec41 0b10 	vmov	d0, r0, r1
 800b7a4:	b002      	add	sp, #8
 800b7a6:	4770      	bx	lr
 800b7a8:	7ff00000 	.word	0x7ff00000

0800b7ac <__b2d>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	6906      	ldr	r6, [r0, #16]
 800b7b2:	f100 0814 	add.w	r8, r0, #20
 800b7b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7ba:	1f37      	subs	r7, r6, #4
 800b7bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	f7ff fd53 	bl	800b26c <__hi0bits>
 800b7c6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ca:	280a      	cmp	r0, #10
 800b7cc:	600b      	str	r3, [r1, #0]
 800b7ce:	491b      	ldr	r1, [pc, #108]	; (800b83c <__b2d+0x90>)
 800b7d0:	dc15      	bgt.n	800b7fe <__b2d+0x52>
 800b7d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b7da:	45b8      	cmp	r8, r7
 800b7dc:	ea43 0501 	orr.w	r5, r3, r1
 800b7e0:	bf34      	ite	cc
 800b7e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7e6:	2300      	movcs	r3, #0
 800b7e8:	3015      	adds	r0, #21
 800b7ea:	fa02 f000 	lsl.w	r0, r2, r0
 800b7ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800b7f2:	4303      	orrs	r3, r0
 800b7f4:	461c      	mov	r4, r3
 800b7f6:	ec45 4b10 	vmov	d0, r4, r5
 800b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fe:	45b8      	cmp	r8, r7
 800b800:	bf3a      	itte	cc
 800b802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b806:	f1a6 0708 	subcc.w	r7, r6, #8
 800b80a:	2300      	movcs	r3, #0
 800b80c:	380b      	subs	r0, #11
 800b80e:	d012      	beq.n	800b836 <__b2d+0x8a>
 800b810:	f1c0 0120 	rsb	r1, r0, #32
 800b814:	fa23 f401 	lsr.w	r4, r3, r1
 800b818:	4082      	lsls	r2, r0
 800b81a:	4322      	orrs	r2, r4
 800b81c:	4547      	cmp	r7, r8
 800b81e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b822:	bf8c      	ite	hi
 800b824:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b828:	2200      	movls	r2, #0
 800b82a:	4083      	lsls	r3, r0
 800b82c:	40ca      	lsrs	r2, r1
 800b82e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b832:	4313      	orrs	r3, r2
 800b834:	e7de      	b.n	800b7f4 <__b2d+0x48>
 800b836:	ea42 0501 	orr.w	r5, r2, r1
 800b83a:	e7db      	b.n	800b7f4 <__b2d+0x48>
 800b83c:	3ff00000 	.word	0x3ff00000

0800b840 <__d2b>:
 800b840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b844:	460f      	mov	r7, r1
 800b846:	2101      	movs	r1, #1
 800b848:	ec59 8b10 	vmov	r8, r9, d0
 800b84c:	4616      	mov	r6, r2
 800b84e:	f7ff fc1b 	bl	800b088 <_Balloc>
 800b852:	4604      	mov	r4, r0
 800b854:	b930      	cbnz	r0, 800b864 <__d2b+0x24>
 800b856:	4602      	mov	r2, r0
 800b858:	4b24      	ldr	r3, [pc, #144]	; (800b8ec <__d2b+0xac>)
 800b85a:	4825      	ldr	r0, [pc, #148]	; (800b8f0 <__d2b+0xb0>)
 800b85c:	f240 310f 	movw	r1, #783	; 0x30f
 800b860:	f7fe f9c4 	bl	8009bec <__assert_func>
 800b864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b86c:	bb2d      	cbnz	r5, 800b8ba <__d2b+0x7a>
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	f1b8 0300 	subs.w	r3, r8, #0
 800b874:	d026      	beq.n	800b8c4 <__d2b+0x84>
 800b876:	4668      	mov	r0, sp
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	f7ff fd17 	bl	800b2ac <__lo0bits>
 800b87e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b882:	b1e8      	cbz	r0, 800b8c0 <__d2b+0x80>
 800b884:	f1c0 0320 	rsb	r3, r0, #32
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	430b      	orrs	r3, r1
 800b88e:	40c2      	lsrs	r2, r0
 800b890:	6163      	str	r3, [r4, #20]
 800b892:	9201      	str	r2, [sp, #4]
 800b894:	9b01      	ldr	r3, [sp, #4]
 800b896:	61a3      	str	r3, [r4, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bf14      	ite	ne
 800b89c:	2202      	movne	r2, #2
 800b89e:	2201      	moveq	r2, #1
 800b8a0:	6122      	str	r2, [r4, #16]
 800b8a2:	b1bd      	cbz	r5, 800b8d4 <__d2b+0x94>
 800b8a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8a8:	4405      	add	r5, r0
 800b8aa:	603d      	str	r5, [r7, #0]
 800b8ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8b0:	6030      	str	r0, [r6, #0]
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8be:	e7d6      	b.n	800b86e <__d2b+0x2e>
 800b8c0:	6161      	str	r1, [r4, #20]
 800b8c2:	e7e7      	b.n	800b894 <__d2b+0x54>
 800b8c4:	a801      	add	r0, sp, #4
 800b8c6:	f7ff fcf1 	bl	800b2ac <__lo0bits>
 800b8ca:	9b01      	ldr	r3, [sp, #4]
 800b8cc:	6163      	str	r3, [r4, #20]
 800b8ce:	3020      	adds	r0, #32
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	e7e5      	b.n	800b8a0 <__d2b+0x60>
 800b8d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8dc:	6038      	str	r0, [r7, #0]
 800b8de:	6918      	ldr	r0, [r3, #16]
 800b8e0:	f7ff fcc4 	bl	800b26c <__hi0bits>
 800b8e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8e8:	e7e2      	b.n	800b8b0 <__d2b+0x70>
 800b8ea:	bf00      	nop
 800b8ec:	0800c99b 	.word	0x0800c99b
 800b8f0:	0800ca0c 	.word	0x0800ca0c

0800b8f4 <__ratio>:
 800b8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	4688      	mov	r8, r1
 800b8fa:	4669      	mov	r1, sp
 800b8fc:	4681      	mov	r9, r0
 800b8fe:	f7ff ff55 	bl	800b7ac <__b2d>
 800b902:	a901      	add	r1, sp, #4
 800b904:	4640      	mov	r0, r8
 800b906:	ec55 4b10 	vmov	r4, r5, d0
 800b90a:	f7ff ff4f 	bl	800b7ac <__b2d>
 800b90e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b912:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b916:	eba3 0c02 	sub.w	ip, r3, r2
 800b91a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b91e:	1a9b      	subs	r3, r3, r2
 800b920:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b924:	ec51 0b10 	vmov	r0, r1, d0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfd6      	itet	le
 800b92c:	460a      	movle	r2, r1
 800b92e:	462a      	movgt	r2, r5
 800b930:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b934:	468b      	mov	fp, r1
 800b936:	462f      	mov	r7, r5
 800b938:	bfd4      	ite	le
 800b93a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b93e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b942:	4620      	mov	r0, r4
 800b944:	ee10 2a10 	vmov	r2, s0
 800b948:	465b      	mov	r3, fp
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f4 ff7e 	bl	800084c <__aeabi_ddiv>
 800b950:	ec41 0b10 	vmov	d0, r0, r1
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b95a <__copybits>:
 800b95a:	3901      	subs	r1, #1
 800b95c:	b570      	push	{r4, r5, r6, lr}
 800b95e:	1149      	asrs	r1, r1, #5
 800b960:	6914      	ldr	r4, [r2, #16]
 800b962:	3101      	adds	r1, #1
 800b964:	f102 0314 	add.w	r3, r2, #20
 800b968:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b96c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b970:	1f05      	subs	r5, r0, #4
 800b972:	42a3      	cmp	r3, r4
 800b974:	d30c      	bcc.n	800b990 <__copybits+0x36>
 800b976:	1aa3      	subs	r3, r4, r2
 800b978:	3b11      	subs	r3, #17
 800b97a:	f023 0303 	bic.w	r3, r3, #3
 800b97e:	3211      	adds	r2, #17
 800b980:	42a2      	cmp	r2, r4
 800b982:	bf88      	it	hi
 800b984:	2300      	movhi	r3, #0
 800b986:	4418      	add	r0, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	4288      	cmp	r0, r1
 800b98c:	d305      	bcc.n	800b99a <__copybits+0x40>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f853 6b04 	ldr.w	r6, [r3], #4
 800b994:	f845 6f04 	str.w	r6, [r5, #4]!
 800b998:	e7eb      	b.n	800b972 <__copybits+0x18>
 800b99a:	f840 3b04 	str.w	r3, [r0], #4
 800b99e:	e7f4      	b.n	800b98a <__copybits+0x30>

0800b9a0 <__any_on>:
 800b9a0:	f100 0214 	add.w	r2, r0, #20
 800b9a4:	6900      	ldr	r0, [r0, #16]
 800b9a6:	114b      	asrs	r3, r1, #5
 800b9a8:	4298      	cmp	r0, r3
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	db11      	blt.n	800b9d2 <__any_on+0x32>
 800b9ae:	dd0a      	ble.n	800b9c6 <__any_on+0x26>
 800b9b0:	f011 011f 	ands.w	r1, r1, #31
 800b9b4:	d007      	beq.n	800b9c6 <__any_on+0x26>
 800b9b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9ba:	fa24 f001 	lsr.w	r0, r4, r1
 800b9be:	fa00 f101 	lsl.w	r1, r0, r1
 800b9c2:	428c      	cmp	r4, r1
 800b9c4:	d10b      	bne.n	800b9de <__any_on+0x3e>
 800b9c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d803      	bhi.n	800b9d6 <__any_on+0x36>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	bd10      	pop	{r4, pc}
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	e7f7      	b.n	800b9c6 <__any_on+0x26>
 800b9d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	d0f5      	beq.n	800b9ca <__any_on+0x2a>
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e7f6      	b.n	800b9d0 <__any_on+0x30>

0800b9e2 <_malloc_usable_size_r>:
 800b9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e6:	1f18      	subs	r0, r3, #4
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bfbc      	itt	lt
 800b9ec:	580b      	ldrlt	r3, [r1, r0]
 800b9ee:	18c0      	addlt	r0, r0, r3
 800b9f0:	4770      	bx	lr
	...

0800b9f4 <_strtol_l.constprop.0>:
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9fa:	d001      	beq.n	800ba00 <_strtol_l.constprop.0+0xc>
 800b9fc:	2b24      	cmp	r3, #36	; 0x24
 800b9fe:	d906      	bls.n	800ba0e <_strtol_l.constprop.0+0x1a>
 800ba00:	f7fe f8aa 	bl	8009b58 <__errno>
 800ba04:	2316      	movs	r3, #22
 800ba06:	6003      	str	r3, [r0, #0]
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800baf4 <_strtol_l.constprop.0+0x100>
 800ba12:	460d      	mov	r5, r1
 800ba14:	462e      	mov	r6, r5
 800ba16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ba1e:	f017 0708 	ands.w	r7, r7, #8
 800ba22:	d1f7      	bne.n	800ba14 <_strtol_l.constprop.0+0x20>
 800ba24:	2c2d      	cmp	r4, #45	; 0x2d
 800ba26:	d132      	bne.n	800ba8e <_strtol_l.constprop.0+0x9a>
 800ba28:	782c      	ldrb	r4, [r5, #0]
 800ba2a:	2701      	movs	r7, #1
 800ba2c:	1cb5      	adds	r5, r6, #2
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d05b      	beq.n	800baea <_strtol_l.constprop.0+0xf6>
 800ba32:	2b10      	cmp	r3, #16
 800ba34:	d109      	bne.n	800ba4a <_strtol_l.constprop.0+0x56>
 800ba36:	2c30      	cmp	r4, #48	; 0x30
 800ba38:	d107      	bne.n	800ba4a <_strtol_l.constprop.0+0x56>
 800ba3a:	782c      	ldrb	r4, [r5, #0]
 800ba3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba40:	2c58      	cmp	r4, #88	; 0x58
 800ba42:	d14d      	bne.n	800bae0 <_strtol_l.constprop.0+0xec>
 800ba44:	786c      	ldrb	r4, [r5, #1]
 800ba46:	2310      	movs	r3, #16
 800ba48:	3502      	adds	r5, #2
 800ba4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ba4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba52:	f04f 0e00 	mov.w	lr, #0
 800ba56:	fbb8 f9f3 	udiv	r9, r8, r3
 800ba5a:	4676      	mov	r6, lr
 800ba5c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ba60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba64:	f1bc 0f09 	cmp.w	ip, #9
 800ba68:	d816      	bhi.n	800ba98 <_strtol_l.constprop.0+0xa4>
 800ba6a:	4664      	mov	r4, ip
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	dd24      	ble.n	800baba <_strtol_l.constprop.0+0xc6>
 800ba70:	f1be 3fff 	cmp.w	lr, #4294967295
 800ba74:	d008      	beq.n	800ba88 <_strtol_l.constprop.0+0x94>
 800ba76:	45b1      	cmp	r9, r6
 800ba78:	d31c      	bcc.n	800bab4 <_strtol_l.constprop.0+0xc0>
 800ba7a:	d101      	bne.n	800ba80 <_strtol_l.constprop.0+0x8c>
 800ba7c:	45a2      	cmp	sl, r4
 800ba7e:	db19      	blt.n	800bab4 <_strtol_l.constprop.0+0xc0>
 800ba80:	fb06 4603 	mla	r6, r6, r3, r4
 800ba84:	f04f 0e01 	mov.w	lr, #1
 800ba88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba8c:	e7e8      	b.n	800ba60 <_strtol_l.constprop.0+0x6c>
 800ba8e:	2c2b      	cmp	r4, #43	; 0x2b
 800ba90:	bf04      	itt	eq
 800ba92:	782c      	ldrbeq	r4, [r5, #0]
 800ba94:	1cb5      	addeq	r5, r6, #2
 800ba96:	e7ca      	b.n	800ba2e <_strtol_l.constprop.0+0x3a>
 800ba98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba9c:	f1bc 0f19 	cmp.w	ip, #25
 800baa0:	d801      	bhi.n	800baa6 <_strtol_l.constprop.0+0xb2>
 800baa2:	3c37      	subs	r4, #55	; 0x37
 800baa4:	e7e2      	b.n	800ba6c <_strtol_l.constprop.0+0x78>
 800baa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800baaa:	f1bc 0f19 	cmp.w	ip, #25
 800baae:	d804      	bhi.n	800baba <_strtol_l.constprop.0+0xc6>
 800bab0:	3c57      	subs	r4, #87	; 0x57
 800bab2:	e7db      	b.n	800ba6c <_strtol_l.constprop.0+0x78>
 800bab4:	f04f 3eff 	mov.w	lr, #4294967295
 800bab8:	e7e6      	b.n	800ba88 <_strtol_l.constprop.0+0x94>
 800baba:	f1be 3fff 	cmp.w	lr, #4294967295
 800babe:	d105      	bne.n	800bacc <_strtol_l.constprop.0+0xd8>
 800bac0:	2322      	movs	r3, #34	; 0x22
 800bac2:	6003      	str	r3, [r0, #0]
 800bac4:	4646      	mov	r6, r8
 800bac6:	b942      	cbnz	r2, 800bada <_strtol_l.constprop.0+0xe6>
 800bac8:	4630      	mov	r0, r6
 800baca:	e79e      	b.n	800ba0a <_strtol_l.constprop.0+0x16>
 800bacc:	b107      	cbz	r7, 800bad0 <_strtol_l.constprop.0+0xdc>
 800bace:	4276      	negs	r6, r6
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d0f9      	beq.n	800bac8 <_strtol_l.constprop.0+0xd4>
 800bad4:	f1be 0f00 	cmp.w	lr, #0
 800bad8:	d000      	beq.n	800badc <_strtol_l.constprop.0+0xe8>
 800bada:	1e69      	subs	r1, r5, #1
 800badc:	6011      	str	r1, [r2, #0]
 800bade:	e7f3      	b.n	800bac8 <_strtol_l.constprop.0+0xd4>
 800bae0:	2430      	movs	r4, #48	; 0x30
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1b1      	bne.n	800ba4a <_strtol_l.constprop.0+0x56>
 800bae6:	2308      	movs	r3, #8
 800bae8:	e7af      	b.n	800ba4a <_strtol_l.constprop.0+0x56>
 800baea:	2c30      	cmp	r4, #48	; 0x30
 800baec:	d0a5      	beq.n	800ba3a <_strtol_l.constprop.0+0x46>
 800baee:	230a      	movs	r3, #10
 800baf0:	e7ab      	b.n	800ba4a <_strtol_l.constprop.0+0x56>
 800baf2:	bf00      	nop
 800baf4:	0800cb65 	.word	0x0800cb65

0800baf8 <_strtol_r>:
 800baf8:	f7ff bf7c 	b.w	800b9f4 <_strtol_l.constprop.0>

0800bafc <__ascii_wctomb>:
 800bafc:	b149      	cbz	r1, 800bb12 <__ascii_wctomb+0x16>
 800bafe:	2aff      	cmp	r2, #255	; 0xff
 800bb00:	bf85      	ittet	hi
 800bb02:	238a      	movhi	r3, #138	; 0x8a
 800bb04:	6003      	strhi	r3, [r0, #0]
 800bb06:	700a      	strbls	r2, [r1, #0]
 800bb08:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb0c:	bf98      	it	ls
 800bb0e:	2001      	movls	r0, #1
 800bb10:	4770      	bx	lr
 800bb12:	4608      	mov	r0, r1
 800bb14:	4770      	bx	lr

0800bb16 <__ssputs_r>:
 800bb16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb1a:	688e      	ldr	r6, [r1, #8]
 800bb1c:	461f      	mov	r7, r3
 800bb1e:	42be      	cmp	r6, r7
 800bb20:	680b      	ldr	r3, [r1, #0]
 800bb22:	4682      	mov	sl, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	4690      	mov	r8, r2
 800bb28:	d82c      	bhi.n	800bb84 <__ssputs_r+0x6e>
 800bb2a:	898a      	ldrh	r2, [r1, #12]
 800bb2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb30:	d026      	beq.n	800bb80 <__ssputs_r+0x6a>
 800bb32:	6965      	ldr	r5, [r4, #20]
 800bb34:	6909      	ldr	r1, [r1, #16]
 800bb36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb3a:	eba3 0901 	sub.w	r9, r3, r1
 800bb3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb42:	1c7b      	adds	r3, r7, #1
 800bb44:	444b      	add	r3, r9
 800bb46:	106d      	asrs	r5, r5, #1
 800bb48:	429d      	cmp	r5, r3
 800bb4a:	bf38      	it	cc
 800bb4c:	461d      	movcc	r5, r3
 800bb4e:	0553      	lsls	r3, r2, #21
 800bb50:	d527      	bpl.n	800bba2 <__ssputs_r+0x8c>
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7fc f892 	bl	8007c7c <_malloc_r>
 800bb58:	4606      	mov	r6, r0
 800bb5a:	b360      	cbz	r0, 800bbb6 <__ssputs_r+0xa0>
 800bb5c:	6921      	ldr	r1, [r4, #16]
 800bb5e:	464a      	mov	r2, r9
 800bb60:	f7fe f827 	bl	8009bb2 <memcpy>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb6e:	81a3      	strh	r3, [r4, #12]
 800bb70:	6126      	str	r6, [r4, #16]
 800bb72:	6165      	str	r5, [r4, #20]
 800bb74:	444e      	add	r6, r9
 800bb76:	eba5 0509 	sub.w	r5, r5, r9
 800bb7a:	6026      	str	r6, [r4, #0]
 800bb7c:	60a5      	str	r5, [r4, #8]
 800bb7e:	463e      	mov	r6, r7
 800bb80:	42be      	cmp	r6, r7
 800bb82:	d900      	bls.n	800bb86 <__ssputs_r+0x70>
 800bb84:	463e      	mov	r6, r7
 800bb86:	6820      	ldr	r0, [r4, #0]
 800bb88:	4632      	mov	r2, r6
 800bb8a:	4641      	mov	r1, r8
 800bb8c:	f000 f9dc 	bl	800bf48 <memmove>
 800bb90:	68a3      	ldr	r3, [r4, #8]
 800bb92:	1b9b      	subs	r3, r3, r6
 800bb94:	60a3      	str	r3, [r4, #8]
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	4433      	add	r3, r6
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba2:	462a      	mov	r2, r5
 800bba4:	f7fc f8fe 	bl	8007da4 <_realloc_r>
 800bba8:	4606      	mov	r6, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d1e0      	bne.n	800bb70 <__ssputs_r+0x5a>
 800bbae:	6921      	ldr	r1, [r4, #16]
 800bbb0:	4650      	mov	r0, sl
 800bbb2:	f7fe feb3 	bl	800a91c <_free_r>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	f8ca 3000 	str.w	r3, [sl]
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	e7e9      	b.n	800bb9e <__ssputs_r+0x88>
	...

0800bbcc <_svfiprintf_r>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	4698      	mov	r8, r3
 800bbd2:	898b      	ldrh	r3, [r1, #12]
 800bbd4:	061b      	lsls	r3, r3, #24
 800bbd6:	b09d      	sub	sp, #116	; 0x74
 800bbd8:	4607      	mov	r7, r0
 800bbda:	460d      	mov	r5, r1
 800bbdc:	4614      	mov	r4, r2
 800bbde:	d50e      	bpl.n	800bbfe <_svfiprintf_r+0x32>
 800bbe0:	690b      	ldr	r3, [r1, #16]
 800bbe2:	b963      	cbnz	r3, 800bbfe <_svfiprintf_r+0x32>
 800bbe4:	2140      	movs	r1, #64	; 0x40
 800bbe6:	f7fc f849 	bl	8007c7c <_malloc_r>
 800bbea:	6028      	str	r0, [r5, #0]
 800bbec:	6128      	str	r0, [r5, #16]
 800bbee:	b920      	cbnz	r0, 800bbfa <_svfiprintf_r+0x2e>
 800bbf0:	230c      	movs	r3, #12
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e0d0      	b.n	800bd9c <_svfiprintf_r+0x1d0>
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	616b      	str	r3, [r5, #20]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9309      	str	r3, [sp, #36]	; 0x24
 800bc02:	2320      	movs	r3, #32
 800bc04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc08:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0c:	2330      	movs	r3, #48	; 0x30
 800bc0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdb4 <_svfiprintf_r+0x1e8>
 800bc12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc16:	f04f 0901 	mov.w	r9, #1
 800bc1a:	4623      	mov	r3, r4
 800bc1c:	469a      	mov	sl, r3
 800bc1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc22:	b10a      	cbz	r2, 800bc28 <_svfiprintf_r+0x5c>
 800bc24:	2a25      	cmp	r2, #37	; 0x25
 800bc26:	d1f9      	bne.n	800bc1c <_svfiprintf_r+0x50>
 800bc28:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2c:	d00b      	beq.n	800bc46 <_svfiprintf_r+0x7a>
 800bc2e:	465b      	mov	r3, fp
 800bc30:	4622      	mov	r2, r4
 800bc32:	4629      	mov	r1, r5
 800bc34:	4638      	mov	r0, r7
 800bc36:	f7ff ff6e 	bl	800bb16 <__ssputs_r>
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f000 80a9 	beq.w	800bd92 <_svfiprintf_r+0x1c6>
 800bc40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc42:	445a      	add	r2, fp
 800bc44:	9209      	str	r2, [sp, #36]	; 0x24
 800bc46:	f89a 3000 	ldrb.w	r3, [sl]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 80a1 	beq.w	800bd92 <_svfiprintf_r+0x1c6>
 800bc50:	2300      	movs	r3, #0
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc5a:	f10a 0a01 	add.w	sl, sl, #1
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	9307      	str	r3, [sp, #28]
 800bc62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc66:	931a      	str	r3, [sp, #104]	; 0x68
 800bc68:	4654      	mov	r4, sl
 800bc6a:	2205      	movs	r2, #5
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	4850      	ldr	r0, [pc, #320]	; (800bdb4 <_svfiprintf_r+0x1e8>)
 800bc72:	f7f4 faad 	bl	80001d0 <memchr>
 800bc76:	9a04      	ldr	r2, [sp, #16]
 800bc78:	b9d8      	cbnz	r0, 800bcb2 <_svfiprintf_r+0xe6>
 800bc7a:	06d0      	lsls	r0, r2, #27
 800bc7c:	bf44      	itt	mi
 800bc7e:	2320      	movmi	r3, #32
 800bc80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc84:	0711      	lsls	r1, r2, #28
 800bc86:	bf44      	itt	mi
 800bc88:	232b      	movmi	r3, #43	; 0x2b
 800bc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc92:	2b2a      	cmp	r3, #42	; 0x2a
 800bc94:	d015      	beq.n	800bcc2 <_svfiprintf_r+0xf6>
 800bc96:	9a07      	ldr	r2, [sp, #28]
 800bc98:	4654      	mov	r4, sl
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f04f 0c0a 	mov.w	ip, #10
 800bca0:	4621      	mov	r1, r4
 800bca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca6:	3b30      	subs	r3, #48	; 0x30
 800bca8:	2b09      	cmp	r3, #9
 800bcaa:	d94d      	bls.n	800bd48 <_svfiprintf_r+0x17c>
 800bcac:	b1b0      	cbz	r0, 800bcdc <_svfiprintf_r+0x110>
 800bcae:	9207      	str	r2, [sp, #28]
 800bcb0:	e014      	b.n	800bcdc <_svfiprintf_r+0x110>
 800bcb2:	eba0 0308 	sub.w	r3, r0, r8
 800bcb6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	46a2      	mov	sl, r4
 800bcc0:	e7d2      	b.n	800bc68 <_svfiprintf_r+0x9c>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	1d19      	adds	r1, r3, #4
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	9103      	str	r1, [sp, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfbb      	ittet	lt
 800bcce:	425b      	neglt	r3, r3
 800bcd0:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd4:	9307      	strge	r3, [sp, #28]
 800bcd6:	9307      	strlt	r3, [sp, #28]
 800bcd8:	bfb8      	it	lt
 800bcda:	9204      	strlt	r2, [sp, #16]
 800bcdc:	7823      	ldrb	r3, [r4, #0]
 800bcde:	2b2e      	cmp	r3, #46	; 0x2e
 800bce0:	d10c      	bne.n	800bcfc <_svfiprintf_r+0x130>
 800bce2:	7863      	ldrb	r3, [r4, #1]
 800bce4:	2b2a      	cmp	r3, #42	; 0x2a
 800bce6:	d134      	bne.n	800bd52 <_svfiprintf_r+0x186>
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	9203      	str	r2, [sp, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bfb8      	it	lt
 800bcf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf8:	3402      	adds	r4, #2
 800bcfa:	9305      	str	r3, [sp, #20]
 800bcfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bdc4 <_svfiprintf_r+0x1f8>
 800bd00:	7821      	ldrb	r1, [r4, #0]
 800bd02:	2203      	movs	r2, #3
 800bd04:	4650      	mov	r0, sl
 800bd06:	f7f4 fa63 	bl	80001d0 <memchr>
 800bd0a:	b138      	cbz	r0, 800bd1c <_svfiprintf_r+0x150>
 800bd0c:	9b04      	ldr	r3, [sp, #16]
 800bd0e:	eba0 000a 	sub.w	r0, r0, sl
 800bd12:	2240      	movs	r2, #64	; 0x40
 800bd14:	4082      	lsls	r2, r0
 800bd16:	4313      	orrs	r3, r2
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd20:	4825      	ldr	r0, [pc, #148]	; (800bdb8 <_svfiprintf_r+0x1ec>)
 800bd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd26:	2206      	movs	r2, #6
 800bd28:	f7f4 fa52 	bl	80001d0 <memchr>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d038      	beq.n	800bda2 <_svfiprintf_r+0x1d6>
 800bd30:	4b22      	ldr	r3, [pc, #136]	; (800bdbc <_svfiprintf_r+0x1f0>)
 800bd32:	bb1b      	cbnz	r3, 800bd7c <_svfiprintf_r+0x1b0>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3307      	adds	r3, #7
 800bd38:	f023 0307 	bic.w	r3, r3, #7
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	4433      	add	r3, r6
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	e768      	b.n	800bc1a <_svfiprintf_r+0x4e>
 800bd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7a6      	b.n	800bca0 <_svfiprintf_r+0xd4>
 800bd52:	2300      	movs	r3, #0
 800bd54:	3401      	adds	r4, #1
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f04f 0c0a 	mov.w	ip, #10
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	3a30      	subs	r2, #48	; 0x30
 800bd66:	2a09      	cmp	r2, #9
 800bd68:	d903      	bls.n	800bd72 <_svfiprintf_r+0x1a6>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c6      	beq.n	800bcfc <_svfiprintf_r+0x130>
 800bd6e:	9105      	str	r1, [sp, #20]
 800bd70:	e7c4      	b.n	800bcfc <_svfiprintf_r+0x130>
 800bd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd76:	4604      	mov	r4, r0
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f0      	b.n	800bd5e <_svfiprintf_r+0x192>
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	462a      	mov	r2, r5
 800bd82:	4b0f      	ldr	r3, [pc, #60]	; (800bdc0 <_svfiprintf_r+0x1f4>)
 800bd84:	a904      	add	r1, sp, #16
 800bd86:	4638      	mov	r0, r7
 800bd88:	f7fc fefc 	bl	8008b84 <_printf_float>
 800bd8c:	1c42      	adds	r2, r0, #1
 800bd8e:	4606      	mov	r6, r0
 800bd90:	d1d6      	bne.n	800bd40 <_svfiprintf_r+0x174>
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	065b      	lsls	r3, r3, #25
 800bd96:	f53f af2d 	bmi.w	800bbf4 <_svfiprintf_r+0x28>
 800bd9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9c:	b01d      	add	sp, #116	; 0x74
 800bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4b05      	ldr	r3, [pc, #20]	; (800bdc0 <_svfiprintf_r+0x1f4>)
 800bdaa:	a904      	add	r1, sp, #16
 800bdac:	4638      	mov	r0, r7
 800bdae:	f7fd f98d 	bl	80090cc <_printf_i>
 800bdb2:	e7eb      	b.n	800bd8c <_svfiprintf_r+0x1c0>
 800bdb4:	0800cc65 	.word	0x0800cc65
 800bdb8:	0800cc6f 	.word	0x0800cc6f
 800bdbc:	08008b85 	.word	0x08008b85
 800bdc0:	0800bb17 	.word	0x0800bb17
 800bdc4:	0800cc6b 	.word	0x0800cc6b

0800bdc8 <__sflush_r>:
 800bdc8:	898a      	ldrh	r2, [r1, #12]
 800bdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdce:	4605      	mov	r5, r0
 800bdd0:	0710      	lsls	r0, r2, #28
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	d458      	bmi.n	800be88 <__sflush_r+0xc0>
 800bdd6:	684b      	ldr	r3, [r1, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dc05      	bgt.n	800bde8 <__sflush_r+0x20>
 800bddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dc02      	bgt.n	800bde8 <__sflush_r+0x20>
 800bde2:	2000      	movs	r0, #0
 800bde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdea:	2e00      	cmp	r6, #0
 800bdec:	d0f9      	beq.n	800bde2 <__sflush_r+0x1a>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdf4:	682f      	ldr	r7, [r5, #0]
 800bdf6:	6a21      	ldr	r1, [r4, #32]
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	d032      	beq.n	800be62 <__sflush_r+0x9a>
 800bdfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	075a      	lsls	r2, r3, #29
 800be02:	d505      	bpl.n	800be10 <__sflush_r+0x48>
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	1ac0      	subs	r0, r0, r3
 800be08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be0a:	b10b      	cbz	r3, 800be10 <__sflush_r+0x48>
 800be0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be0e:	1ac0      	subs	r0, r0, r3
 800be10:	2300      	movs	r3, #0
 800be12:	4602      	mov	r2, r0
 800be14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be16:	6a21      	ldr	r1, [r4, #32]
 800be18:	4628      	mov	r0, r5
 800be1a:	47b0      	blx	r6
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	d106      	bne.n	800be30 <__sflush_r+0x68>
 800be22:	6829      	ldr	r1, [r5, #0]
 800be24:	291d      	cmp	r1, #29
 800be26:	d82b      	bhi.n	800be80 <__sflush_r+0xb8>
 800be28:	4a29      	ldr	r2, [pc, #164]	; (800bed0 <__sflush_r+0x108>)
 800be2a:	410a      	asrs	r2, r1
 800be2c:	07d6      	lsls	r6, r2, #31
 800be2e:	d427      	bmi.n	800be80 <__sflush_r+0xb8>
 800be30:	2200      	movs	r2, #0
 800be32:	6062      	str	r2, [r4, #4]
 800be34:	04d9      	lsls	r1, r3, #19
 800be36:	6922      	ldr	r2, [r4, #16]
 800be38:	6022      	str	r2, [r4, #0]
 800be3a:	d504      	bpl.n	800be46 <__sflush_r+0x7e>
 800be3c:	1c42      	adds	r2, r0, #1
 800be3e:	d101      	bne.n	800be44 <__sflush_r+0x7c>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b903      	cbnz	r3, 800be46 <__sflush_r+0x7e>
 800be44:	6560      	str	r0, [r4, #84]	; 0x54
 800be46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be48:	602f      	str	r7, [r5, #0]
 800be4a:	2900      	cmp	r1, #0
 800be4c:	d0c9      	beq.n	800bde2 <__sflush_r+0x1a>
 800be4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be52:	4299      	cmp	r1, r3
 800be54:	d002      	beq.n	800be5c <__sflush_r+0x94>
 800be56:	4628      	mov	r0, r5
 800be58:	f7fe fd60 	bl	800a91c <_free_r>
 800be5c:	2000      	movs	r0, #0
 800be5e:	6360      	str	r0, [r4, #52]	; 0x34
 800be60:	e7c0      	b.n	800bde4 <__sflush_r+0x1c>
 800be62:	2301      	movs	r3, #1
 800be64:	4628      	mov	r0, r5
 800be66:	47b0      	blx	r6
 800be68:	1c41      	adds	r1, r0, #1
 800be6a:	d1c8      	bne.n	800bdfe <__sflush_r+0x36>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0c5      	beq.n	800bdfe <__sflush_r+0x36>
 800be72:	2b1d      	cmp	r3, #29
 800be74:	d001      	beq.n	800be7a <__sflush_r+0xb2>
 800be76:	2b16      	cmp	r3, #22
 800be78:	d101      	bne.n	800be7e <__sflush_r+0xb6>
 800be7a:	602f      	str	r7, [r5, #0]
 800be7c:	e7b1      	b.n	800bde2 <__sflush_r+0x1a>
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	e7ad      	b.n	800bde4 <__sflush_r+0x1c>
 800be88:	690f      	ldr	r7, [r1, #16]
 800be8a:	2f00      	cmp	r7, #0
 800be8c:	d0a9      	beq.n	800bde2 <__sflush_r+0x1a>
 800be8e:	0793      	lsls	r3, r2, #30
 800be90:	680e      	ldr	r6, [r1, #0]
 800be92:	bf08      	it	eq
 800be94:	694b      	ldreq	r3, [r1, #20]
 800be96:	600f      	str	r7, [r1, #0]
 800be98:	bf18      	it	ne
 800be9a:	2300      	movne	r3, #0
 800be9c:	eba6 0807 	sub.w	r8, r6, r7
 800bea0:	608b      	str	r3, [r1, #8]
 800bea2:	f1b8 0f00 	cmp.w	r8, #0
 800bea6:	dd9c      	ble.n	800bde2 <__sflush_r+0x1a>
 800bea8:	6a21      	ldr	r1, [r4, #32]
 800beaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beac:	4643      	mov	r3, r8
 800beae:	463a      	mov	r2, r7
 800beb0:	4628      	mov	r0, r5
 800beb2:	47b0      	blx	r6
 800beb4:	2800      	cmp	r0, #0
 800beb6:	dc06      	bgt.n	800bec6 <__sflush_r+0xfe>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295
 800bec4:	e78e      	b.n	800bde4 <__sflush_r+0x1c>
 800bec6:	4407      	add	r7, r0
 800bec8:	eba8 0800 	sub.w	r8, r8, r0
 800becc:	e7e9      	b.n	800bea2 <__sflush_r+0xda>
 800bece:	bf00      	nop
 800bed0:	dfbffffe 	.word	0xdfbffffe

0800bed4 <_fflush_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	690b      	ldr	r3, [r1, #16]
 800bed8:	4605      	mov	r5, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	b913      	cbnz	r3, 800bee4 <_fflush_r+0x10>
 800bede:	2500      	movs	r5, #0
 800bee0:	4628      	mov	r0, r5
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	b118      	cbz	r0, 800beee <_fflush_r+0x1a>
 800bee6:	6a03      	ldr	r3, [r0, #32]
 800bee8:	b90b      	cbnz	r3, 800beee <_fflush_r+0x1a>
 800beea:	f7fd fcad 	bl	8009848 <__sinit>
 800beee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d0f3      	beq.n	800bede <_fflush_r+0xa>
 800bef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bef8:	07d0      	lsls	r0, r2, #31
 800befa:	d404      	bmi.n	800bf06 <_fflush_r+0x32>
 800befc:	0599      	lsls	r1, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_fflush_r+0x32>
 800bf00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf02:	f7fd fe54 	bl	8009bae <__retarget_lock_acquire_recursive>
 800bf06:	4628      	mov	r0, r5
 800bf08:	4621      	mov	r1, r4
 800bf0a:	f7ff ff5d 	bl	800bdc8 <__sflush_r>
 800bf0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf10:	07da      	lsls	r2, r3, #31
 800bf12:	4605      	mov	r5, r0
 800bf14:	d4e4      	bmi.n	800bee0 <_fflush_r+0xc>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	059b      	lsls	r3, r3, #22
 800bf1a:	d4e1      	bmi.n	800bee0 <_fflush_r+0xc>
 800bf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf1e:	f7fd fe47 	bl	8009bb0 <__retarget_lock_release_recursive>
 800bf22:	e7dd      	b.n	800bee0 <_fflush_r+0xc>

0800bf24 <fiprintf>:
 800bf24:	b40e      	push	{r1, r2, r3}
 800bf26:	b503      	push	{r0, r1, lr}
 800bf28:	4601      	mov	r1, r0
 800bf2a:	ab03      	add	r3, sp, #12
 800bf2c:	4805      	ldr	r0, [pc, #20]	; (800bf44 <fiprintf+0x20>)
 800bf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf32:	6800      	ldr	r0, [r0, #0]
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	f000 f867 	bl	800c008 <_vfiprintf_r>
 800bf3a:	b002      	add	sp, #8
 800bf3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf40:	b003      	add	sp, #12
 800bf42:	4770      	bx	lr
 800bf44:	200001d0 	.word	0x200001d0

0800bf48 <memmove>:
 800bf48:	4288      	cmp	r0, r1
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	eb01 0402 	add.w	r4, r1, r2
 800bf50:	d902      	bls.n	800bf58 <memmove+0x10>
 800bf52:	4284      	cmp	r4, r0
 800bf54:	4623      	mov	r3, r4
 800bf56:	d807      	bhi.n	800bf68 <memmove+0x20>
 800bf58:	1e43      	subs	r3, r0, #1
 800bf5a:	42a1      	cmp	r1, r4
 800bf5c:	d008      	beq.n	800bf70 <memmove+0x28>
 800bf5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf66:	e7f8      	b.n	800bf5a <memmove+0x12>
 800bf68:	4402      	add	r2, r0
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	428a      	cmp	r2, r1
 800bf6e:	d100      	bne.n	800bf72 <memmove+0x2a>
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf7a:	e7f7      	b.n	800bf6c <memmove+0x24>

0800bf7c <abort>:
 800bf7c:	b508      	push	{r3, lr}
 800bf7e:	2006      	movs	r0, #6
 800bf80:	f000 fa1a 	bl	800c3b8 <raise>
 800bf84:	2001      	movs	r0, #1
 800bf86:	f7f7 fb61 	bl	800364c <_exit>

0800bf8a <_calloc_r>:
 800bf8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf8c:	fba1 2402 	umull	r2, r4, r1, r2
 800bf90:	b94c      	cbnz	r4, 800bfa6 <_calloc_r+0x1c>
 800bf92:	4611      	mov	r1, r2
 800bf94:	9201      	str	r2, [sp, #4]
 800bf96:	f7fb fe71 	bl	8007c7c <_malloc_r>
 800bf9a:	9a01      	ldr	r2, [sp, #4]
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	b930      	cbnz	r0, 800bfae <_calloc_r+0x24>
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	b003      	add	sp, #12
 800bfa4:	bd30      	pop	{r4, r5, pc}
 800bfa6:	220c      	movs	r2, #12
 800bfa8:	6002      	str	r2, [r0, #0]
 800bfaa:	2500      	movs	r5, #0
 800bfac:	e7f8      	b.n	800bfa0 <_calloc_r+0x16>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	f7fd fce3 	bl	800997a <memset>
 800bfb4:	e7f4      	b.n	800bfa0 <_calloc_r+0x16>

0800bfb6 <__sfputc_r>:
 800bfb6:	6893      	ldr	r3, [r2, #8]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	b410      	push	{r4}
 800bfbe:	6093      	str	r3, [r2, #8]
 800bfc0:	da08      	bge.n	800bfd4 <__sfputc_r+0x1e>
 800bfc2:	6994      	ldr	r4, [r2, #24]
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	db01      	blt.n	800bfcc <__sfputc_r+0x16>
 800bfc8:	290a      	cmp	r1, #10
 800bfca:	d103      	bne.n	800bfd4 <__sfputc_r+0x1e>
 800bfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd0:	f000 b934 	b.w	800c23c <__swbuf_r>
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	1c58      	adds	r0, r3, #1
 800bfd8:	6010      	str	r0, [r2, #0]
 800bfda:	7019      	strb	r1, [r3, #0]
 800bfdc:	4608      	mov	r0, r1
 800bfde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <__sfputs_r>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460f      	mov	r7, r1
 800bfea:	4614      	mov	r4, r2
 800bfec:	18d5      	adds	r5, r2, r3
 800bfee:	42ac      	cmp	r4, r5
 800bff0:	d101      	bne.n	800bff6 <__sfputs_r+0x12>
 800bff2:	2000      	movs	r0, #0
 800bff4:	e007      	b.n	800c006 <__sfputs_r+0x22>
 800bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffa:	463a      	mov	r2, r7
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff ffda 	bl	800bfb6 <__sfputc_r>
 800c002:	1c43      	adds	r3, r0, #1
 800c004:	d1f3      	bne.n	800bfee <__sfputs_r+0xa>
 800c006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c008 <_vfiprintf_r>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	460d      	mov	r5, r1
 800c00e:	b09d      	sub	sp, #116	; 0x74
 800c010:	4614      	mov	r4, r2
 800c012:	4698      	mov	r8, r3
 800c014:	4606      	mov	r6, r0
 800c016:	b118      	cbz	r0, 800c020 <_vfiprintf_r+0x18>
 800c018:	6a03      	ldr	r3, [r0, #32]
 800c01a:	b90b      	cbnz	r3, 800c020 <_vfiprintf_r+0x18>
 800c01c:	f7fd fc14 	bl	8009848 <__sinit>
 800c020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c022:	07d9      	lsls	r1, r3, #31
 800c024:	d405      	bmi.n	800c032 <_vfiprintf_r+0x2a>
 800c026:	89ab      	ldrh	r3, [r5, #12]
 800c028:	059a      	lsls	r2, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_vfiprintf_r+0x2a>
 800c02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c02e:	f7fd fdbe 	bl	8009bae <__retarget_lock_acquire_recursive>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	071b      	lsls	r3, r3, #28
 800c036:	d501      	bpl.n	800c03c <_vfiprintf_r+0x34>
 800c038:	692b      	ldr	r3, [r5, #16]
 800c03a:	b99b      	cbnz	r3, 800c064 <_vfiprintf_r+0x5c>
 800c03c:	4629      	mov	r1, r5
 800c03e:	4630      	mov	r0, r6
 800c040:	f000 f93a 	bl	800c2b8 <__swsetup_r>
 800c044:	b170      	cbz	r0, 800c064 <_vfiprintf_r+0x5c>
 800c046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c048:	07dc      	lsls	r4, r3, #31
 800c04a:	d504      	bpl.n	800c056 <_vfiprintf_r+0x4e>
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	b01d      	add	sp, #116	; 0x74
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	0598      	lsls	r0, r3, #22
 800c05a:	d4f7      	bmi.n	800c04c <_vfiprintf_r+0x44>
 800c05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05e:	f7fd fda7 	bl	8009bb0 <__retarget_lock_release_recursive>
 800c062:	e7f3      	b.n	800c04c <_vfiprintf_r+0x44>
 800c064:	2300      	movs	r3, #0
 800c066:	9309      	str	r3, [sp, #36]	; 0x24
 800c068:	2320      	movs	r3, #32
 800c06a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c072:	2330      	movs	r3, #48	; 0x30
 800c074:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c228 <_vfiprintf_r+0x220>
 800c078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	4623      	mov	r3, r4
 800c082:	469a      	mov	sl, r3
 800c084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c088:	b10a      	cbz	r2, 800c08e <_vfiprintf_r+0x86>
 800c08a:	2a25      	cmp	r2, #37	; 0x25
 800c08c:	d1f9      	bne.n	800c082 <_vfiprintf_r+0x7a>
 800c08e:	ebba 0b04 	subs.w	fp, sl, r4
 800c092:	d00b      	beq.n	800c0ac <_vfiprintf_r+0xa4>
 800c094:	465b      	mov	r3, fp
 800c096:	4622      	mov	r2, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7ff ffa2 	bl	800bfe4 <__sfputs_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	f000 80a9 	beq.w	800c1f8 <_vfiprintf_r+0x1f0>
 800c0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a8:	445a      	add	r2, fp
 800c0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 80a1 	beq.w	800c1f8 <_vfiprintf_r+0x1f0>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c0:	f10a 0a01 	add.w	sl, sl, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ce:	4654      	mov	r4, sl
 800c0d0:	2205      	movs	r2, #5
 800c0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d6:	4854      	ldr	r0, [pc, #336]	; (800c228 <_vfiprintf_r+0x220>)
 800c0d8:	f7f4 f87a 	bl	80001d0 <memchr>
 800c0dc:	9a04      	ldr	r2, [sp, #16]
 800c0de:	b9d8      	cbnz	r0, 800c118 <_vfiprintf_r+0x110>
 800c0e0:	06d1      	lsls	r1, r2, #27
 800c0e2:	bf44      	itt	mi
 800c0e4:	2320      	movmi	r3, #32
 800c0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0ea:	0713      	lsls	r3, r2, #28
 800c0ec:	bf44      	itt	mi
 800c0ee:	232b      	movmi	r3, #43	; 0x2b
 800c0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fa:	d015      	beq.n	800c128 <_vfiprintf_r+0x120>
 800c0fc:	9a07      	ldr	r2, [sp, #28]
 800c0fe:	4654      	mov	r4, sl
 800c100:	2000      	movs	r0, #0
 800c102:	f04f 0c0a 	mov.w	ip, #10
 800c106:	4621      	mov	r1, r4
 800c108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c10c:	3b30      	subs	r3, #48	; 0x30
 800c10e:	2b09      	cmp	r3, #9
 800c110:	d94d      	bls.n	800c1ae <_vfiprintf_r+0x1a6>
 800c112:	b1b0      	cbz	r0, 800c142 <_vfiprintf_r+0x13a>
 800c114:	9207      	str	r2, [sp, #28]
 800c116:	e014      	b.n	800c142 <_vfiprintf_r+0x13a>
 800c118:	eba0 0308 	sub.w	r3, r0, r8
 800c11c:	fa09 f303 	lsl.w	r3, r9, r3
 800c120:	4313      	orrs	r3, r2
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	46a2      	mov	sl, r4
 800c126:	e7d2      	b.n	800c0ce <_vfiprintf_r+0xc6>
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	1d19      	adds	r1, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	9103      	str	r1, [sp, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	bfbb      	ittet	lt
 800c134:	425b      	neglt	r3, r3
 800c136:	f042 0202 	orrlt.w	r2, r2, #2
 800c13a:	9307      	strge	r3, [sp, #28]
 800c13c:	9307      	strlt	r3, [sp, #28]
 800c13e:	bfb8      	it	lt
 800c140:	9204      	strlt	r2, [sp, #16]
 800c142:	7823      	ldrb	r3, [r4, #0]
 800c144:	2b2e      	cmp	r3, #46	; 0x2e
 800c146:	d10c      	bne.n	800c162 <_vfiprintf_r+0x15a>
 800c148:	7863      	ldrb	r3, [r4, #1]
 800c14a:	2b2a      	cmp	r3, #42	; 0x2a
 800c14c:	d134      	bne.n	800c1b8 <_vfiprintf_r+0x1b0>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	1d1a      	adds	r2, r3, #4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9203      	str	r2, [sp, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfb8      	it	lt
 800c15a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c15e:	3402      	adds	r4, #2
 800c160:	9305      	str	r3, [sp, #20]
 800c162:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c238 <_vfiprintf_r+0x230>
 800c166:	7821      	ldrb	r1, [r4, #0]
 800c168:	2203      	movs	r2, #3
 800c16a:	4650      	mov	r0, sl
 800c16c:	f7f4 f830 	bl	80001d0 <memchr>
 800c170:	b138      	cbz	r0, 800c182 <_vfiprintf_r+0x17a>
 800c172:	9b04      	ldr	r3, [sp, #16]
 800c174:	eba0 000a 	sub.w	r0, r0, sl
 800c178:	2240      	movs	r2, #64	; 0x40
 800c17a:	4082      	lsls	r2, r0
 800c17c:	4313      	orrs	r3, r2
 800c17e:	3401      	adds	r4, #1
 800c180:	9304      	str	r3, [sp, #16]
 800c182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c186:	4829      	ldr	r0, [pc, #164]	; (800c22c <_vfiprintf_r+0x224>)
 800c188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c18c:	2206      	movs	r2, #6
 800c18e:	f7f4 f81f 	bl	80001d0 <memchr>
 800c192:	2800      	cmp	r0, #0
 800c194:	d03f      	beq.n	800c216 <_vfiprintf_r+0x20e>
 800c196:	4b26      	ldr	r3, [pc, #152]	; (800c230 <_vfiprintf_r+0x228>)
 800c198:	bb1b      	cbnz	r3, 800c1e2 <_vfiprintf_r+0x1da>
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	3307      	adds	r3, #7
 800c19e:	f023 0307 	bic.w	r3, r3, #7
 800c1a2:	3308      	adds	r3, #8
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a8:	443b      	add	r3, r7
 800c1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ac:	e768      	b.n	800c080 <_vfiprintf_r+0x78>
 800c1ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	e7a6      	b.n	800c106 <_vfiprintf_r+0xfe>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	3401      	adds	r4, #1
 800c1bc:	9305      	str	r3, [sp, #20]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	f04f 0c0a 	mov.w	ip, #10
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ca:	3a30      	subs	r2, #48	; 0x30
 800c1cc:	2a09      	cmp	r2, #9
 800c1ce:	d903      	bls.n	800c1d8 <_vfiprintf_r+0x1d0>
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d0c6      	beq.n	800c162 <_vfiprintf_r+0x15a>
 800c1d4:	9105      	str	r1, [sp, #20]
 800c1d6:	e7c4      	b.n	800c162 <_vfiprintf_r+0x15a>
 800c1d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1dc:	4604      	mov	r4, r0
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e7f0      	b.n	800c1c4 <_vfiprintf_r+0x1bc>
 800c1e2:	ab03      	add	r3, sp, #12
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	462a      	mov	r2, r5
 800c1e8:	4b12      	ldr	r3, [pc, #72]	; (800c234 <_vfiprintf_r+0x22c>)
 800c1ea:	a904      	add	r1, sp, #16
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7fc fcc9 	bl	8008b84 <_printf_float>
 800c1f2:	4607      	mov	r7, r0
 800c1f4:	1c78      	adds	r0, r7, #1
 800c1f6:	d1d6      	bne.n	800c1a6 <_vfiprintf_r+0x19e>
 800c1f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1fa:	07d9      	lsls	r1, r3, #31
 800c1fc:	d405      	bmi.n	800c20a <_vfiprintf_r+0x202>
 800c1fe:	89ab      	ldrh	r3, [r5, #12]
 800c200:	059a      	lsls	r2, r3, #22
 800c202:	d402      	bmi.n	800c20a <_vfiprintf_r+0x202>
 800c204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c206:	f7fd fcd3 	bl	8009bb0 <__retarget_lock_release_recursive>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	065b      	lsls	r3, r3, #25
 800c20e:	f53f af1d 	bmi.w	800c04c <_vfiprintf_r+0x44>
 800c212:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c214:	e71c      	b.n	800c050 <_vfiprintf_r+0x48>
 800c216:	ab03      	add	r3, sp, #12
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	462a      	mov	r2, r5
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <_vfiprintf_r+0x22c>)
 800c21e:	a904      	add	r1, sp, #16
 800c220:	4630      	mov	r0, r6
 800c222:	f7fc ff53 	bl	80090cc <_printf_i>
 800c226:	e7e4      	b.n	800c1f2 <_vfiprintf_r+0x1ea>
 800c228:	0800cc65 	.word	0x0800cc65
 800c22c:	0800cc6f 	.word	0x0800cc6f
 800c230:	08008b85 	.word	0x08008b85
 800c234:	0800bfe5 	.word	0x0800bfe5
 800c238:	0800cc6b 	.word	0x0800cc6b

0800c23c <__swbuf_r>:
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23e:	460e      	mov	r6, r1
 800c240:	4614      	mov	r4, r2
 800c242:	4605      	mov	r5, r0
 800c244:	b118      	cbz	r0, 800c24e <__swbuf_r+0x12>
 800c246:	6a03      	ldr	r3, [r0, #32]
 800c248:	b90b      	cbnz	r3, 800c24e <__swbuf_r+0x12>
 800c24a:	f7fd fafd 	bl	8009848 <__sinit>
 800c24e:	69a3      	ldr	r3, [r4, #24]
 800c250:	60a3      	str	r3, [r4, #8]
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	071a      	lsls	r2, r3, #28
 800c256:	d525      	bpl.n	800c2a4 <__swbuf_r+0x68>
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	b31b      	cbz	r3, 800c2a4 <__swbuf_r+0x68>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	6922      	ldr	r2, [r4, #16]
 800c260:	1a98      	subs	r0, r3, r2
 800c262:	6963      	ldr	r3, [r4, #20]
 800c264:	b2f6      	uxtb	r6, r6
 800c266:	4283      	cmp	r3, r0
 800c268:	4637      	mov	r7, r6
 800c26a:	dc04      	bgt.n	800c276 <__swbuf_r+0x3a>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f7ff fe30 	bl	800bed4 <_fflush_r>
 800c274:	b9e0      	cbnz	r0, 800c2b0 <__swbuf_r+0x74>
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	3b01      	subs	r3, #1
 800c27a:	60a3      	str	r3, [r4, #8]
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	1c5a      	adds	r2, r3, #1
 800c280:	6022      	str	r2, [r4, #0]
 800c282:	701e      	strb	r6, [r3, #0]
 800c284:	6962      	ldr	r2, [r4, #20]
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	429a      	cmp	r2, r3
 800c28a:	d004      	beq.n	800c296 <__swbuf_r+0x5a>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	07db      	lsls	r3, r3, #31
 800c290:	d506      	bpl.n	800c2a0 <__swbuf_r+0x64>
 800c292:	2e0a      	cmp	r6, #10
 800c294:	d104      	bne.n	800c2a0 <__swbuf_r+0x64>
 800c296:	4621      	mov	r1, r4
 800c298:	4628      	mov	r0, r5
 800c29a:	f7ff fe1b 	bl	800bed4 <_fflush_r>
 800c29e:	b938      	cbnz	r0, 800c2b0 <__swbuf_r+0x74>
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 f806 	bl	800c2b8 <__swsetup_r>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d0d5      	beq.n	800c25c <__swbuf_r+0x20>
 800c2b0:	f04f 37ff 	mov.w	r7, #4294967295
 800c2b4:	e7f4      	b.n	800c2a0 <__swbuf_r+0x64>
	...

0800c2b8 <__swsetup_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4b2a      	ldr	r3, [pc, #168]	; (800c364 <__swsetup_r+0xac>)
 800c2bc:	4605      	mov	r5, r0
 800c2be:	6818      	ldr	r0, [r3, #0]
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	b118      	cbz	r0, 800c2cc <__swsetup_r+0x14>
 800c2c4:	6a03      	ldr	r3, [r0, #32]
 800c2c6:	b90b      	cbnz	r3, 800c2cc <__swsetup_r+0x14>
 800c2c8:	f7fd fabe 	bl	8009848 <__sinit>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2d2:	0718      	lsls	r0, r3, #28
 800c2d4:	d422      	bmi.n	800c31c <__swsetup_r+0x64>
 800c2d6:	06d9      	lsls	r1, r3, #27
 800c2d8:	d407      	bmi.n	800c2ea <__swsetup_r+0x32>
 800c2da:	2309      	movs	r3, #9
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	e034      	b.n	800c354 <__swsetup_r+0x9c>
 800c2ea:	0758      	lsls	r0, r3, #29
 800c2ec:	d512      	bpl.n	800c314 <__swsetup_r+0x5c>
 800c2ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2f0:	b141      	cbz	r1, 800c304 <__swsetup_r+0x4c>
 800c2f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2f6:	4299      	cmp	r1, r3
 800c2f8:	d002      	beq.n	800c300 <__swsetup_r+0x48>
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f7fe fb0e 	bl	800a91c <_free_r>
 800c300:	2300      	movs	r3, #0
 800c302:	6363      	str	r3, [r4, #52]	; 0x34
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	2300      	movs	r3, #0
 800c30e:	6063      	str	r3, [r4, #4]
 800c310:	6923      	ldr	r3, [r4, #16]
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	f043 0308 	orr.w	r3, r3, #8
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	b94b      	cbnz	r3, 800c334 <__swsetup_r+0x7c>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c32a:	d003      	beq.n	800c334 <__swsetup_r+0x7c>
 800c32c:	4621      	mov	r1, r4
 800c32e:	4628      	mov	r0, r5
 800c330:	f000 f884 	bl	800c43c <__smakebuf_r>
 800c334:	89a0      	ldrh	r0, [r4, #12]
 800c336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c33a:	f010 0301 	ands.w	r3, r0, #1
 800c33e:	d00a      	beq.n	800c356 <__swsetup_r+0x9e>
 800c340:	2300      	movs	r3, #0
 800c342:	60a3      	str	r3, [r4, #8]
 800c344:	6963      	ldr	r3, [r4, #20]
 800c346:	425b      	negs	r3, r3
 800c348:	61a3      	str	r3, [r4, #24]
 800c34a:	6923      	ldr	r3, [r4, #16]
 800c34c:	b943      	cbnz	r3, 800c360 <__swsetup_r+0xa8>
 800c34e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c352:	d1c4      	bne.n	800c2de <__swsetup_r+0x26>
 800c354:	bd38      	pop	{r3, r4, r5, pc}
 800c356:	0781      	lsls	r1, r0, #30
 800c358:	bf58      	it	pl
 800c35a:	6963      	ldrpl	r3, [r4, #20]
 800c35c:	60a3      	str	r3, [r4, #8]
 800c35e:	e7f4      	b.n	800c34a <__swsetup_r+0x92>
 800c360:	2000      	movs	r0, #0
 800c362:	e7f7      	b.n	800c354 <__swsetup_r+0x9c>
 800c364:	200001d0 	.word	0x200001d0

0800c368 <_raise_r>:
 800c368:	291f      	cmp	r1, #31
 800c36a:	b538      	push	{r3, r4, r5, lr}
 800c36c:	4604      	mov	r4, r0
 800c36e:	460d      	mov	r5, r1
 800c370:	d904      	bls.n	800c37c <_raise_r+0x14>
 800c372:	2316      	movs	r3, #22
 800c374:	6003      	str	r3, [r0, #0]
 800c376:	f04f 30ff 	mov.w	r0, #4294967295
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c37e:	b112      	cbz	r2, 800c386 <_raise_r+0x1e>
 800c380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c384:	b94b      	cbnz	r3, 800c39a <_raise_r+0x32>
 800c386:	4620      	mov	r0, r4
 800c388:	f000 f830 	bl	800c3ec <_getpid_r>
 800c38c:	462a      	mov	r2, r5
 800c38e:	4601      	mov	r1, r0
 800c390:	4620      	mov	r0, r4
 800c392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c396:	f000 b817 	b.w	800c3c8 <_kill_r>
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d00a      	beq.n	800c3b4 <_raise_r+0x4c>
 800c39e:	1c59      	adds	r1, r3, #1
 800c3a0:	d103      	bne.n	800c3aa <_raise_r+0x42>
 800c3a2:	2316      	movs	r3, #22
 800c3a4:	6003      	str	r3, [r0, #0]
 800c3a6:	2001      	movs	r0, #1
 800c3a8:	e7e7      	b.n	800c37a <_raise_r+0x12>
 800c3aa:	2400      	movs	r4, #0
 800c3ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	4798      	blx	r3
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e7e0      	b.n	800c37a <_raise_r+0x12>

0800c3b8 <raise>:
 800c3b8:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <raise+0xc>)
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f7ff bfd3 	b.w	800c368 <_raise_r>
 800c3c2:	bf00      	nop
 800c3c4:	200001d0 	.word	0x200001d0

0800c3c8 <_kill_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d07      	ldr	r5, [pc, #28]	; (800c3e8 <_kill_r+0x20>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	602b      	str	r3, [r5, #0]
 800c3d6:	f7f7 f929 	bl	800362c <_kill>
 800c3da:	1c43      	adds	r3, r0, #1
 800c3dc:	d102      	bne.n	800c3e4 <_kill_r+0x1c>
 800c3de:	682b      	ldr	r3, [r5, #0]
 800c3e0:	b103      	cbz	r3, 800c3e4 <_kill_r+0x1c>
 800c3e2:	6023      	str	r3, [r4, #0]
 800c3e4:	bd38      	pop	{r3, r4, r5, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000f00 	.word	0x20000f00

0800c3ec <_getpid_r>:
 800c3ec:	f7f7 b916 	b.w	800361c <_getpid>

0800c3f0 <__swhatbuf_r>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	b096      	sub	sp, #88	; 0x58
 800c3fc:	4615      	mov	r5, r2
 800c3fe:	461e      	mov	r6, r3
 800c400:	da0d      	bge.n	800c41e <__swhatbuf_r+0x2e>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c408:	f04f 0100 	mov.w	r1, #0
 800c40c:	bf0c      	ite	eq
 800c40e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c412:	2340      	movne	r3, #64	; 0x40
 800c414:	2000      	movs	r0, #0
 800c416:	6031      	str	r1, [r6, #0]
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	b016      	add	sp, #88	; 0x58
 800c41c:	bd70      	pop	{r4, r5, r6, pc}
 800c41e:	466a      	mov	r2, sp
 800c420:	f000 f848 	bl	800c4b4 <_fstat_r>
 800c424:	2800      	cmp	r0, #0
 800c426:	dbec      	blt.n	800c402 <__swhatbuf_r+0x12>
 800c428:	9901      	ldr	r1, [sp, #4]
 800c42a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c42e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c432:	4259      	negs	r1, r3
 800c434:	4159      	adcs	r1, r3
 800c436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c43a:	e7eb      	b.n	800c414 <__swhatbuf_r+0x24>

0800c43c <__smakebuf_r>:
 800c43c:	898b      	ldrh	r3, [r1, #12]
 800c43e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c440:	079d      	lsls	r5, r3, #30
 800c442:	4606      	mov	r6, r0
 800c444:	460c      	mov	r4, r1
 800c446:	d507      	bpl.n	800c458 <__smakebuf_r+0x1c>
 800c448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	6123      	str	r3, [r4, #16]
 800c450:	2301      	movs	r3, #1
 800c452:	6163      	str	r3, [r4, #20]
 800c454:	b002      	add	sp, #8
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	ab01      	add	r3, sp, #4
 800c45a:	466a      	mov	r2, sp
 800c45c:	f7ff ffc8 	bl	800c3f0 <__swhatbuf_r>
 800c460:	9900      	ldr	r1, [sp, #0]
 800c462:	4605      	mov	r5, r0
 800c464:	4630      	mov	r0, r6
 800c466:	f7fb fc09 	bl	8007c7c <_malloc_r>
 800c46a:	b948      	cbnz	r0, 800c480 <__smakebuf_r+0x44>
 800c46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c470:	059a      	lsls	r2, r3, #22
 800c472:	d4ef      	bmi.n	800c454 <__smakebuf_r+0x18>
 800c474:	f023 0303 	bic.w	r3, r3, #3
 800c478:	f043 0302 	orr.w	r3, r3, #2
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	e7e3      	b.n	800c448 <__smakebuf_r+0xc>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	6020      	str	r0, [r4, #0]
 800c484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	9b00      	ldr	r3, [sp, #0]
 800c48c:	6163      	str	r3, [r4, #20]
 800c48e:	9b01      	ldr	r3, [sp, #4]
 800c490:	6120      	str	r0, [r4, #16]
 800c492:	b15b      	cbz	r3, 800c4ac <__smakebuf_r+0x70>
 800c494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c498:	4630      	mov	r0, r6
 800c49a:	f000 f81d 	bl	800c4d8 <_isatty_r>
 800c49e:	b128      	cbz	r0, 800c4ac <__smakebuf_r+0x70>
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	f023 0303 	bic.w	r3, r3, #3
 800c4a6:	f043 0301 	orr.w	r3, r3, #1
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	431d      	orrs	r5, r3
 800c4b0:	81a5      	strh	r5, [r4, #12]
 800c4b2:	e7cf      	b.n	800c454 <__smakebuf_r+0x18>

0800c4b4 <_fstat_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d07      	ldr	r5, [pc, #28]	; (800c4d4 <_fstat_r+0x20>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	4611      	mov	r1, r2
 800c4c0:	602b      	str	r3, [r5, #0]
 800c4c2:	f7f7 f912 	bl	80036ea <_fstat>
 800c4c6:	1c43      	adds	r3, r0, #1
 800c4c8:	d102      	bne.n	800c4d0 <_fstat_r+0x1c>
 800c4ca:	682b      	ldr	r3, [r5, #0]
 800c4cc:	b103      	cbz	r3, 800c4d0 <_fstat_r+0x1c>
 800c4ce:	6023      	str	r3, [r4, #0]
 800c4d0:	bd38      	pop	{r3, r4, r5, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000f00 	.word	0x20000f00

0800c4d8 <_isatty_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4d06      	ldr	r5, [pc, #24]	; (800c4f4 <_isatty_r+0x1c>)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	602b      	str	r3, [r5, #0]
 800c4e4:	f7f7 f911 	bl	800370a <_isatty>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_isatty_r+0x1a>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_isatty_r+0x1a>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	20000f00 	.word	0x20000f00

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
